import{c as H,a as c,h as y,r as _,i as Ye,o as ae,b as Z,n as Pe,d as de,g as N,l as xe,e as $e,f as F,j as fe,w as k,k as mt,s as Ge,m as ie,P as bt,p as gt,q as ne,t as yt,u as ue,v as Se,x as Ae,y as we,z as Oe,A as qe,B as zt,C as St,D as wt,E as Je,F as qt,G as se,H as pt,_ as Ct,I as Tt,J as _t,K as kt,L as pe,M as Bt,N as L,O as M,Q as Ce,R as xt,S as He,T as J}from"./index-BG_GJT5J.js";import{h as ee,a as Ze,u as ve,b as Ot,c as he,d as Pt,e as et,f as $t,g as Lt,Q as Mt,i as Et,j as Qe,k as At,l as Ht,R as Re}from"./QPage-DNhbTL6L.js";import{s as Qt,g as Rt,a as Dt,b as It,c as De,d as Te,u as Vt,e as jt,f as Ft,h as Nt,i as Wt,j as Kt,k as _e,Q as Xt}from"./use-prevent-scroll-H_Vcrlwp.js";import{b as j}from"./format-C_kfbgOa.js";const Ut=H({name:"QToolbarTitle",props:{shrink:Boolean},setup(e,{slots:l}){const i=c(()=>"q-toolbar__title ellipsis"+(e.shrink===!0?" col-shrink":""));return()=>y("div",{class:i.value},ee(l.default))}}),Yt=H({name:"QToolbar",props:{inset:Boolean},setup(e,{slots:l}){const i=c(()=>"q-toolbar row no-wrap items-center"+(e.inset===!0?" q-toolbar--inset":""));return()=>y("div",{class:i.value,role:"toolbar"},ee(l.default))}});function Gt(){const e=_(!Ye.value);return e.value===!1&&ae(()=>{e.value=!0}),{isHydrated:e}}const tt=typeof ResizeObserver<"u",Ie=tt===!0?{}:{style:"display:block;position:absolute;top:0;left:0;right:0;bottom:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;",url:"about:blank"},re=H({name:"QResizeObserver",props:{debounce:{type:[String,Number],default:100}},emits:["resize"],setup(e,{emit:l}){let i=null,o,t={width:-1,height:-1};function n(v){v===!0||e.debounce===0||e.debounce==="0"?r():i===null&&(i=setTimeout(r,e.debounce))}function r(){if(i!==null&&(clearTimeout(i),i=null),o){const{offsetWidth:v,offsetHeight:d}=o;(v!==t.width||d!==t.height)&&(t={width:v,height:d},l("resize",t))}}const{proxy:a}=N();if(a.trigger=n,tt===!0){let v;const d=s=>{o=a.$el.parentNode,o?(v=new ResizeObserver(n),v.observe(o),r()):s!==!0&&de(()=>{d(!0)})};return ae(()=>{d()}),Z(()=>{i!==null&&clearTimeout(i),v!==void 0&&(v.disconnect!==void 0?v.disconnect():o&&v.unobserve(o))}),Pe}else{let v=function(){i!==null&&(clearTimeout(i),i=null),z!==void 0&&(z.removeEventListener!==void 0&&z.removeEventListener("resize",n,xe.passive),z=void 0)},d=function(){v(),o&&o.contentDocument&&(z=o.contentDocument.defaultView,z.addEventListener("resize",n,xe.passive),r())};const{isHydrated:s}=Gt();let z;return ae(()=>{de(()=>{o=a.$el,o&&d()})}),Z(v),()=>{if(s.value===!0)return y("object",{class:"q--avoid-card-border",style:Ie.style,tabindex:-1,type:"text/html",data:Ie.url,"aria-hidden":"true",onLoad:d})}}}}),Jt=H({name:"QHeader",props:{modelValue:{type:Boolean,default:!0},reveal:Boolean,revealOffset:{type:Number,default:250},bordered:Boolean,elevated:Boolean,heightHint:{type:[String,Number],default:50}},emits:["reveal","focusin"],setup(e,{slots:l,emit:i}){const{proxy:{$q:o}}=N(),t=$e(fe,F);if(t===F)return console.error("QHeader needs to be child of QLayout"),F;const n=_(parseInt(e.heightHint,10)),r=_(!0),a=c(()=>e.reveal===!0||t.view.value.indexOf("H")!==-1||o.platform.is.ios&&t.isContainer.value===!0),v=c(()=>{if(e.modelValue!==!0)return 0;if(a.value===!0)return r.value===!0?n.value:0;const m=n.value-t.scroll.value.position;return m>0?m:0}),d=c(()=>e.modelValue!==!0||a.value===!0&&r.value!==!0),s=c(()=>e.modelValue===!0&&d.value===!0&&e.reveal===!0),z=c(()=>"q-header q-layout__section--marginal "+(a.value===!0?"fixed":"absolute")+"-top"+(e.bordered===!0?" q-header--bordered":"")+(d.value===!0?" q-header--hidden":"")+(e.modelValue!==!0?" q-layout--prevent-focus":"")),S=c(()=>{const m=t.rows.value.top,w={};return m[0]==="l"&&t.left.space===!0&&(w[o.lang.rtl===!0?"right":"left"]=`${t.left.size}px`),m[2]==="r"&&t.right.space===!0&&(w[o.lang.rtl===!0?"left":"right"]=`${t.right.size}px`),w});function h(m,w){t.update("header",m,w)}function g(m,w){m.value!==w&&(m.value=w)}function O({height:m}){g(n,m),h("size",m)}function B(m){s.value===!0&&g(r,!0),i("focusin",m)}k(()=>e.modelValue,m=>{h("space",m),g(r,!0),t.animate()}),k(v,m=>{h("offset",m)}),k(()=>e.reveal,m=>{m===!1&&g(r,e.modelValue)}),k(r,m=>{t.animate(),i("reveal",m)}),k(t.scroll,m=>{e.reveal===!0&&g(r,m.direction==="up"||m.position<=e.revealOffset||m.position-m.inflectionPoint<100)});const C={};return t.instances.header=C,e.modelValue===!0&&h("size",n.value),h("space",e.modelValue),h("offset",v.value),Z(()=>{t.instances.header===C&&(t.instances.header=void 0,h("size",0),h("offset",0),h("space",!1))}),()=>{const m=Ze(l.default,[]);return e.elevated===!0&&m.push(y("div",{class:"q-layout__shadow absolute-full overflow-hidden no-pointer-events"})),m.push(y(re,{debounce:0,onResize:O})),y("header",{class:z.value,style:S.value,onFocusin:B},m)}}}),ce=H({name:"QItemSection",props:{avatar:Boolean,thumbnail:Boolean,side:Boolean,top:Boolean,noWrap:Boolean},setup(e,{slots:l}){const i=c(()=>`q-item__section column q-item__section--${e.avatar===!0||e.side===!0||e.thumbnail===!0?"side":"main"}`+(e.top===!0?" q-item__section--top justify-start":" justify-center")+(e.avatar===!0?" q-item__section--avatar":"")+(e.thumbnail===!0?" q-item__section--thumbnail":"")+(e.noWrap===!0?" q-item__section--nowrap":""));return()=>y("div",{class:i.value},ee(l.default))}}),Ve=H({name:"QItem",props:{...ve,...Ot,tag:{type:String,default:"div"},active:{type:Boolean,default:null},clickable:Boolean,dense:Boolean,insetLevel:Number,tabindex:[String,Number],focused:Boolean,manualFocus:Boolean},emits:["click","keyup"],setup(e,{slots:l,emit:i}){const{proxy:{$q:o}}=N(),t=he(e,o),{hasLink:n,linkAttrs:r,linkClass:a,linkTag:v,navigateOnClick:d}=Pt(),s=_(null),z=_(null),S=c(()=>e.clickable===!0||n.value===!0||e.tag==="label"),h=c(()=>e.disable!==!0&&S.value===!0),g=c(()=>"q-item q-item-type row no-wrap"+(e.dense===!0?" q-item--dense":"")+(t.value===!0?" q-item--dark":"")+(n.value===!0&&e.active===null?a.value:e.active===!0?` q-item--active${e.activeClass!==void 0?` ${e.activeClass}`:""}`:"")+(e.disable===!0?" disabled":"")+(h.value===!0?" q-item--clickable q-link cursor-pointer "+(e.manualFocus===!0?"q-manual-focusable":"q-focusable q-hoverable")+(e.focused===!0?" q-manual-focusable--focused":""):"")),O=c(()=>e.insetLevel===void 0?null:{["padding"+(o.lang.rtl===!0?"Right":"Left")]:16+e.insetLevel*56+"px"});function B(w){h.value===!0&&(z.value!==null&&(w.qKeyEvent!==!0&&document.activeElement===s.value?z.value.focus():document.activeElement===z.value&&s.value.focus()),d(w))}function C(w){if(h.value===!0&&mt(w,[13,32])===!0){Ge(w),w.qKeyEvent=!0;const q=new MouseEvent("click",w);q.qKeyEvent=!0,s.value.dispatchEvent(q)}i("keyup",w)}function m(){const w=Ze(l.default,[]);return h.value===!0&&w.unshift(y("div",{class:"q-focus-helper",tabindex:-1,ref:z})),w}return()=>{const w={ref:s,class:g.value,style:O.value,role:"listitem",onClick:B,onKeyup:C};return h.value===!0?(w.tabindex=e.tabindex||"0",Object.assign(w,r.value)):S.value===!0&&(w["aria-disabled"]="true"),y(v.value,w,m())}}}),Zt=["ul","ol"],en=H({name:"QList",props:{...ve,bordered:Boolean,dense:Boolean,separator:Boolean,padding:Boolean,tag:{type:String,default:"div"}},setup(e,{slots:l}){const i=N(),o=he(e,i.proxy.$q),t=c(()=>Zt.includes(e.tag)?null:"list"),n=c(()=>"q-list"+(e.bordered===!0?" q-list--bordered":"")+(e.dense===!0?" q-list--dense":"")+(e.separator===!0?" q-list--separator":"")+(o.value===!0?" q-list--dark":"")+(e.padding===!0?" q-list--padding":""));return()=>y(e.tag,{class:n.value,role:t.value},ee(l.default))}}),tn=H({props:["store","barStyle","verticalBarStyle","horizontalBarStyle"],setup(e){return()=>[y("div",{class:e.store.scroll.vertical.barClass.value,style:[e.barStyle,e.verticalBarStyle],"aria-hidden":"true",onMousedown:e.store.onVerticalMousedown}),y("div",{class:e.store.scroll.horizontal.barClass.value,style:[e.barStyle,e.horizontalBarStyle],"aria-hidden":"true",onMousedown:e.store.onHorizontalMousedown}),ie(y("div",{ref:e.store.scroll.vertical.ref,class:e.store.scroll.vertical.thumbClass.value,style:e.store.scroll.vertical.style.value,"aria-hidden":"true"}),e.store.thumbVertDir),ie(y("div",{ref:e.store.scroll.horizontal.ref,class:e.store.scroll.horizontal.thumbClass.value,style:e.store.scroll.horizontal.style.value,"aria-hidden":"true"}),e.store.thumbHorizDir)]}}),{passive:je}=xe,nn=["both","horizontal","vertical"],nt=H({name:"QScrollObserver",props:{axis:{type:String,validator:e=>nn.includes(e),default:"vertical"},debounce:[String,Number],scrollTarget:Qt},emits:["scroll"],setup(e,{emit:l}){const i={position:{top:0,left:0},direction:"down",directionChanged:!1,delta:{top:0,left:0},inflectionPoint:{top:0,left:0}};let o=null,t,n;k(()=>e.scrollTarget,()=>{v(),a()});function r(){o!==null&&o();const z=Math.max(0,Dt(t)),S=It(t),h={top:z-i.position.top,left:S-i.position.left};if(e.axis==="vertical"&&h.top===0||e.axis==="horizontal"&&h.left===0)return;const g=Math.abs(h.top)>=Math.abs(h.left)?h.top<0?"up":"down":h.left<0?"left":"right";i.position={top:z,left:S},i.directionChanged=i.direction!==g,i.delta=h,i.directionChanged===!0&&(i.direction=g,i.inflectionPoint=i.position),l("scroll",{...i})}function a(){t=Rt(n,e.scrollTarget),t.addEventListener("scroll",d,je),d(!0)}function v(){t!==void 0&&(t.removeEventListener("scroll",d,je),t=void 0)}function d(z){if(z===!0||e.debounce===0||e.debounce==="0")r();else if(o===null){const[S,h]=e.debounce?[setTimeout(r,e.debounce),clearTimeout]:[requestAnimationFrame(r),cancelAnimationFrame];o=()=>{h(S),o=null}}}const{proxy:s}=N();return k(()=>s.$q.lang.rtl,r),ae(()=>{n=s.$el.parentNode,a()}),Z(()=>{o!==null&&o(),v()}),Object.assign(s,{trigger:d,getPosition:()=>i}),Pe}}),Le={left:!0,right:!0,up:!0,down:!0,horizontal:!0,vertical:!0},ln=Object.keys(Le);Le.all=!0;function Fe(e){const l={};for(const i of ln)e[i]===!0&&(l[i]=!0);return Object.keys(l).length===0?Le:(l.horizontal===!0?l.left=l.right=!0:l.left===!0&&l.right===!0&&(l.horizontal=!0),l.vertical===!0?l.up=l.down=!0:l.up===!0&&l.down===!0&&(l.vertical=!0),l.horizontal===!0&&l.vertical===!0&&(l.all=!0),l)}const an=["INPUT","TEXTAREA"];function Ne(e,l){return l.event===void 0&&e.target!==void 0&&e.target.draggable!==!0&&typeof l.handler=="function"&&an.includes(e.target.nodeName.toUpperCase())===!1&&(e.qClonedBy===void 0||e.qClonedBy.indexOf(l.uid)===-1)}function rn(){if(window.getSelection!==void 0){const e=window.getSelection();e.empty!==void 0?e.empty():e.removeAllRanges!==void 0&&(e.removeAllRanges(),bt.is.mobile!==!0&&e.addRange(document.createRange()))}else document.selection!==void 0&&document.selection.empty()}function ke(e,l,i){const o=Oe(e);let t,n=o.left-l.event.x,r=o.top-l.event.y,a=Math.abs(n),v=Math.abs(r);const d=l.direction;d.horizontal===!0&&d.vertical!==!0?t=n<0?"left":"right":d.horizontal!==!0&&d.vertical===!0?t=r<0?"up":"down":d.up===!0&&r<0?(t="up",a>v&&(d.left===!0&&n<0?t="left":d.right===!0&&n>0&&(t="right"))):d.down===!0&&r>0?(t="down",a>v&&(d.left===!0&&n<0?t="left":d.right===!0&&n>0&&(t="right"))):d.left===!0&&n<0?(t="left",a<v&&(d.up===!0&&r<0?t="up":d.down===!0&&r>0&&(t="down"))):d.right===!0&&n>0&&(t="right",a<v&&(d.up===!0&&r<0?t="up":d.down===!0&&r>0&&(t="down")));let s=!1;if(t===void 0&&i===!1){if(l.event.isFirst===!0||l.event.lastDir===void 0)return{};t=l.event.lastDir,s=!0,t==="left"||t==="right"?(o.left-=n,a=0,n=0):(o.top-=r,v=0,r=0)}return{synthetic:s,payload:{evt:e,touch:l.event.mouse!==!0,mouse:l.event.mouse===!0,position:o,direction:t,isFirst:l.event.isFirst,isFinal:i===!0,duration:Date.now()-l.event.time,distance:{x:a,y:v},offset:{x:n,y:r},delta:{x:o.left-l.event.lastX,y:o.top-l.event.lastY}}}}let on=0;const le=gt({name:"touch-pan",beforeMount(e,{value:l,modifiers:i}){if(i.mouse!==!0&&ne.has.touch!==!0)return;function o(n,r){i.mouse===!0&&r===!0?Ge(n):(i.stop===!0&&we(n),i.prevent===!0&&Ae(n))}const t={uid:"qvtp_"+on++,handler:l,modifiers:i,direction:Fe(i),noop:Pe,mouseStart(n){Ne(n,t)&&yt(n)&&(ue(t,"temp",[[document,"mousemove","move","notPassiveCapture"],[document,"mouseup","end","passiveCapture"]]),t.start(n,!0))},touchStart(n){if(Ne(n,t)){const r=n.target;ue(t,"temp",[[r,"touchmove","move","notPassiveCapture"],[r,"touchcancel","end","passiveCapture"],[r,"touchend","end","passiveCapture"]]),t.start(n)}},start(n,r){if(ne.is.firefox===!0&&Se(e,!0),t.lastEvt=n,r===!0||i.stop===!0){if(t.direction.all!==!0&&(r!==!0||t.modifiers.mouseAllDir!==!0&&t.modifiers.mousealldir!==!0)){const d=n.type.indexOf("mouse")!==-1?new MouseEvent(n.type,n):new TouchEvent(n.type,n);n.defaultPrevented===!0&&Ae(d),n.cancelBubble===!0&&we(d),Object.assign(d,{qKeyEvent:n.qKeyEvent,qClickOutside:n.qClickOutside,qAnchorHandled:n.qAnchorHandled,qClonedBy:n.qClonedBy===void 0?[t.uid]:n.qClonedBy.concat(t.uid)}),t.initialEvent={target:n.target,event:d}}we(n)}const{left:a,top:v}=Oe(n);t.event={x:a,y:v,time:Date.now(),mouse:r===!0,detected:!1,isFirst:!0,isFinal:!1,lastX:a,lastY:v}},move(n){if(t.event===void 0)return;const r=Oe(n),a=r.left-t.event.x,v=r.top-t.event.y;if(a===0&&v===0)return;t.lastEvt=n;const d=t.event.mouse===!0,s=()=>{o(n,d);let h;i.preserveCursor!==!0&&i.preservecursor!==!0&&(h=document.documentElement.style.cursor||"",document.documentElement.style.cursor="grabbing"),d===!0&&document.body.classList.add("no-pointer-events--children"),document.body.classList.add("non-selectable"),rn(),t.styleCleanup=g=>{if(t.styleCleanup=void 0,h!==void 0&&(document.documentElement.style.cursor=h),document.body.classList.remove("non-selectable"),d===!0){const O=()=>{document.body.classList.remove("no-pointer-events--children")};g!==void 0?setTimeout(()=>{O(),g()},50):O()}else g!==void 0&&g()}};if(t.event.detected===!0){t.event.isFirst!==!0&&o(n,t.event.mouse);const{payload:h,synthetic:g}=ke(n,t,!1);h!==void 0&&(t.handler(h)===!1?t.end(n):(t.styleCleanup===void 0&&t.event.isFirst===!0&&s(),t.event.lastX=h.position.left,t.event.lastY=h.position.top,t.event.lastDir=g===!0?void 0:h.direction,t.event.isFirst=!1));return}if(t.direction.all===!0||d===!0&&(t.modifiers.mouseAllDir===!0||t.modifiers.mousealldir===!0)){s(),t.event.detected=!0,t.move(n);return}const z=Math.abs(a),S=Math.abs(v);z!==S&&(t.direction.horizontal===!0&&z>S||t.direction.vertical===!0&&z<S||t.direction.up===!0&&z<S&&v<0||t.direction.down===!0&&z<S&&v>0||t.direction.left===!0&&z>S&&a<0||t.direction.right===!0&&z>S&&a>0?(t.event.detected=!0,t.move(n)):t.end(n,!0))},end(n,r){if(t.event!==void 0){if(qe(t,"temp"),ne.is.firefox===!0&&Se(e,!1),r===!0)t.styleCleanup!==void 0&&t.styleCleanup(),t.event.detected!==!0&&t.initialEvent!==void 0&&t.initialEvent.target.dispatchEvent(t.initialEvent.event);else if(t.event.detected===!0){t.event.isFirst===!0&&t.handler(ke(n===void 0?t.lastEvt:n,t).payload);const{payload:a}=ke(n===void 0?t.lastEvt:n,t,!0),v=()=>{t.handler(a)};t.styleCleanup!==void 0?t.styleCleanup(v):v()}t.event=void 0,t.initialEvent=void 0,t.lastEvt=void 0}}};if(e.__qtouchpan=t,i.mouse===!0){const n=i.mouseCapture===!0||i.mousecapture===!0?"Capture":"";ue(t,"main",[[e,"mousedown","mouseStart",`passive${n}`]])}ne.has.touch===!0&&ue(t,"main",[[e,"touchstart","touchStart",`passive${i.capture===!0?"Capture":""}`],[e,"touchmove","noop","notPassiveCapture"]])},updated(e,l){const i=e.__qtouchpan;i!==void 0&&(l.oldValue!==l.value&&(typeof value!="function"&&i.end(),i.handler=l.value),i.direction=Fe(l.modifiers))},beforeUnmount(e){const l=e.__qtouchpan;l!==void 0&&(l.event!==void 0&&l.end(),qe(l,"main"),qe(l,"temp"),ne.is.firefox===!0&&Se(e,!1),l.styleCleanup!==void 0&&l.styleCleanup(),delete e.__qtouchpan)}}),We=["vertical","horizontal"],Be={vertical:{offset:"offsetY",scroll:"scrollTop",dir:"down",dist:"y"},horizontal:{offset:"offsetX",scroll:"scrollLeft",dir:"right",dist:"x"}},Ke={prevent:!0,mouse:!0,mouseAllDir:!0},Xe=e=>e>=250?50:Math.ceil(e/5),un=H({name:"QScrollArea",props:{...ve,thumbStyle:Object,verticalThumbStyle:Object,horizontalThumbStyle:Object,barStyle:[Array,String,Object],verticalBarStyle:[Array,String,Object],horizontalBarStyle:[Array,String,Object],verticalOffset:{type:Array,default:[0,0]},horizontalOffset:{type:Array,default:[0,0]},contentStyle:[Array,String,Object],contentActiveStyle:[Array,String,Object],delay:{type:[String,Number],default:1e3},visible:{type:Boolean,default:null},tabindex:[String,Number],onScroll:Function},setup(e,{slots:l,emit:i}){const o=_(!1),t=_(!1),n=_(!1),r={vertical:_(0),horizontal:_(0)},a={vertical:{ref:_(null),position:_(0),size:_(0)},horizontal:{ref:_(null),position:_(0),size:_(0)}},{proxy:v}=N(),d=he(e,v.$q);let s=null,z;const S=_(null),h=c(()=>"q-scrollarea"+(d.value===!0?" q-scrollarea--dark":""));Object.assign(r,{verticalInner:c(()=>r.vertical.value-e.verticalOffset[0]-e.verticalOffset[1]),horizontalInner:c(()=>r.horizontal.value-e.horizontalOffset[0]-e.horizontalOffset[1])}),a.vertical.percentage=c(()=>{const f=a.vertical.size.value-r.vertical.value;if(f<=0)return 0;const b=j(a.vertical.position.value/f,0,1);return Math.round(b*1e4)/1e4}),a.vertical.thumbHidden=c(()=>(e.visible===null?n.value:e.visible)!==!0&&o.value===!1&&t.value===!1||a.vertical.size.value<=r.vertical.value+1),a.vertical.thumbStart=c(()=>e.verticalOffset[0]+a.vertical.percentage.value*(r.verticalInner.value-a.vertical.thumbSize.value)),a.vertical.thumbSize=c(()=>Math.round(j(r.verticalInner.value*r.verticalInner.value/a.vertical.size.value,Xe(r.verticalInner.value),r.verticalInner.value))),a.vertical.style=c(()=>({...e.thumbStyle,...e.verticalThumbStyle,top:`${a.vertical.thumbStart.value}px`,height:`${a.vertical.thumbSize.value}px`,right:`${e.horizontalOffset[1]}px`})),a.vertical.thumbClass=c(()=>"q-scrollarea__thumb q-scrollarea__thumb--v absolute-right"+(a.vertical.thumbHidden.value===!0?" q-scrollarea__thumb--invisible":"")),a.vertical.barClass=c(()=>"q-scrollarea__bar q-scrollarea__bar--v absolute-right"+(a.vertical.thumbHidden.value===!0?" q-scrollarea__bar--invisible":"")),a.horizontal.percentage=c(()=>{const f=a.horizontal.size.value-r.horizontal.value;if(f<=0)return 0;const b=j(Math.abs(a.horizontal.position.value)/f,0,1);return Math.round(b*1e4)/1e4}),a.horizontal.thumbHidden=c(()=>(e.visible===null?n.value:e.visible)!==!0&&o.value===!1&&t.value===!1||a.horizontal.size.value<=r.horizontal.value+1),a.horizontal.thumbStart=c(()=>e.horizontalOffset[0]+a.horizontal.percentage.value*(r.horizontalInner.value-a.horizontal.thumbSize.value)),a.horizontal.thumbSize=c(()=>Math.round(j(r.horizontalInner.value*r.horizontalInner.value/a.horizontal.size.value,Xe(r.horizontalInner.value),r.horizontalInner.value))),a.horizontal.style=c(()=>({...e.thumbStyle,...e.horizontalThumbStyle,[v.$q.lang.rtl===!0?"right":"left"]:`${a.horizontal.thumbStart.value}px`,width:`${a.horizontal.thumbSize.value}px`,bottom:`${e.verticalOffset[1]}px`})),a.horizontal.thumbClass=c(()=>"q-scrollarea__thumb q-scrollarea__thumb--h absolute-bottom"+(a.horizontal.thumbHidden.value===!0?" q-scrollarea__thumb--invisible":"")),a.horizontal.barClass=c(()=>"q-scrollarea__bar q-scrollarea__bar--h absolute-bottom"+(a.horizontal.thumbHidden.value===!0?" q-scrollarea__bar--invisible":""));const g=c(()=>a.vertical.thumbHidden.value===!0&&a.horizontal.thumbHidden.value===!0?e.contentStyle:e.contentActiveStyle);function O(){const f={};return We.forEach(b=>{const T=a[b];Object.assign(f,{[b+"Position"]:T.position.value,[b+"Percentage"]:T.percentage.value,[b+"Size"]:T.size.value,[b+"ContainerSize"]:r[b].value,[b+"ContainerInnerSize"]:r[b+"Inner"].value})}),f}const B=zt(()=>{const f=O();f.ref=v,i("scroll",f)},0);function C(f,b,T){if(We.includes(f)===!1){console.error("[QScrollArea]: wrong first param of setScrollPosition (vertical/horizontal)");return}(f==="vertical"?De:Te)(S.value,b,T)}function m({height:f,width:b}){let T=!1;r.vertical.value!==f&&(r.vertical.value=f,T=!0),r.horizontal.value!==b&&(r.horizontal.value=b,T=!0),T===!0&&$()}function w({position:f}){let b=!1;a.vertical.position.value!==f.top&&(a.vertical.position.value=f.top,b=!0),a.horizontal.position.value!==f.left&&(a.horizontal.position.value=f.left,b=!0),b===!0&&$()}function q({height:f,width:b}){a.horizontal.size.value!==b&&(a.horizontal.size.value=b,$()),a.vertical.size.value!==f&&(a.vertical.size.value=f,$())}function x(f,b){const T=a[b];if(f.isFirst===!0){if(T.thumbHidden.value===!0)return;z=T.position.value,t.value=!0}else if(t.value!==!0)return;f.isFinal===!0&&(t.value=!1);const D=Be[b],V=(T.size.value-r[b].value)/(r[b+"Inner"].value-T.thumbSize.value),I=f.distance[D.dist],te=z+(f.direction===D.dir?1:-1)*I*V;W(te,b)}function P(f,b){const T=a[b];if(T.thumbHidden.value!==!0){const D=b==="vertical"?e.verticalOffset[0]:e.horizontalOffset[0],V=f[Be[b].offset]-D,I=T.thumbStart.value-D;if(V<I||V>I+T.thumbSize.value){const te=V-T.thumbSize.value/2,me=j(te/(r[b+"Inner"].value-T.thumbSize.value),0,1);W(me*Math.max(0,T.size.value-r[b].value),b)}T.ref.value!==null&&T.ref.value.dispatchEvent(new MouseEvent(f.type,f))}}function $(){o.value=!0,s!==null&&clearTimeout(s),s=setTimeout(()=>{s=null,o.value=!1},e.delay),e.onScroll!==void 0&&B()}function W(f,b){S.value[Be[b].scroll]=f}let E=null;function R(){E!==null&&clearTimeout(E),E=setTimeout(()=>{E=null,n.value=!0},v.$q.platform.is.ios?50:0)}function K(){E!==null&&(clearTimeout(E),E=null),n.value=!1}let G=null;k(()=>v.$q.lang.rtl,f=>{S.value!==null&&Te(S.value,Math.abs(a.horizontal.position.value)*(f===!0?-1:1))}),St(()=>{G={top:a.vertical.position.value,left:a.horizontal.position.value}}),wt(()=>{if(G===null)return;const f=S.value;f!==null&&(Te(f,G.left),De(f,G.top))}),Z(B.cancel),Object.assign(v,{getScrollTarget:()=>S.value,getScroll:O,getScrollPosition:()=>({top:a.vertical.position.value,left:a.horizontal.position.value}),getScrollPercentage:()=>({top:a.vertical.percentage.value,left:a.horizontal.percentage.value}),setScrollPosition:C,setScrollPercentage(f,b,T){C(f,b*(a[f].size.value-r[f].value)*(f==="horizontal"&&v.$q.lang.rtl===!0?-1:1),T)}});const X={scroll:a,thumbVertDir:[[le,f=>{x(f,"vertical")},void 0,{vertical:!0,...Ke}]],thumbHorizDir:[[le,f=>{x(f,"horizontal")},void 0,{horizontal:!0,...Ke}]],onVerticalMousedown(f){P(f,"vertical")},onHorizontalMousedown(f){P(f,"horizontal")}};return()=>y("div",{class:h.value,onMouseenter:R,onMouseleave:K},[y("div",{ref:S,class:"q-scrollarea__container scroll relative-position fit hide-scrollbar",tabindex:e.tabindex!==void 0?e.tabindex:void 0},[y("div",{class:"q-scrollarea__content absolute",style:g.value},et(l.default,[y(re,{debounce:0,onResize:q})])),y(nt,{axis:"both",onScroll:w})]),y(re,{debounce:0,onResize:m}),y(tn,{store:X,barStyle:e.barStyle,verticalBarStyle:e.verticalBarStyle,horizontalBarStyle:e.horizontalBarStyle})])}}),sn=H({name:"QAvatar",props:{...$t,fontSize:String,color:String,textColor:String,icon:String,square:Boolean,rounded:Boolean},setup(e,{slots:l}){const i=Lt(e),o=c(()=>"q-avatar"+(e.color?` bg-${e.color}`:"")+(e.textColor?` text-${e.textColor} q-chip--colored`:"")+(e.square===!0?" q-avatar--square":e.rounded===!0?" rounded-borders":"")),t=c(()=>e.fontSize?{fontSize:e.fontSize}:null);return()=>{const n=e.icon!==void 0?[y(Mt,{name:e.icon})]:void 0;return y("div",{class:o.value,style:i.value},[y("div",{class:"q-avatar__content row flex-center overflow-hidden",style:t.value},Et(l.default,n))])}}}),Ue=150,cn=H({name:"QDrawer",inheritAttrs:!1,props:{...Vt,...ve,side:{type:String,default:"left",validator:e=>["left","right"].includes(e)},width:{type:Number,default:300},mini:Boolean,miniToOverlay:Boolean,miniWidth:{type:Number,default:57},noMiniAnimation:Boolean,breakpoint:{type:Number,default:1023},showIfAbove:Boolean,behavior:{type:String,validator:e=>["default","desktop","mobile"].includes(e),default:"default"},bordered:Boolean,elevated:Boolean,overlay:Boolean,persistent:Boolean,noSwipeOpen:Boolean,noSwipeClose:Boolean,noSwipeBackdrop:Boolean},emits:[...jt,"onLayout","miniState"],setup(e,{slots:l,emit:i,attrs:o}){const t=N(),{proxy:{$q:n}}=t,r=he(e,n),{preventBodyScroll:a}=Kt(),{registerTimeout:v,removeTimeout:d}=Ft(),s=$e(fe,F);if(s===F)return console.error("QDrawer needs to be child of QLayout"),F;let z,S=null,h;const g=_(e.behavior==="mobile"||e.behavior!=="desktop"&&s.totalWidth.value<=e.breakpoint),O=c(()=>e.mini===!0&&g.value!==!0),B=c(()=>O.value===!0?e.miniWidth:e.width),C=_(e.showIfAbove===!0&&g.value===!1?!0:e.modelValue===!0),m=c(()=>e.persistent!==!0&&(g.value===!0||te.value===!0));function w(u,p){if($(),u!==!1&&s.animate(),Q(0),g.value===!0){const A=s.instances[T.value];A!==void 0&&A.belowBreakpoint===!0&&A.hide(!1),U(1),s.isContainer.value!==!0&&a(!0)}else U(0),u!==!1&&ge(!1);v(()=>{u!==!1&&ge(!0),p!==!0&&i("show",u)},Ue)}function q(u,p){W(),u!==!1&&s.animate(),U(0),Q(K.value*B.value),ye(),p!==!0?v(()=>{i("hide",u)},Ue):d()}const{show:x,hide:P}=Nt({showing:C,hideOnRouteChange:m,handleShow:w,handleHide:q}),{addToHistory:$,removeFromHistory:W}=Wt(C,P,m),E={belowBreakpoint:g,hide:P},R=c(()=>e.side==="right"),K=c(()=>(n.lang.rtl===!0?-1:1)*(R.value===!0?1:-1)),G=_(0),X=_(!1),f=_(!1),b=_(B.value*K.value),T=c(()=>R.value===!0?"left":"right"),D=c(()=>C.value===!0&&g.value===!1&&e.overlay===!1?e.miniToOverlay===!0?e.miniWidth:B.value:0),V=c(()=>e.overlay===!0||e.miniToOverlay===!0||s.view.value.indexOf(R.value?"R":"L")!==-1||n.platform.is.ios===!0&&s.isContainer.value===!0),I=c(()=>e.overlay===!1&&C.value===!0&&g.value===!1),te=c(()=>e.overlay===!0&&C.value===!0&&g.value===!1),me=c(()=>"fullscreen q-drawer__backdrop"+(C.value===!1&&X.value===!1?" hidden":"")),lt=c(()=>({backgroundColor:`rgba(0,0,0,${G.value*.4})`})),Me=c(()=>R.value===!0?s.rows.value.top[2]==="r":s.rows.value.top[0]==="l"),at=c(()=>R.value===!0?s.rows.value.bottom[2]==="r":s.rows.value.bottom[0]==="l"),it=c(()=>{const u={};return s.header.space===!0&&Me.value===!1&&(V.value===!0?u.top=`${s.header.offset}px`:s.header.space===!0&&(u.top=`${s.header.size}px`)),s.footer.space===!0&&at.value===!1&&(V.value===!0?u.bottom=`${s.footer.offset}px`:s.footer.space===!0&&(u.bottom=`${s.footer.size}px`)),u}),rt=c(()=>{const u={width:`${B.value}px`,transform:`translateX(${b.value}px)`};return g.value===!0?u:Object.assign(u,it.value)}),ot=c(()=>"q-drawer__content fit "+(s.isContainer.value!==!0?"scroll":"overflow-auto")),ut=c(()=>`q-drawer q-drawer--${e.side}`+(f.value===!0?" q-drawer--mini-animate":"")+(e.bordered===!0?" q-drawer--bordered":"")+(r.value===!0?" q-drawer--dark q-dark":"")+(X.value===!0?" no-transition":C.value===!0?"":" q-layout--prevent-focus")+(g.value===!0?" fixed q-drawer--on-top q-drawer--mobile q-drawer--top-padding":` q-drawer--${O.value===!0?"mini":"standard"}`+(V.value===!0||I.value!==!0?" fixed":"")+(e.overlay===!0||e.miniToOverlay===!0?" q-drawer--on-top":"")+(Me.value===!0?" q-drawer--top-padding":""))),st=c(()=>{const u=n.lang.rtl===!0?e.side:T.value;return[[le,vt,void 0,{[u]:!0,mouse:!0}]]}),ct=c(()=>{const u=n.lang.rtl===!0?T.value:e.side;return[[le,Ee,void 0,{[u]:!0,mouse:!0}]]}),dt=c(()=>{const u=n.lang.rtl===!0?T.value:e.side;return[[le,Ee,void 0,{[u]:!0,mouse:!0,mouseAllDir:!0}]]});function be(){ht(g,e.behavior==="mobile"||e.behavior!=="desktop"&&s.totalWidth.value<=e.breakpoint)}k(g,u=>{u===!0?(z=C.value,C.value===!0&&P(!1)):e.overlay===!1&&e.behavior!=="mobile"&&z!==!1&&(C.value===!0?(Q(0),U(0),ye()):x(!1))}),k(()=>e.side,(u,p)=>{s.instances[p]===E&&(s.instances[p]=void 0,s[p].space=!1,s[p].offset=0),s.instances[u]=E,s[u].size=B.value,s[u].space=I.value,s[u].offset=D.value}),k(s.totalWidth,()=>{(s.isContainer.value===!0||document.qScrollPrevented!==!0)&&be()}),k(()=>e.behavior+e.breakpoint,be),k(s.isContainer,u=>{C.value===!0&&a(u!==!0),u===!0&&be()}),k(s.scrollbarWidth,()=>{Q(C.value===!0?0:void 0)}),k(D,u=>{Y("offset",u)}),k(I,u=>{i("onLayout",u),Y("space",u)}),k(R,()=>{Q()}),k(B,u=>{Q(),ze(e.miniToOverlay,u)}),k(()=>e.miniToOverlay,u=>{ze(u,B.value)}),k(()=>n.lang.rtl,()=>{Q()}),k(()=>e.mini,()=>{e.noMiniAnimation||e.modelValue===!0&&(ft(),s.animate())}),k(O,u=>{i("miniState",u)});function Q(u){u===void 0?de(()=>{u=C.value===!0?0:B.value,Q(K.value*u)}):(s.isContainer.value===!0&&R.value===!0&&(g.value===!0||Math.abs(u)===B.value)&&(u+=K.value*s.scrollbarWidth.value),b.value=u)}function U(u){G.value=u}function ge(u){const p=u===!0?"remove":s.isContainer.value!==!0?"add":"";p!==""&&document.body.classList[p]("q-body--drawer-toggle")}function ft(){S!==null&&clearTimeout(S),t.proxy&&t.proxy.$el&&t.proxy.$el.classList.add("q-drawer--mini-animate"),f.value=!0,S=setTimeout(()=>{S=null,f.value=!1,t&&t.proxy&&t.proxy.$el&&t.proxy.$el.classList.remove("q-drawer--mini-animate")},150)}function vt(u){if(C.value!==!1)return;const p=B.value,A=j(u.distance.x,0,p);if(u.isFinal===!0){A>=Math.min(75,p)===!0?x():(s.animate(),U(0),Q(K.value*p)),X.value=!1;return}Q((n.lang.rtl===!0?R.value!==!0:R.value)?Math.max(p-A,0):Math.min(0,A-p)),U(j(A/p,0,1)),u.isFirst===!0&&(X.value=!0)}function Ee(u){if(C.value!==!0)return;const p=B.value,A=u.direction===e.side,oe=(n.lang.rtl===!0?A!==!0:A)?j(u.distance.x,0,p):0;if(u.isFinal===!0){Math.abs(oe)<Math.min(75,p)===!0?(s.animate(),U(1),Q(0)):P(),X.value=!1;return}Q(K.value*oe),U(j(1-oe/p,0,1)),u.isFirst===!0&&(X.value=!0)}function ye(){a(!1),ge(!0)}function Y(u,p){s.update(e.side,u,p)}function ht(u,p){u.value!==p&&(u.value=p)}function ze(u,p){Y("size",u===!0?e.miniWidth:p)}return s.instances[e.side]=E,ze(e.miniToOverlay,B.value),Y("space",I.value),Y("offset",D.value),e.showIfAbove===!0&&e.modelValue!==!0&&C.value===!0&&e["onUpdate:modelValue"]!==void 0&&i("update:modelValue",!0),ae(()=>{i("onLayout",I.value),i("miniState",O.value),z=e.showIfAbove===!0;const u=()=>{(C.value===!0?w:q)(!1,!0)};if(s.totalWidth.value!==0){de(u);return}h=k(s.totalWidth,()=>{h(),h=void 0,C.value===!1&&e.showIfAbove===!0&&g.value===!1?x(!1):u()})}),Z(()=>{h!==void 0&&h(),S!==null&&(clearTimeout(S),S=null),C.value===!0&&ye(),s.instances[e.side]===E&&(s.instances[e.side]=void 0,Y("size",0),Y("offset",0),Y("space",!1))}),()=>{const u=[];g.value===!0&&(e.noSwipeOpen===!1&&u.push(ie(y("div",{key:"open",class:`q-drawer__opener fixed-${e.side}`,"aria-hidden":"true"}),st.value)),u.push(Qe("div",{ref:"backdrop",class:me.value,style:lt.value,"aria-hidden":"true",onClick:P},void 0,"backdrop",e.noSwipeBackdrop!==!0&&C.value===!0,()=>dt.value)));const p=O.value===!0&&l.mini!==void 0,A=[y("div",{...o,key:""+p,class:[ot.value,o.class]},p===!0?l.mini():ee(l.default))];return e.elevated===!0&&C.value===!0&&A.push(y("div",{class:"q-layout__shadow absolute-full overflow-hidden no-pointer-events"})),u.push(Qe("aside",{ref:"content",class:ut.value,style:rt.value},A,"contentclose",e.noSwipeClose!==!0&&g.value===!0,()=>ct.value)),y("div",{class:"q-drawer-container"},u)}}}),dn=H({name:"QPageContainer",setup(e,{slots:l}){const{proxy:{$q:i}}=N(),o=$e(fe,F);if(o===F)return console.error("QPageContainer needs to be child of QLayout"),F;Je(qt,!0);const t=c(()=>{const n={};return o.header.space===!0&&(n.paddingTop=`${o.header.size}px`),o.right.space===!0&&(n[`padding${i.lang.rtl===!0?"Left":"Right"}`]=`${o.right.size}px`),o.footer.space===!0&&(n.paddingBottom=`${o.footer.size}px`),o.left.space===!0&&(n[`padding${i.lang.rtl===!0?"Right":"Left"}`]=`${o.left.size}px`),n});return()=>y("div",{class:"q-page-container",style:t.value},ee(l.default))}}),fn=H({name:"QLayout",props:{container:Boolean,view:{type:String,default:"hhh lpr fff",validator:e=>/^(h|l)h(h|r) lpr (f|l)f(f|r)$/.test(e.toLowerCase())},onScroll:Function,onScrollHeight:Function,onResize:Function},setup(e,{slots:l,emit:i}){const{proxy:{$q:o}}=N(),t=_(null),n=_(o.screen.height),r=_(e.container===!0?0:o.screen.width),a=_({position:0,direction:"down",inflectionPoint:0}),v=_(0),d=_(Ye.value===!0?0:_e()),s=c(()=>"q-layout q-layout--"+(e.container===!0?"containerized":"standard")),z=c(()=>e.container===!1?{minHeight:o.screen.height+"px"}:null),S=c(()=>d.value!==0?{[o.lang.rtl===!0?"left":"right"]:`${d.value}px`}:null),h=c(()=>d.value!==0?{[o.lang.rtl===!0?"right":"left"]:0,[o.lang.rtl===!0?"left":"right"]:`-${d.value}px`,width:`calc(100% + ${d.value}px)`}:null);function g(q){if(e.container===!0||document.qScrollPrevented!==!0){const x={position:q.position.top,direction:q.direction,directionChanged:q.directionChanged,inflectionPoint:q.inflectionPoint.top,delta:q.delta.top};a.value=x,e.onScroll!==void 0&&i("scroll",x)}}function O(q){const{height:x,width:P}=q;let $=!1;n.value!==x&&($=!0,n.value=x,e.onScrollHeight!==void 0&&i("scrollHeight",x),C()),r.value!==P&&($=!0,r.value=P),$===!0&&e.onResize!==void 0&&i("resize",q)}function B({height:q}){v.value!==q&&(v.value=q,C())}function C(){if(e.container===!0){const q=n.value>v.value?_e():0;d.value!==q&&(d.value=q)}}let m=null;const w={instances:{},view:c(()=>e.view),isContainer:c(()=>e.container),rootRef:t,height:n,containerHeight:v,scrollbarWidth:d,totalWidth:c(()=>r.value+d.value),rows:c(()=>{const q=e.view.toLowerCase().split(" ");return{top:q[0].split(""),middle:q[1].split(""),bottom:q[2].split("")}}),header:se({size:0,offset:0,space:!1}),right:se({size:300,offset:0,space:!1}),footer:se({size:0,offset:0,space:!1}),left:se({size:300,offset:0,space:!1}),scroll:a,animate(){m!==null?clearTimeout(m):document.body.classList.add("q-body--layout-animate"),m=setTimeout(()=>{m=null,document.body.classList.remove("q-body--layout-animate")},155)},update(q,x,P){w[q][x]=P}};if(Je(fe,w),_e()>0){let q=function(){$=null,W.classList.remove("hide-scrollbar")},x=function(){if($===null){if(W.scrollHeight>o.screen.height)return;W.classList.add("hide-scrollbar")}else clearTimeout($);$=setTimeout(q,300)},P=function(E){$!==null&&E==="remove"&&(clearTimeout($),q()),window[`${E}EventListener`]("resize",x)},$=null;const W=document.body;k(()=>e.container!==!0?"add":"remove",P),e.container!==!0&&P("add"),pt(()=>{P("remove")})}return()=>{const q=et(l.default,[y(nt,{onScroll:g}),y(re,{onResize:O})]),x=y("div",{class:s.value,style:z.value,ref:e.container===!0?void 0:t,tabindex:-1},q);return e.container===!0?y("div",{class:"q-layout-container overflow-hidden",ref:t},[y(re,{onResize:B}),y("div",{class:"absolute-full",style:S.value},[y("div",{class:"scroll",style:h.value},[x])])]):x}}}),vn={setup(){const e=_(!1),l=Tt(),i=_t(),o=c(()=>l.meta.title||"Menu");return{drawer:e,pageTitle:o,goToPage:n=>{i.push(n),e.value=!1}}}},hn={class:"q-pa-md"},mn={class:"absolute-bottom bg-transparent"};function bn(e,l,i,o,t,n){const r=kt("router-view");return pe(),Bt("div",hn,[L(fn,{view:"lHh Lpr lff",style:{"min-height":"100vh"},class:"shadow-2 rounded-borders"},{default:M(()=>[L(Jt,{elevated:"",class:"barra"},{default:M(()=>[L(Yt,null,{default:M(()=>[L(Ut,null,{default:M(()=>[Ce(xt(o.pageTitle),1)]),_:1}),L(At,{flat:"",onClick:l[0]||(l[0]=a=>o.drawer=!o.drawer),round:"",dense:"",icon:"menu"})]),_:1})]),_:1}),L(cn,{modelValue:o.drawer,"onUpdate:modelValue":l[3]||(l[3]=a=>o.drawer=a),"show-if-above":"",width:200,breakpoint:400,behavior:"mobile"},{default:M(()=>[L(un,{style:{height:"calc(100% - 150px)","margin-top":"150px","border-right":"1px solid #ddd"}},{default:M(()=>[L(en,{padding:""},{default:M(()=>[ie((pe(),He(Ve,{clickable:"",onClick:l[1]||(l[1]=a=>o.goToPage("/"))},{default:M(()=>[L(ce,{avatar:""},{default:M(()=>l[4]||(l[4]=[J("span",{class:"material-icons md-50"}," face ",-1)])),_:1}),L(ce,null,{default:M(()=>l[5]||(l[5]=[Ce("Sobre")])),_:1})]),_:1})),[[Re]]),ie((pe(),He(Ve,{clickable:"",onClick:l[2]||(l[2]=a=>o.goToPage("/projetos"))},{default:M(()=>[L(ce,{avatar:""},{default:M(()=>l[6]||(l[6]=[J("span",{class:"material-icons md-50"}," list ",-1)])),_:1}),L(ce,null,{default:M(()=>l[7]||(l[7]=[Ce("Projetos")])),_:1})]),_:1})),[[Re]])]),_:1})]),_:1}),L(Xt,{class:"absolute-top",src:"https://images8.alphacoders.com/137/thumb-1920-1377841.png",style:{height:"150px"}},{default:M(()=>[J("div",mn,[L(sn,{size:"56px",class:"q-mb-sm"},{default:M(()=>l[8]||(l[8]=[J("img",{src:"https://avatars.githubusercontent.com/u/23459929?v=4"},null,-1)])),_:1}),l[9]||(l[9]=J("div",{class:"text-weight-bold"},"Emanuel Angelo",-1)),l[10]||(l[10]=J("div",null,"@devemanuelangelo",-1))])]),_:1})]),_:1},8,["modelValue"]),L(dn,null,{default:M(()=>[L(Ht,{padding:""},{default:M(()=>[L(r)]),_:1})]),_:1})]),_:1})])}const qn=Ct(vn,[["render",bn],["__file","BasePrincipal.vue"]]);export{qn as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
