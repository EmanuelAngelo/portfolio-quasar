import{h as v,m as ue,a as o,c as F,g as I,a2 as me,p as he,k as H,u as ye,A as be,y as ie,z as ke,r as U,s as _,x as pe,b as xe,l as qe,X as $e,e as W,f as O,j as Se,F as Ee}from"./index-BG_GJT5J.js";function le(e,t){return e!==void 0&&e()||t}function nt(e,t){if(e!==void 0){const a=e();if(a!=null)return a.slice()}return t}function K(e,t){return e!==void 0?t.concat(e()):t}function at(e,t){return e===void 0?t:t!==void 0?t.concat(e()):e()}function rt(e,t,a,n,l,d){t.key=n+l;const s=v(e,t,a);return l===!0?ue(s,d()):s}const V={xs:18,sm:24,md:32,lg:38,xl:46},se={size:String};function oe(e,t=V){return o(()=>e.size!==void 0?{fontSize:e.size in t?`${t[e.size]}px`:e.size}:null)}const X="0 0 24 24",Y=e=>e,N=e=>`ionicons ${e}`,ce={"mdi-":e=>`mdi ${e}`,"icon-":Y,"bt-":e=>`bt ${e}`,"eva-":e=>`eva ${e}`,"ion-md":N,"ion-ios":N,"ion-logo":N,"iconfont ":Y,"ti-":e=>`themify-icon ${e}`,"bi-":e=>`bootstrap-icons ${e}`},de={o_:"-outlined",r_:"-round",s_:"-sharp"},fe={sym_o_:"-outlined",sym_r_:"-rounded",sym_s_:"-sharp"},Ce=new RegExp("^("+Object.keys(ce).join("|")+")"),Re=new RegExp("^("+Object.keys(de).join("|")+")"),G=new RegExp("^("+Object.keys(fe).join("|")+")"),we=/^[Mm]\s?[-+]?\.?\d/,Be=/^img:/,Le=/^svguse:/,Pe=/^ion-/,_e=/^(fa-(classic|sharp|solid|regular|light|brands|duotone|thin)|[lf]a[srlbdk]?) /,J=F({name:"QIcon",props:{...se,tag:{type:String,default:"i"},name:String,color:String,left:Boolean,right:Boolean},setup(e,{slots:t}){const{proxy:{$q:a}}=I(),n=oe(e),l=o(()=>"q-icon"+(e.left===!0?" on-left":"")+(e.right===!0?" on-right":"")+(e.color!==void 0?` text-${e.color}`:"")),d=o(()=>{let s,r=e.name;if(r==="none"||!r)return{none:!0};if(a.iconMapFn!==null){const c=a.iconMapFn(r);if(c!==void 0)if(c.icon!==void 0){if(r=c.icon,r==="none"||!r)return{none:!0}}else return{cls:c.cls,content:c.content!==void 0?c.content:" "}}if(we.test(r)===!0){const[c,b=X]=r.split("|");return{svg:!0,viewBox:b,nodes:c.split("&&").map(i=>{const[p,h,x]=i.split("@@");return v("path",{style:h,d:p,transform:x})})}}if(Be.test(r)===!0)return{img:!0,src:r.substring(4)};if(Le.test(r)===!0){const[c,b=X]=r.split("|");return{svguse:!0,src:c.substring(7),viewBox:b}}let k=" ";const y=r.match(Ce);if(y!==null)s=ce[y[1]](r);else if(_e.test(r)===!0)s=r;else if(Pe.test(r)===!0)s=`ionicons ion-${a.platform.is.ios===!0?"ios":"md"}${r.substring(3)}`;else if(G.test(r)===!0){s="notranslate material-symbols";const c=r.match(G);c!==null&&(r=r.substring(6),s+=fe[c[1]]),k=r}else{s="notranslate material-icons";const c=r.match(Re);c!==null&&(r=r.substring(2),s+=de[c[1]]),k=r}return{cls:s,content:k}});return()=>{const s={class:l.value,style:n.value,"aria-hidden":"true",role:"presentation"};return d.value.none===!0?v(e.tag,s,le(t.default)):d.value.img===!0?v(e.tag,s,K(t.default,[v("img",{src:d.value.src})])):d.value.svg===!0?v(e.tag,s,K(t.default,[v("svg",{viewBox:d.value.viewBox||"0 0 24 24"},d.value.nodes)])):d.value.svguse===!0?v(e.tag,s,K(t.default,[v("svg",{viewBox:d.value.viewBox},[v("use",{"xlink:href":d.value.src})])])):(d.value.cls!==void 0&&(s.class+=" "+d.value.cls),v(e.tag,s,K(t.default,[d.value.content])))}}}),Oe={size:{type:[String,Number],default:"1em"},color:String};function Te(e){return{cSize:o(()=>e.size in V?`${V[e.size]}px`:e.size),classes:o(()=>"q-spinner"+(e.color?` text-${e.color}`:""))}}const je=F({name:"QSpinner",props:{...Oe,thickness:{type:Number,default:5}},setup(e){const{cSize:t,classes:a}=Te(e);return()=>v("svg",{class:a.value+" q-spinner-mat",width:t.value,height:t.value,viewBox:"25 25 50 50"},[v("circle",{class:"path",cx:"50",cy:"50",r:"20",fill:"none",stroke:"currentColor","stroke-width":e.thickness,"stroke-miterlimit":"10"})])}});function Ae(e,t){const a=e.style;for(const n in t)a[n]=t[n]}function ut(e){if(e==null)return;if(typeof e=="string")try{return document.querySelector(e)||void 0}catch{return}const t=me(e);if(t)return t.$el||t}function it(e,t){if(e==null||e.contains(t)===!0)return!0;for(let a=e.nextElementSibling;a!==null;a=a.nextElementSibling)if(a.contains(t))return!0;return!1}function Me(e,t=250){let a=!1,n;return function(){return a===!1&&(a=!0,setTimeout(()=>{a=!1},t),n=e.apply(this,arguments)),n}}function Z(e,t,a,n){a.modifiers.stop===!0&&ie(e);const l=a.modifiers.color;let d=a.modifiers.center;d=d===!0||n===!0;const s=document.createElement("span"),r=document.createElement("span"),k=ke(e),{left:y,top:c,width:b,height:i}=t.getBoundingClientRect(),p=Math.sqrt(b*b+i*i),h=p/2,x=`${(b-p)/2}px`,f=d?x:`${k.left-y-h}px`,q=`${(i-p)/2}px`,P=d?q:`${k.top-c-h}px`;r.className="q-ripple__inner",Ae(r,{height:`${p}px`,width:`${p}px`,transform:`translate3d(${f},${P},0) scale3d(.2,.2,1)`,opacity:0}),s.className=`q-ripple${l?" text-"+l:""}`,s.setAttribute("dir","ltr"),s.appendChild(r),t.appendChild(s);const B=()=>{s.remove(),clearTimeout(L)};a.abort.push(B);let L=setTimeout(()=>{r.classList.add("q-ripple__inner--enter"),r.style.transform=`translate3d(${x},${q},0) scale3d(1,1,1)`,r.style.opacity=.2,L=setTimeout(()=>{r.classList.remove("q-ripple__inner--enter"),r.classList.add("q-ripple__inner--leave"),r.style.opacity=0,L=setTimeout(()=>{s.remove(),a.abort.splice(a.abort.indexOf(B),1)},275)},250)},50)}function ee(e,{modifiers:t,value:a,arg:n}){const l=Object.assign({},e.cfg.ripple,t,a);e.modifiers={early:l.early===!0,stop:l.stop===!0,center:l.center===!0,color:l.color||n,keyCodes:[].concat(l.keyCodes||13)}}const ze=he({name:"ripple",beforeMount(e,t){const a=t.instance.$.appContext.config.globalProperties.$q.config||{};if(a.ripple===!1)return;const n={cfg:a,enabled:t.value!==!1,modifiers:{},abort:[],start(l){n.enabled===!0&&l.qSkipRipple!==!0&&l.type===(n.modifiers.early===!0?"pointerdown":"click")&&Z(l,e,n,l.qKeyEvent===!0)},keystart:Me(l=>{n.enabled===!0&&l.qSkipRipple!==!0&&H(l,n.modifiers.keyCodes)===!0&&l.type===`key${n.modifiers.early===!0?"down":"up"}`&&Z(l,e,n,!0)},300)};ee(n,t),e.__qripple=n,ye(n,"main",[[e,"pointerdown","start","passive"],[e,"click","start","passive"],[e,"keydown","keystart","passive"],[e,"keyup","keystart","passive"]])},updated(e,t){if(t.oldValue!==t.value){const a=e.__qripple;a!==void 0&&(a.enabled=t.value!==!1,a.enabled===!0&&Object(t.value)===t.value&&ee(a,t))}},beforeUnmount(e){const t=e.__qripple;t!==void 0&&(t.abort.forEach(a=>{a()}),be(t,"main"),delete e._qripple)}}),ve={left:"start",center:"center",right:"end",between:"between",around:"around",evenly:"evenly",stretch:"stretch"},Ke=Object.keys(ve),Qe={align:{type:String,validator:e=>Ke.includes(e)}};function De(e){return o(()=>{const t=e.align===void 0?e.vertical===!0?"stretch":"left":e.align;return`${e.vertical===!0?"items":"justify"}-${ve[t]}`})}function lt(e){if(Object(e.$parent)===e.$parent)return e.$parent;let{parent:t}=e.$;for(;Object(t)===t;){if(Object(t.proxy)===t.proxy)return t.proxy;t=t.parent}}function Fe(e){return e.appContext.config.globalProperties.$router!==void 0}function st(e){return e.isUnmounted===!0||e.isDeactivated===!0}function te(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}function ne(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function Ie(e,t){for(const a in t){const n=t[a],l=e[a];if(typeof n=="string"){if(n!==l)return!1}else if(Array.isArray(l)===!1||l.length!==n.length||n.some((d,s)=>d!==l[s]))return!1}return!0}function ae(e,t){return Array.isArray(t)===!0?e.length===t.length&&e.every((a,n)=>a===t[n]):e.length===1&&e[0]===t}function Ne(e,t){return Array.isArray(e)===!0?ae(e,t):Array.isArray(t)===!0?ae(t,e):e===t}function He(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e)if(Ne(e[a],t[a])===!1)return!1;return!0}const ge={to:[String,Object],replace:Boolean,href:String,target:String,disable:Boolean},ot={...ge,exact:Boolean,activeClass:{type:String,default:"q-router-link--active"},exactActiveClass:{type:String,default:"q-router-link--exact-active"}};function Ve({fallbackTag:e,useDisableForRouterLinkProps:t=!0}={}){const a=I(),{props:n,proxy:l,emit:d}=a,s=Fe(a),r=o(()=>n.disable!==!0&&n.href!==void 0),k=t===!0?o(()=>s===!0&&n.disable!==!0&&r.value!==!0&&n.to!==void 0&&n.to!==null&&n.to!==""):o(()=>s===!0&&r.value!==!0&&n.to!==void 0&&n.to!==null&&n.to!==""),y=o(()=>k.value===!0?P(n.to):null),c=o(()=>y.value!==null),b=o(()=>r.value===!0||c.value===!0),i=o(()=>n.type==="a"||b.value===!0?"a":n.tag||e||"div"),p=o(()=>r.value===!0?{href:n.href,target:n.target}:c.value===!0?{href:y.value.href,target:n.target}:{}),h=o(()=>{if(c.value===!1)return-1;const{matched:g}=y.value,{length:$}=g,E=g[$-1];if(E===void 0)return-1;const R=l.$route.matched;if(R.length===0)return-1;const w=R.findIndex(ne.bind(null,E));if(w!==-1)return w;const Q=te(g[$-2]);return $>1&&te(E)===Q&&R[R.length-1].path!==Q?R.findIndex(ne.bind(null,g[$-2])):w}),x=o(()=>c.value===!0&&h.value!==-1&&Ie(l.$route.params,y.value.params)),f=o(()=>x.value===!0&&h.value===l.$route.matched.length-1&&He(l.$route.params,y.value.params)),q=o(()=>c.value===!0?f.value===!0?` ${n.exactActiveClass} ${n.activeClass}`:n.exact===!0?"":x.value===!0?` ${n.activeClass}`:"":"");function P(g){try{return l.$router.resolve(g)}catch{}return null}function B(g,{returnRouterError:$,to:E=n.to,replace:R=n.replace}={}){if(n.disable===!0)return g.preventDefault(),Promise.resolve(!1);if(g.metaKey||g.altKey||g.ctrlKey||g.shiftKey||g.button!==void 0&&g.button!==0||n.target==="_blank")return Promise.resolve(!1);g.preventDefault();const w=l.$router[R===!0?"replace":"push"](E);return $===!0?w:w.then(()=>{}).catch(()=>{})}function L(g){if(c.value===!0){const $=E=>B(g,E);d("click",g,$),g.defaultPrevented!==!0&&$()}else d("click",g)}return{hasRouterLink:c,hasHrefLink:r,hasLink:b,linkTag:i,resolvedLink:y,linkIsActive:x,linkIsExactActive:f,linkClass:q,linkAttrs:p,getLink:P,navigateToRouterLink:B,navigateOnClick:L}}const re={none:0,xs:4,sm:8,md:16,lg:24,xl:32},Ue={xs:8,sm:10,md:14,lg:20,xl:24},We=["button","submit","reset"],Xe=/[^\s]\/[^\s]/,Ye=["flat","outline","push","unelevated"];function Ge(e,t){return e.flat===!0?"flat":e.outline===!0?"outline":e.push===!0?"push":e.unelevated===!0?"unelevated":t}const Je={...se,...ge,type:{type:String,default:"button"},label:[Number,String],icon:String,iconRight:String,...Ye.reduce((e,t)=>(e[t]=Boolean)&&e,{}),square:Boolean,rounded:Boolean,glossy:Boolean,size:String,fab:Boolean,fabMini:Boolean,padding:String,color:String,textColor:String,noCaps:Boolean,noWrap:Boolean,dense:Boolean,tabindex:[Number,String],ripple:{type:[Boolean,Object],default:!0},align:{...Qe.align,default:"center"},stack:Boolean,stretch:Boolean,loading:{type:Boolean,default:null},disable:Boolean},Ze={...Je,round:Boolean};function et(e){const t=oe(e,Ue),a=De(e),{hasRouterLink:n,hasLink:l,linkTag:d,linkAttrs:s,navigateOnClick:r}=Ve({fallbackTag:"button"}),k=o(()=>{const f=e.fab===!1&&e.fabMini===!1?t.value:{};return e.padding!==void 0?Object.assign({},f,{padding:e.padding.split(/\s+/).map(q=>q in re?re[q]+"px":q).join(" "),minWidth:"0",minHeight:"0"}):f}),y=o(()=>e.rounded===!0||e.fab===!0||e.fabMini===!0),c=o(()=>e.disable!==!0&&e.loading!==!0),b=o(()=>c.value===!0?e.tabindex||0:-1),i=o(()=>Ge(e,"standard")),p=o(()=>{const f={tabindex:b.value};return l.value===!0?Object.assign(f,s.value):We.includes(e.type)===!0&&(f.type=e.type),d.value==="a"?(e.disable===!0?f["aria-disabled"]="true":f.href===void 0&&(f.role="button"),n.value!==!0&&Xe.test(e.type)===!0&&(f.type=e.type)):e.disable===!0&&(f.disabled="",f["aria-disabled"]="true"),e.loading===!0&&e.percentage!==void 0&&Object.assign(f,{role:"progressbar","aria-valuemin":0,"aria-valuemax":100,"aria-valuenow":e.percentage}),f}),h=o(()=>{let f;e.color!==void 0?e.flat===!0||e.outline===!0?f=`text-${e.textColor||e.color}`:f=`bg-${e.color} text-${e.textColor||"white"}`:e.textColor&&(f=`text-${e.textColor}`);const q=e.round===!0?"round":`rectangle${y.value===!0?" q-btn--rounded":e.square===!0?" q-btn--square":""}`;return`q-btn--${i.value} q-btn--${q}`+(f!==void 0?" "+f:"")+(c.value===!0?" q-btn--actionable q-focusable q-hoverable":e.disable===!0?" disabled":"")+(e.fab===!0?" q-btn--fab":e.fabMini===!0?" q-btn--fab-mini":"")+(e.noCaps===!0?" q-btn--no-uppercase":"")+(e.dense===!0?" q-btn--dense":"")+(e.stretch===!0?" no-border-radius self-stretch":"")+(e.glossy===!0?" glossy":"")+(e.square?" q-btn--square":"")}),x=o(()=>a.value+(e.stack===!0?" column":" row")+(e.noWrap===!0?" no-wrap text-no-wrap":"")+(e.loading===!0?" q-btn__content--hidden":""));return{classes:h,style:k,innerClasses:x,attributes:p,hasLink:l,linkTag:d,navigateOnClick:r,isActionable:c}}const{passiveCapture:S}=qe;let T=null,j=null,A=null;const ct=F({name:"QBtn",props:{...Ze,percentage:Number,darkPercentage:Boolean,onTouchstart:[Function,Array]},emits:["click","keydown","mousedown","keyup"],setup(e,{slots:t,emit:a}){const{proxy:n}=I(),{classes:l,style:d,innerClasses:s,attributes:r,hasLink:k,linkTag:y,navigateOnClick:c,isActionable:b}=et(e),i=U(null),p=U(null);let h=null,x,f=null;const q=o(()=>e.label!==void 0&&e.label!==null&&e.label!==""),P=o(()=>e.disable===!0||e.ripple===!1?!1:{keyCodes:k.value===!0?[13,32]:[13],...e.ripple===!0?{}:e.ripple}),B=o(()=>({center:e.round})),L=o(()=>{const u=Math.max(0,Math.min(100,e.percentage));return u>0?{transition:"transform 0.6s",transform:`translateX(${u-100}%)`}:{}}),g=o(()=>{if(e.loading===!0)return{onMousedown:z,onTouchstart:z,onClick:z,onKeydown:z,onKeyup:z};if(b.value===!0){const u={onClick:E,onKeydown:R,onMousedown:Q};if(n.$q.platform.has.touch===!0){const m=e.onTouchstart!==void 0?"":"Passive";u[`onTouchstart${m}`]=w}return u}return{onClick:_}}),$=o(()=>({ref:i,class:"q-btn q-btn-item non-selectable no-outline "+l.value,style:d.value,...r.value,...g.value}));function E(u){if(i.value!==null){if(u!==void 0){if(u.defaultPrevented===!0)return;const m=document.activeElement;if(e.type==="submit"&&m!==document.body&&i.value.contains(m)===!1&&m.contains(i.value)===!1){i.value.focus();const D=()=>{document.removeEventListener("keydown",_,!0),document.removeEventListener("keyup",D,S),i.value!==null&&i.value.removeEventListener("blur",D,S)};document.addEventListener("keydown",_,!0),document.addEventListener("keyup",D,S),i.value.addEventListener("blur",D,S)}}c(u)}}function R(u){i.value!==null&&(a("keydown",u),H(u,[13,32])===!0&&j!==i.value&&(j!==null&&M(),u.defaultPrevented!==!0&&(i.value.focus(),j=i.value,i.value.classList.add("q-btn--active"),document.addEventListener("keyup",C,!0),i.value.addEventListener("blur",C,S)),_(u)))}function w(u){i.value!==null&&(a("touchstart",u),u.defaultPrevented!==!0&&(T!==i.value&&(T!==null&&M(),T=i.value,h=u.target,h.addEventListener("touchcancel",C,S),h.addEventListener("touchend",C,S)),x=!0,f!==null&&clearTimeout(f),f=setTimeout(()=>{f=null,x=!1},200)))}function Q(u){i.value!==null&&(u.qSkipRipple=x===!0,a("mousedown",u),u.defaultPrevented!==!0&&A!==i.value&&(A!==null&&M(),A=i.value,i.value.classList.add("q-btn--active"),document.addEventListener("mouseup",C,S)))}function C(u){if(i.value!==null&&!(u!==void 0&&u.type==="blur"&&document.activeElement===i.value)){if(u!==void 0&&u.type==="keyup"){if(j===i.value&&H(u,[13,32])===!0){const m=new MouseEvent("click",u);m.qKeyEvent=!0,u.defaultPrevented===!0&&pe(m),u.cancelBubble===!0&&ie(m),i.value.dispatchEvent(m),_(u),u.qKeyEvent=!0}a("keyup",u)}M()}}function M(u){const m=p.value;u!==!0&&(T===i.value||A===i.value)&&m!==null&&m!==document.activeElement&&(m.setAttribute("tabindex",-1),m.focus()),T===i.value&&(h!==null&&(h.removeEventListener("touchcancel",C,S),h.removeEventListener("touchend",C,S)),T=h=null),A===i.value&&(document.removeEventListener("mouseup",C,S),A=null),j===i.value&&(document.removeEventListener("keyup",C,!0),i.value!==null&&i.value.removeEventListener("blur",C,S),j=null),i.value!==null&&i.value.classList.remove("q-btn--active")}function z(u){_(u),u.qSkipRipple=!0}return xe(()=>{M(!0)}),Object.assign(n,{click:u=>{b.value===!0&&E(u)}}),()=>{let u=[];e.icon!==void 0&&u.push(v(J,{name:e.icon,left:e.stack!==!0&&q.value===!0,role:"img"})),q.value===!0&&u.push(v("span",{class:"block"},[e.label])),u=K(t.default,u),e.iconRight!==void 0&&e.round===!1&&u.push(v(J,{name:e.iconRight,right:e.stack!==!0&&q.value===!0,role:"img"}));const m=[v("span",{class:"q-focus-helper",ref:p})];return e.loading===!0&&e.percentage!==void 0&&m.push(v("span",{class:"q-btn__progress absolute-full overflow-hidden"+(e.darkPercentage===!0?" q-btn__progress--dark":"")},[v("span",{class:"q-btn__progress-indicator fit block",style:L.value})])),m.push(v("span",{class:"q-btn__content text-center col items-center q-anchor--skip "+s.value},u)),e.loading!==null&&m.push(v($e,{name:"q-transition--fade"},()=>e.loading===!0?[v("span",{key:"loading",class:"absolute-full flex flex-center"},t.loading!==void 0?t.loading():[v(je)])]:null)),ue(v(y.value,$.value,m),[[ze,P.value,void 0,B.value]])}}}),dt={dark:{type:Boolean,default:null}};function ft(e,t){return o(()=>e.dark===null?t.dark.isActive:e.dark)}const vt=F({name:"QPage",props:{padding:Boolean,styleFn:Function},setup(e,{slots:t}){const{proxy:{$q:a}}=I(),n=W(Se,O);if(n===O)return console.error("QPage needs to be a deep child of QLayout"),O;if(W(Ee,O)===O)return console.error("QPage needs to be child of QPageContainer"),O;const d=o(()=>{const r=(n.header.space===!0?n.header.size:0)+(n.footer.space===!0?n.footer.size:0);if(typeof e.styleFn=="function"){const k=n.isContainer.value===!0?n.containerHeight.value:a.screen.height;return e.styleFn(r,k)}return{minHeight:n.isContainer.value===!0?n.containerHeight.value-r+"px":a.screen.height===0?r!==0?`calc(100vh - ${r}px)`:"100vh":a.screen.height-r+"px"}}),s=o(()=>`q-page${e.padding===!0?" q-layout-padding":""}`);return()=>v("main",{class:s.value,style:d.value},le(t.default))}});export{J as Q,ze as R,nt as a,ot as b,ft as c,Ve as d,K as e,se as f,oe as g,le as h,at as i,rt as j,ct as k,vt as l,lt as m,it as n,Ae as o,ut as p,je as q,Fe as r,Qe as s,De as t,dt as u,st as v};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
