const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/BasePrincipal-CRuvtiRK.js","assets/QPage-DNhbTL6L.js","assets/use-prevent-scroll-H_Vcrlwp.js","assets/format-C_kfbgOa.js","assets/BasePrincipal-4EWa6QLW.css","assets/SobreMim-Cvj9WaRt.js","assets/QCardActions-HGNTAPwE.js","assets/SobreMim-DpN7_NnZ.css","assets/MeusProjetos-DXt3MNV7.js","assets/MeusProjetos-DK5dCbnG.css"])))=>i.map(i=>d[i]);
/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function Br(e){const t=Object.create(null);for(const n of e.split(","))t[n]=1;return n=>n in t}const re={},Nt=[],Ge=()=>{},bl=()=>!1,Vn=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),Ur=e=>e.startsWith("onUpdate:"),fe=Object.assign,Kr=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},vl=Object.prototype.hasOwnProperty,X=(e,t)=>vl.call(e,t),j=Array.isArray,Dt=e=>Bn(e)==="[object Map]",Ri=e=>Bn(e)==="[object Set]",B=e=>typeof e=="function",ce=e=>typeof e=="string",mt=e=>typeof e=="symbol",oe=e=>e!==null&&typeof e=="object",Pi=e=>(oe(e)||B(e))&&B(e.then)&&B(e.catch),Ti=Object.prototype.toString,Bn=e=>Ti.call(e),wl=e=>Bn(e).slice(8,-1),Ai=e=>Bn(e)==="[object Object]",Wr=e=>ce(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Yt=Br(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Un=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},El=/-(\w)/g,ke=Un(e=>e.replace(El,(t,n)=>n?n.toUpperCase():"")),xl=/\B([A-Z])/g,At=Un(e=>e.replace(xl,"-$1").toLowerCase()),Kn=Un(e=>e.charAt(0).toUpperCase()+e.slice(1)),rr=Un(e=>e?`on${Kn(e)}`:""),ht=(e,t)=>!Object.is(e,t),sr=(e,...t)=>{for(let n=0;n<e.length;n++)e[n](...t)},In=(e,t,n,r=!1)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:r,value:n})},Sl=e=>{const t=parseFloat(e);return isNaN(t)?e:t},Cl=e=>{const t=ce(e)?Number(e):NaN;return isNaN(t)?e:t};let ps;const Wn=()=>ps||(ps=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function qr(e){if(j(e)){const t={};for(let n=0;n<e.length;n++){const r=e[n],s=ce(r)?Al(r):qr(r);if(s)for(const i in s)t[i]=s[i]}return t}else if(ce(e)||oe(e))return e}const Rl=/;(?![^(]*\))/g,Pl=/:([^]+)/,Tl=/\/\*[^]*?\*\//g;function Al(e){const t={};return e.replace(Tl,"").split(Rl).forEach(n=>{if(n){const r=n.split(Pl);r.length>1&&(t[r[0].trim()]=r[1].trim())}}),t}function zr(e){let t="";if(ce(e))t=e;else if(j(e))for(let n=0;n<e.length;n++){const r=zr(e[n]);r&&(t+=r+" ")}else if(oe(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}const Ol="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Ll=Br(Ol);function Oi(e){return!!e||e===""}const Li=e=>!!(e&&e.__v_isRef===!0),Il=e=>ce(e)?e:e==null?"":j(e)||oe(e)&&(e.toString===Ti||!B(e.toString))?Li(e)?Il(e.value):JSON.stringify(e,Ii,2):String(e),Ii=(e,t)=>Li(t)?Ii(e,t.value):Dt(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((n,[r,s],i)=>(n[ir(r,i)+" =>"]=s,n),{})}:Ri(t)?{[`Set(${t.size})`]:[...t.values()].map(n=>ir(n))}:mt(t)?ir(t):oe(t)&&!j(t)&&!Ai(t)?String(t):t,ir=(e,t="")=>{var n;return mt(e)?`Symbol(${(n=e.description)!=null?n:t})`:e};/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Pe;class Ml{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=Pe,!t&&Pe&&(this.index=(Pe.scopes||(Pe.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let t,n;if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].pause();for(t=0,n=this.effects.length;t<n;t++)this.effects[t].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let t,n;if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].resume();for(t=0,n=this.effects.length;t<n;t++)this.effects[t].resume()}}run(t){if(this._active){const n=Pe;try{return Pe=this,t()}finally{Pe=n}}}on(){Pe=this}off(){Pe=this.parent}stop(t){if(this._active){this._active=!1;let n,r;for(n=0,r=this.effects.length;n<r;n++)this.effects[n].stop();for(this.effects.length=0,n=0,r=this.cleanups.length;n<r;n++)this.cleanups[n]();if(this.cleanups.length=0,this.scopes){for(n=0,r=this.scopes.length;n<r;n++)this.scopes[n].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!t){const s=this.parent.scopes.pop();s&&s!==this&&(this.parent.scopes[this.index]=s,s.index=this.index)}this.parent=void 0}}}function kl(){return Pe}let ie;const or=new WeakSet;class Mi{constructor(t){this.fn=t,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,Pe&&Pe.active&&Pe.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,or.has(this)&&(or.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||Ni(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,gs(this),Di(this);const t=ie,n=Fe;ie=this,Fe=!0;try{return this.fn()}finally{Fi(this),ie=t,Fe=n,this.flags&=-3}}stop(){if(this.flags&1){for(let t=this.deps;t;t=t.nextDep)Jr(t);this.deps=this.depsTail=void 0,gs(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?or.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){wr(this)&&this.run()}get dirty(){return wr(this)}}let ki=0,Xt,Zt;function Ni(e,t=!1){if(e.flags|=8,t){e.next=Zt,Zt=e;return}e.next=Xt,Xt=e}function Gr(){ki++}function Qr(){if(--ki>0)return;if(Zt){let t=Zt;for(Zt=void 0;t;){const n=t.next;t.next=void 0,t.flags&=-9,t=n}}let e;for(;Xt;){let t=Xt;for(Xt=void 0;t;){const n=t.next;if(t.next=void 0,t.flags&=-9,t.flags&1)try{t.trigger()}catch(r){e||(e=r)}t=n}}if(e)throw e}function Di(e){for(let t=e.deps;t;t=t.nextDep)t.version=-1,t.prevActiveLink=t.dep.activeLink,t.dep.activeLink=t}function Fi(e){let t,n=e.depsTail,r=n;for(;r;){const s=r.prevDep;r.version===-1?(r===n&&(n=s),Jr(r),Nl(r)):t=r,r.dep.activeLink=r.prevActiveLink,r.prevActiveLink=void 0,r=s}e.deps=t,e.depsTail=n}function wr(e){for(let t=e.deps;t;t=t.nextDep)if(t.dep.version!==t.version||t.dep.computed&&($i(t.dep.computed)||t.dep.version!==t.version))return!0;return!!e._dirty}function $i(e){if(e.flags&4&&!(e.flags&16)||(e.flags&=-17,e.globalVersion===cn))return;e.globalVersion=cn;const t=e.dep;if(e.flags|=2,t.version>0&&!e.isSSR&&e.deps&&!wr(e)){e.flags&=-3;return}const n=ie,r=Fe;ie=e,Fe=!0;try{Di(e);const s=e.fn(e._value);(t.version===0||ht(s,e._value))&&(e._value=s,t.version++)}catch(s){throw t.version++,s}finally{ie=n,Fe=r,Fi(e),e.flags&=-3}}function Jr(e,t=!1){const{dep:n,prevSub:r,nextSub:s}=e;if(r&&(r.nextSub=s,e.prevSub=void 0),s&&(s.prevSub=r,e.nextSub=void 0),n.subs===e&&(n.subs=r,!r&&n.computed)){n.computed.flags&=-5;for(let i=n.computed.deps;i;i=i.nextDep)Jr(i,!0)}!t&&!--n.sc&&n.map&&n.map.delete(n.key)}function Nl(e){const{prevDep:t,nextDep:n}=e;t&&(t.nextDep=n,e.prevDep=void 0),n&&(n.prevDep=t,e.nextDep=void 0)}let Fe=!0;const Hi=[];function _t(){Hi.push(Fe),Fe=!1}function yt(){const e=Hi.pop();Fe=e===void 0?!0:e}function gs(e){const{cleanup:t}=e;if(e.cleanup=void 0,t){const n=ie;ie=void 0;try{t()}finally{ie=n}}}let cn=0;class Dl{constructor(t,n){this.sub=t,this.dep=n,this.version=n.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class Yr{constructor(t){this.computed=t,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0}track(t){if(!ie||!Fe||ie===this.computed)return;let n=this.activeLink;if(n===void 0||n.sub!==ie)n=this.activeLink=new Dl(ie,this),ie.deps?(n.prevDep=ie.depsTail,ie.depsTail.nextDep=n,ie.depsTail=n):ie.deps=ie.depsTail=n,ji(n);else if(n.version===-1&&(n.version=this.version,n.nextDep)){const r=n.nextDep;r.prevDep=n.prevDep,n.prevDep&&(n.prevDep.nextDep=r),n.prevDep=ie.depsTail,n.nextDep=void 0,ie.depsTail.nextDep=n,ie.depsTail=n,ie.deps===n&&(ie.deps=r)}return n}trigger(t){this.version++,cn++,this.notify(t)}notify(t){Gr();try{for(let n=this.subs;n;n=n.prevSub)n.sub.notify()&&n.sub.dep.notify()}finally{Qr()}}}function ji(e){if(e.dep.sc++,e.sub.flags&4){const t=e.dep.computed;if(t&&!e.dep.subs){t.flags|=20;for(let r=t.deps;r;r=r.nextDep)ji(r)}const n=e.dep.subs;n!==e&&(e.prevSub=n,n&&(n.nextSub=e)),e.dep.subs=e}}const Er=new WeakMap,Rt=Symbol(""),xr=Symbol(""),an=Symbol("");function pe(e,t,n){if(Fe&&ie){let r=Er.get(e);r||Er.set(e,r=new Map);let s=r.get(n);s||(r.set(n,s=new Yr),s.map=r,s.key=n),s.track()}}function nt(e,t,n,r,s,i){const o=Er.get(e);if(!o){cn++;return}const l=c=>{c&&c.trigger()};if(Gr(),t==="clear")o.forEach(l);else{const c=j(e),f=c&&Wr(n);if(c&&n==="length"){const a=Number(r);o.forEach((u,h)=>{(h==="length"||h===an||!mt(h)&&h>=a)&&l(u)})}else switch((n!==void 0||o.has(void 0))&&l(o.get(n)),f&&l(o.get(an)),t){case"add":c?f&&l(o.get("length")):(l(o.get(Rt)),Dt(e)&&l(o.get(xr)));break;case"delete":c||(l(o.get(Rt)),Dt(e)&&l(o.get(xr)));break;case"set":Dt(e)&&l(o.get(Rt));break}}Qr()}function It(e){const t=Q(e);return t===e?t:(pe(t,"iterate",an),Me(e)?t:t.map(ge))}function qn(e){return pe(e=Q(e),"iterate",an),e}const Fl={__proto__:null,[Symbol.iterator](){return lr(this,Symbol.iterator,ge)},concat(...e){return It(this).concat(...e.map(t=>j(t)?It(t):t))},entries(){return lr(this,"entries",e=>(e[1]=ge(e[1]),e))},every(e,t){return Ye(this,"every",e,t,void 0,arguments)},filter(e,t){return Ye(this,"filter",e,t,n=>n.map(ge),arguments)},find(e,t){return Ye(this,"find",e,t,ge,arguments)},findIndex(e,t){return Ye(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return Ye(this,"findLast",e,t,ge,arguments)},findLastIndex(e,t){return Ye(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return Ye(this,"forEach",e,t,void 0,arguments)},includes(...e){return cr(this,"includes",e)},indexOf(...e){return cr(this,"indexOf",e)},join(e){return It(this).join(e)},lastIndexOf(...e){return cr(this,"lastIndexOf",e)},map(e,t){return Ye(this,"map",e,t,void 0,arguments)},pop(){return Wt(this,"pop")},push(...e){return Wt(this,"push",e)},reduce(e,...t){return ms(this,"reduce",e,t)},reduceRight(e,...t){return ms(this,"reduceRight",e,t)},shift(){return Wt(this,"shift")},some(e,t){return Ye(this,"some",e,t,void 0,arguments)},splice(...e){return Wt(this,"splice",e)},toReversed(){return It(this).toReversed()},toSorted(e){return It(this).toSorted(e)},toSpliced(...e){return It(this).toSpliced(...e)},unshift(...e){return Wt(this,"unshift",e)},values(){return lr(this,"values",ge)}};function lr(e,t,n){const r=qn(e),s=r[t]();return r!==e&&!Me(e)&&(s._next=s.next,s.next=()=>{const i=s._next();return i.value&&(i.value=n(i.value)),i}),s}const $l=Array.prototype;function Ye(e,t,n,r,s,i){const o=qn(e),l=o!==e&&!Me(e),c=o[t];if(c!==$l[t]){const u=c.apply(e,i);return l?ge(u):u}let f=n;o!==e&&(l?f=function(u,h){return n.call(this,ge(u),h,e)}:n.length>2&&(f=function(u,h){return n.call(this,u,h,e)}));const a=c.call(o,f,r);return l&&s?s(a):a}function ms(e,t,n,r){const s=qn(e);let i=n;return s!==e&&(Me(e)?n.length>3&&(i=function(o,l,c){return n.call(this,o,l,c,e)}):i=function(o,l,c){return n.call(this,o,ge(l),c,e)}),s[t](i,...r)}function cr(e,t,n){const r=Q(e);pe(r,"iterate",an);const s=r[t](...n);return(s===-1||s===!1)&&es(n[0])?(n[0]=Q(n[0]),r[t](...n)):s}function Wt(e,t,n=[]){_t(),Gr();const r=Q(e)[t].apply(e,n);return Qr(),yt(),r}const Hl=Br("__proto__,__v_isRef,__isVue"),Vi=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(mt));function jl(e){mt(e)||(e=String(e));const t=Q(this);return pe(t,"has",e),t.hasOwnProperty(e)}class Bi{constructor(t=!1,n=!1){this._isReadonly=t,this._isShallow=n}get(t,n,r){if(n==="__v_skip")return t.__v_skip;const s=this._isReadonly,i=this._isShallow;if(n==="__v_isReactive")return!s;if(n==="__v_isReadonly")return s;if(n==="__v_isShallow")return i;if(n==="__v_raw")return r===(s?i?Jl:qi:i?Wi:Ki).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(r)?t:void 0;const o=j(t);if(!s){let c;if(o&&(c=Fl[n]))return c;if(n==="hasOwnProperty")return jl}const l=Reflect.get(t,n,me(t)?t:r);return(mt(n)?Vi.has(n):Hl(n))||(s||pe(t,"get",n),i)?l:me(l)?o&&Wr(n)?l:l.value:oe(l)?s?Gi(l):Ut(l):l}}class Ui extends Bi{constructor(t=!1){super(!1,t)}set(t,n,r,s){let i=t[n];if(!this._isShallow){const c=Pt(i);if(!Me(r)&&!Pt(r)&&(i=Q(i),r=Q(r)),!j(t)&&me(i)&&!me(r))return c?!1:(i.value=r,!0)}const o=j(t)&&Wr(n)?Number(n)<t.length:X(t,n),l=Reflect.set(t,n,r,me(t)?t:s);return t===Q(s)&&(o?ht(r,i)&&nt(t,"set",n,r):nt(t,"add",n,r)),l}deleteProperty(t,n){const r=X(t,n);t[n];const s=Reflect.deleteProperty(t,n);return s&&r&&nt(t,"delete",n,void 0),s}has(t,n){const r=Reflect.has(t,n);return(!mt(n)||!Vi.has(n))&&pe(t,"has",n),r}ownKeys(t){return pe(t,"iterate",j(t)?"length":Rt),Reflect.ownKeys(t)}}class Vl extends Bi{constructor(t=!1){super(!0,t)}set(t,n){return!0}deleteProperty(t,n){return!0}}const Bl=new Ui,Ul=new Vl,Kl=new Ui(!0);const Sr=e=>e,wn=e=>Reflect.getPrototypeOf(e);function Wl(e,t,n){return function(...r){const s=this.__v_raw,i=Q(s),o=Dt(i),l=e==="entries"||e===Symbol.iterator&&o,c=e==="keys"&&o,f=s[e](...r),a=n?Sr:t?Cr:ge;return!t&&pe(i,"iterate",c?xr:Rt),{next(){const{value:u,done:h}=f.next();return h?{value:u,done:h}:{value:l?[a(u[0]),a(u[1])]:a(u),done:h}},[Symbol.iterator](){return this}}}}function En(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function ql(e,t){const n={get(s){const i=this.__v_raw,o=Q(i),l=Q(s);e||(ht(s,l)&&pe(o,"get",s),pe(o,"get",l));const{has:c}=wn(o),f=t?Sr:e?Cr:ge;if(c.call(o,s))return f(i.get(s));if(c.call(o,l))return f(i.get(l));i!==o&&i.get(s)},get size(){const s=this.__v_raw;return!e&&pe(Q(s),"iterate",Rt),Reflect.get(s,"size",s)},has(s){const i=this.__v_raw,o=Q(i),l=Q(s);return e||(ht(s,l)&&pe(o,"has",s),pe(o,"has",l)),s===l?i.has(s):i.has(s)||i.has(l)},forEach(s,i){const o=this,l=o.__v_raw,c=Q(l),f=t?Sr:e?Cr:ge;return!e&&pe(c,"iterate",Rt),l.forEach((a,u)=>s.call(i,f(a),f(u),o))}};return fe(n,e?{add:En("add"),set:En("set"),delete:En("delete"),clear:En("clear")}:{add(s){!t&&!Me(s)&&!Pt(s)&&(s=Q(s));const i=Q(this);return wn(i).has.call(i,s)||(i.add(s),nt(i,"add",s,s)),this},set(s,i){!t&&!Me(i)&&!Pt(i)&&(i=Q(i));const o=Q(this),{has:l,get:c}=wn(o);let f=l.call(o,s);f||(s=Q(s),f=l.call(o,s));const a=c.call(o,s);return o.set(s,i),f?ht(i,a)&&nt(o,"set",s,i):nt(o,"add",s,i),this},delete(s){const i=Q(this),{has:o,get:l}=wn(i);let c=o.call(i,s);c||(s=Q(s),c=o.call(i,s)),l&&l.call(i,s);const f=i.delete(s);return c&&nt(i,"delete",s,void 0),f},clear(){const s=Q(this),i=s.size!==0,o=s.clear();return i&&nt(s,"clear",void 0,void 0),o}}),["keys","values","entries",Symbol.iterator].forEach(s=>{n[s]=Wl(s,e,t)}),n}function Xr(e,t){const n=ql(e,t);return(r,s,i)=>s==="__v_isReactive"?!e:s==="__v_isReadonly"?e:s==="__v_raw"?r:Reflect.get(X(n,s)&&s in r?n:r,s,i)}const zl={get:Xr(!1,!1)},Gl={get:Xr(!1,!0)},Ql={get:Xr(!0,!1)};const Ki=new WeakMap,Wi=new WeakMap,qi=new WeakMap,Jl=new WeakMap;function Yl(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Xl(e){return e.__v_skip||!Object.isExtensible(e)?0:Yl(wl(e))}function Ut(e){return Pt(e)?e:Zr(e,!1,Bl,zl,Ki)}function zi(e){return Zr(e,!1,Kl,Gl,Wi)}function Gi(e){return Zr(e,!0,Ul,Ql,qi)}function Zr(e,t,n,r,s){if(!oe(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const i=s.get(e);if(i)return i;const o=Xl(e);if(o===0)return e;const l=new Proxy(e,o===2?r:n);return s.set(e,l),l}function Ft(e){return Pt(e)?Ft(e.__v_raw):!!(e&&e.__v_isReactive)}function Pt(e){return!!(e&&e.__v_isReadonly)}function Me(e){return!!(e&&e.__v_isShallow)}function es(e){return e?!!e.__v_raw:!1}function Q(e){const t=e&&e.__v_raw;return t?Q(t):e}function zn(e){return!X(e,"__v_skip")&&Object.isExtensible(e)&&In(e,"__v_skip",!0),e}const ge=e=>oe(e)?Ut(e):e,Cr=e=>oe(e)?Gi(e):e;function me(e){return e?e.__v_isRef===!0:!1}function Qi(e){return Ji(e,!1)}function Zl(e){return Ji(e,!0)}function Ji(e,t){return me(e)?e:new ec(e,t)}class ec{constructor(t,n){this.dep=new Yr,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=n?t:Q(t),this._value=n?t:ge(t),this.__v_isShallow=n}get value(){return this.dep.track(),this._value}set value(t){const n=this._rawValue,r=this.__v_isShallow||Me(t)||Pt(t);t=r?t:Q(t),ht(t,n)&&(this._rawValue=t,this._value=r?t:ge(t),this.dep.trigger())}}function Ct(e){return me(e)?e.value:e}const tc={get:(e,t,n)=>t==="__v_raw"?e:Ct(Reflect.get(e,t,n)),set:(e,t,n,r)=>{const s=e[t];return me(s)&&!me(n)?(s.value=n,!0):Reflect.set(e,t,n,r)}};function Yi(e){return Ft(e)?e:new Proxy(e,tc)}class nc{constructor(t,n,r){this.fn=t,this.setter=n,this._value=void 0,this.dep=new Yr(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=cn-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!n,this.isSSR=r}notify(){if(this.flags|=16,!(this.flags&8)&&ie!==this)return Ni(this,!0),!0}get value(){const t=this.dep.track();return $i(this),t&&(t.version=this.dep.version),this._value}set value(t){this.setter&&this.setter(t)}}function rc(e,t,n=!1){let r,s;return B(e)?r=e:(r=e.get,s=e.set),new nc(r,s,n)}const xn={},Mn=new WeakMap;let xt;function sc(e,t=!1,n=xt){if(n){let r=Mn.get(n);r||Mn.set(n,r=[]),r.push(e)}}function ic(e,t,n=re){const{immediate:r,deep:s,once:i,scheduler:o,augmentJob:l,call:c}=n,f=O=>s?O:Me(O)||s===!1||s===0?rt(O,1):rt(O);let a,u,h,g,v=!1,x=!1;if(me(e)?(u=()=>e.value,v=Me(e)):Ft(e)?(u=()=>f(e),v=!0):j(e)?(x=!0,v=e.some(O=>Ft(O)||Me(O)),u=()=>e.map(O=>{if(me(O))return O.value;if(Ft(O))return f(O);if(B(O))return c?c(O,2):O()})):B(e)?t?u=c?()=>c(e,2):e:u=()=>{if(h){_t();try{h()}finally{yt()}}const O=xt;xt=a;try{return c?c(e,3,[g]):e(g)}finally{xt=O}}:u=Ge,t&&s){const O=u,U=s===!0?1/0:s;u=()=>rt(O(),U)}const F=kl(),I=()=>{a.stop(),F&&F.active&&Kr(F.effects,a)};if(i&&t){const O=t;t=(...U)=>{O(...U),I()}}let L=x?new Array(e.length).fill(xn):xn;const k=O=>{if(!(!(a.flags&1)||!a.dirty&&!O))if(t){const U=a.run();if(s||v||(x?U.some((W,q)=>ht(W,L[q])):ht(U,L))){h&&h();const W=xt;xt=a;try{const q=[U,L===xn?void 0:x&&L[0]===xn?[]:L,g];c?c(t,3,q):t(...q),L=U}finally{xt=W}}}else a.run()};return l&&l(k),a=new Mi(u),a.scheduler=o?()=>o(k,!1):k,g=O=>sc(O,!1,a),h=a.onStop=()=>{const O=Mn.get(a);if(O){if(c)c(O,4);else for(const U of O)U();Mn.delete(a)}},t?r?k(!0):L=a.run():o?o(k.bind(null,!0),!0):a.run(),I.pause=a.pause.bind(a),I.resume=a.resume.bind(a),I.stop=I,I}function rt(e,t=1/0,n){if(t<=0||!oe(e)||e.__v_skip||(n=n||new Set,n.has(e)))return e;if(n.add(e),t--,me(e))rt(e.value,t,n);else if(j(e))for(let r=0;r<e.length;r++)rt(e[r],t,n);else if(Ri(e)||Dt(e))e.forEach(r=>{rt(r,t,n)});else if(Ai(e)){for(const r in e)rt(e[r],t,n);for(const r of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,r)&&rt(e[r],t,n)}return e}/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function _n(e,t,n,r){try{return r?e(...r):e()}catch(s){Gn(s,t,n)}}function He(e,t,n,r){if(B(e)){const s=_n(e,t,n,r);return s&&Pi(s)&&s.catch(i=>{Gn(i,t,n)}),s}if(j(e)){const s=[];for(let i=0;i<e.length;i++)s.push(He(e[i],t,n,r));return s}}function Gn(e,t,n,r=!0){const s=t?t.vnode:null,{errorHandler:i,throwUnhandledErrorInProduction:o}=t&&t.appContext.config||re;if(t){let l=t.parent;const c=t.proxy,f=`https://vuejs.org/error-reference/#runtime-${n}`;for(;l;){const a=l.ec;if(a){for(let u=0;u<a.length;u++)if(a[u](e,c,f)===!1)return}l=l.parent}if(i){_t(),_n(i,null,10,[e,c,f]),yt();return}}oc(e,n,s,r,o)}function oc(e,t,n,r=!0,s=!1){if(s)throw e;console.error(e)}const be=[];let We=-1;const $t=[];let ct=null,kt=0;const Xi=Promise.resolve();let kn=null;function Zi(e){const t=kn||Xi;return e?t.then(this?e.bind(this):e):t}function lc(e){let t=We+1,n=be.length;for(;t<n;){const r=t+n>>>1,s=be[r],i=un(s);i<e||i===e&&s.flags&2?t=r+1:n=r}return t}function ts(e){if(!(e.flags&1)){const t=un(e),n=be[be.length-1];!n||!(e.flags&2)&&t>=un(n)?be.push(e):be.splice(lc(t),0,e),e.flags|=1,eo()}}function eo(){kn||(kn=Xi.then(no))}function cc(e){j(e)?$t.push(...e):ct&&e.id===-1?ct.splice(kt+1,0,e):e.flags&1||($t.push(e),e.flags|=1),eo()}function _s(e,t,n=We+1){for(;n<be.length;n++){const r=be[n];if(r&&r.flags&2){if(e&&r.id!==e.uid)continue;be.splice(n,1),n--,r.flags&4&&(r.flags&=-2),r(),r.flags&4||(r.flags&=-2)}}}function to(e){if($t.length){const t=[...new Set($t)].sort((n,r)=>un(n)-un(r));if($t.length=0,ct){ct.push(...t);return}for(ct=t,kt=0;kt<ct.length;kt++){const n=ct[kt];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}ct=null,kt=0}}const un=e=>e.id==null?e.flags&2?-1:1/0:e.id;function no(e){try{for(We=0;We<be.length;We++){const t=be[We];t&&!(t.flags&8)&&(t.flags&4&&(t.flags&=-2),_n(t,t.i,t.i?15:14),t.flags&4||(t.flags&=-2))}}finally{for(;We<be.length;We++){const t=be[We];t&&(t.flags&=-2)}We=-1,be.length=0,to(),kn=null,(be.length||$t.length)&&no()}}let ze,Qt=[],Rr=!1;function Qn(e,...t){ze?ze.emit(e,...t):Rr||Qt.push({event:e,args:t})}function ro(e,t){var n,r;ze=e,ze?(ze.enabled=!0,Qt.forEach(({event:s,args:i})=>ze.emit(s,...i)),Qt=[]):typeof window<"u"&&window.HTMLElement&&!((r=(n=window.navigator)==null?void 0:n.userAgent)!=null&&r.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push(i=>{ro(i,t)}),setTimeout(()=>{ze||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,Rr=!0,Qt=[])},3e3)):(Rr=!0,Qt=[])}function ac(e,t){Qn("app:init",e,t,{Fragment:Ne,Text:yn,Comment:ve,Static:An})}function uc(e){Qn("app:unmount",e)}const fc=ns("component:added"),so=ns("component:updated"),dc=ns("component:removed"),hc=e=>{ze&&typeof ze.cleanupBuffer=="function"&&!ze.cleanupBuffer(e)&&dc(e)};/*! #__NO_SIDE_EFFECTS__ */function ns(e){return t=>{Qn(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}function pc(e,t,n){Qn("component:emit",e.appContext.app,e,t,n)}let xe=null,io=null;function Nn(e){const t=xe;return xe=e,io=e&&e.type.__scopeId||null,t}function gc(e,t=xe,n){if(!t||e._n)return e;const r=(...s)=>{r._d&&Ls(-1);const i=Nn(t);let o;try{o=e(...s)}finally{Nn(i),r._d&&Ls(1)}return so(t),o};return r._n=!0,r._c=!0,r._d=!0,r}function nd(e,t){if(xe===null)return e;const n=Zn(xe),r=e.dirs||(e.dirs=[]);for(let s=0;s<t.length;s++){let[i,o,l,c=re]=t[s];i&&(B(i)&&(i={mounted:i,updated:i}),i.deep&&rt(o),r.push({dir:i,instance:n,value:o,oldValue:void 0,arg:l,modifiers:c}))}return e}function bt(e,t,n,r){const s=e.dirs,i=t&&t.dirs;for(let o=0;o<s.length;o++){const l=s[o];i&&(l.oldValue=i[o].value);let c=l.dir[r];c&&(_t(),He(c,n,8,[e.el,l,e,t]),yt())}}const oo=Symbol("_vte"),lo=e=>e.__isTeleport,en=e=>e&&(e.disabled||e.disabled===""),ys=e=>e&&(e.defer||e.defer===""),bs=e=>typeof SVGElement<"u"&&e instanceof SVGElement,vs=e=>typeof MathMLElement=="function"&&e instanceof MathMLElement,Pr=(e,t)=>{const n=e&&e.to;return ce(n)?t?t(n):null:n},co={name:"Teleport",__isTeleport:!0,process(e,t,n,r,s,i,o,l,c,f){const{mc:a,pc:u,pbc:h,o:{insert:g,querySelector:v,createText:x,createComment:F}}=f,I=en(t.props);let{shapeFlag:L,children:k,dynamicChildren:O}=t;if(e==null){const U=t.el=x(""),W=t.anchor=x("");g(U,n,r),g(W,n,r);const q=(D,K)=>{L&16&&(s&&s.isCE&&(s.ce._teleportTarget=D),a(k,D,K,s,i,o,l,c))},le=()=>{const D=t.target=Pr(t.props,v),K=ao(D,t,x,g);D&&(o!=="svg"&&bs(D)?o="svg":o!=="mathml"&&vs(D)&&(o="mathml"),I||(q(D,K),Pn(t,!1)))};I&&(q(n,W),Pn(t,!0)),ys(t.props)?ye(()=>{le(),t.el.__isMounted=!0},i):le()}else{if(ys(t.props)&&!e.el.__isMounted){ye(()=>{co.process(e,t,n,r,s,i,o,l,c,f),delete e.el.__isMounted},i);return}t.el=e.el,t.targetStart=e.targetStart;const U=t.anchor=e.anchor,W=t.target=e.target,q=t.targetAnchor=e.targetAnchor,le=en(e.props),D=le?n:W,K=le?U:q;if(o==="svg"||bs(W)?o="svg":(o==="mathml"||vs(W))&&(o="mathml"),O?(h(e.dynamicChildren,O,D,s,i,o,l),is(e,t,!0)):c||u(e,t,D,K,s,i,o,l,!1),I)le?t.props&&e.props&&t.props.to!==e.props.to&&(t.props.to=e.props.to):Sn(t,n,U,f,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const Z=t.target=Pr(t.props,v);Z&&Sn(t,Z,null,f,0)}else le&&Sn(t,W,q,f,1);Pn(t,I)}},remove(e,t,n,{um:r,o:{remove:s}},i){const{shapeFlag:o,children:l,anchor:c,targetStart:f,targetAnchor:a,target:u,props:h}=e;if(u&&(s(f),s(a)),i&&s(c),o&16){const g=i||!en(h);for(let v=0;v<l.length;v++){const x=l[v];r(x,t,n,g,!!x.dynamicChildren)}}},move:Sn,hydrate:mc};function Sn(e,t,n,{o:{insert:r},m:s},i=2){i===0&&r(e.targetAnchor,t,n);const{el:o,anchor:l,shapeFlag:c,children:f,props:a}=e,u=i===2;if(u&&r(o,t,n),(!u||en(a))&&c&16)for(let h=0;h<f.length;h++)s(f[h],t,n,2);u&&r(l,t,n)}function mc(e,t,n,r,s,i,{o:{nextSibling:o,parentNode:l,querySelector:c,insert:f,createText:a}},u){const h=t.target=Pr(t.props,c);if(h){const g=en(t.props),v=h._lpa||h.firstChild;if(t.shapeFlag&16)if(g)t.anchor=u(o(e),t,l(e),n,r,s,i),t.targetStart=v,t.targetAnchor=v&&o(v);else{t.anchor=o(e);let x=v;for(;x;){if(x&&x.nodeType===8){if(x.data==="teleport start anchor")t.targetStart=x;else if(x.data==="teleport anchor"){t.targetAnchor=x,h._lpa=t.targetAnchor&&o(t.targetAnchor);break}}x=o(x)}t.targetAnchor||ao(h,t,a,f),u(v&&o(v),t,h,n,r,s,i)}Pn(t,g)}return t.anchor&&o(t.anchor)}const rd=co;function Pn(e,t){const n=e.ctx;if(n&&n.ut){let r,s;for(t?(r=e.el,s=e.anchor):(r=e.targetStart,s=e.targetAnchor);r&&r!==s;)r.nodeType===1&&r.setAttribute("data-v-owner",n.uid),r=r.nextSibling;n.ut()}}function ao(e,t,n,r){const s=t.targetStart=n(""),i=t.targetAnchor=n("");return s[oo]=i,e&&(r(s,e),r(i,e)),i}const at=Symbol("_leaveCb"),Cn=Symbol("_enterCb");function _c(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return yo(()=>{e.isMounted=!0}),bo(()=>{e.isUnmounting=!0}),e}const Ie=[Function,Array],uo={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ie,onEnter:Ie,onAfterEnter:Ie,onEnterCancelled:Ie,onBeforeLeave:Ie,onLeave:Ie,onAfterLeave:Ie,onLeaveCancelled:Ie,onBeforeAppear:Ie,onAppear:Ie,onAfterAppear:Ie,onAppearCancelled:Ie},fo=e=>{const t=e.subTree;return t.component?fo(t.component):t},yc={name:"BaseTransition",props:uo,setup(e,{slots:t}){const n=Bo(),r=_c();return()=>{const s=t.default&&go(t.default(),!0);if(!s||!s.length)return;const i=ho(s),o=Q(e),{mode:l}=o;if(r.isLeaving)return ar(i);const c=ws(i);if(!c)return ar(i);let f=Tr(c,o,r,n,u=>f=u);c.type!==ve&&fn(c,f);let a=n.subTree&&ws(n.subTree);if(a&&a.type!==ve&&!St(c,a)&&fo(n).type!==ve){let u=Tr(a,o,r,n);if(fn(a,u),l==="out-in"&&c.type!==ve)return r.isLeaving=!0,u.afterLeave=()=>{r.isLeaving=!1,n.job.flags&8||n.update(),delete u.afterLeave,a=void 0},ar(i);l==="in-out"&&c.type!==ve?u.delayLeave=(h,g,v)=>{const x=po(r,a);x[String(a.key)]=a,h[at]=()=>{g(),h[at]=void 0,delete f.delayedLeave,a=void 0},f.delayedLeave=()=>{v(),delete f.delayedLeave,a=void 0}}:a=void 0}else a&&(a=void 0);return i}}};function ho(e){let t=e[0];if(e.length>1){for(const n of e)if(n.type!==ve){t=n;break}}return t}const bc=yc;function po(e,t){const{leavingVNodes:n}=e;let r=n.get(t.type);return r||(r=Object.create(null),n.set(t.type,r)),r}function Tr(e,t,n,r,s){const{appear:i,mode:o,persisted:l=!1,onBeforeEnter:c,onEnter:f,onAfterEnter:a,onEnterCancelled:u,onBeforeLeave:h,onLeave:g,onAfterLeave:v,onLeaveCancelled:x,onBeforeAppear:F,onAppear:I,onAfterAppear:L,onAppearCancelled:k}=t,O=String(e.key),U=po(n,e),W=(D,K)=>{D&&He(D,r,9,K)},q=(D,K)=>{const Z=K[1];W(D,K),j(D)?D.every(M=>M.length<=1)&&Z():D.length<=1&&Z()},le={mode:o,persisted:l,beforeEnter(D){let K=c;if(!n.isMounted)if(i)K=F||c;else return;D[at]&&D[at](!0);const Z=U[O];Z&&St(e,Z)&&Z.el[at]&&Z.el[at](),W(K,[D])},enter(D){let K=f,Z=a,M=u;if(!n.isMounted)if(i)K=I||f,Z=L||a,M=k||u;else return;let J=!1;const ue=D[Cn]=Se=>{J||(J=!0,Se?W(M,[D]):W(Z,[D]),le.delayedLeave&&le.delayedLeave(),D[Cn]=void 0)};K?q(K,[D,ue]):ue()},leave(D,K){const Z=String(e.key);if(D[Cn]&&D[Cn](!0),n.isUnmounting)return K();W(h,[D]);let M=!1;const J=D[at]=ue=>{M||(M=!0,K(),ue?W(x,[D]):W(v,[D]),D[at]=void 0,U[Z]===e&&delete U[Z])};U[Z]=e,g?q(g,[D,J]):J()},clone(D){const K=Tr(D,t,n,r,s);return s&&s(K),K}};return le}function ar(e){if(Jn(e))return e=pt(e),e.children=null,e}function ws(e){if(!Jn(e))return lo(e.type)&&e.children?ho(e.children):e;const{shapeFlag:t,children:n}=e;if(n){if(t&16)return n[0];if(t&32&&B(n.default))return n.default()}}function fn(e,t){e.shapeFlag&6&&e.component?(e.transition=t,fn(e.component.subTree,t)):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function go(e,t=!1,n){let r=[],s=0;for(let i=0;i<e.length;i++){let o=e[i];const l=n==null?o.key:String(n)+String(o.key!=null?o.key:i);o.type===Ne?(o.patchFlag&128&&s++,r=r.concat(go(o.children,t,l))):(t||o.type!==ve)&&r.push(l!=null?pt(o,{key:l}):o)}if(s>1)for(let i=0;i<r.length;i++)r[i].patchFlag=-2;return r}/*! #__NO_SIDE_EFFECTS__ */function rs(e,t){return B(e)?fe({name:e.name},t,{setup:e}):e}function mo(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}function Dn(e,t,n,r,s=!1){if(j(e)){e.forEach((v,x)=>Dn(v,t&&(j(t)?t[x]:t),n,r,s));return}if(tn(r)&&!s){r.shapeFlag&512&&r.type.__asyncResolved&&r.component.subTree.component&&Dn(e,t,n,r.component.subTree);return}const i=r.shapeFlag&4?Zn(r.component):r.el,o=s?null:i,{i:l,r:c}=e,f=t&&t.r,a=l.refs===re?l.refs={}:l.refs,u=l.setupState,h=Q(u),g=u===re?()=>!1:v=>X(h,v);if(f!=null&&f!==c&&(ce(f)?(a[f]=null,g(f)&&(u[f]=null)):me(f)&&(f.value=null)),B(c))_n(c,l,12,[o,a]);else{const v=ce(c),x=me(c);if(v||x){const F=()=>{if(e.f){const I=v?g(c)?u[c]:a[c]:c.value;s?j(I)&&Kr(I,i):j(I)?I.includes(i)||I.push(i):v?(a[c]=[i],g(c)&&(u[c]=a[c])):(c.value=[i],e.k&&(a[e.k]=c.value))}else v?(a[c]=o,g(c)&&(u[c]=o)):x&&(c.value=o,e.k&&(a[e.k]=o))};o?(F.id=-1,ye(F,n)):F()}}}Wn().requestIdleCallback;Wn().cancelIdleCallback;const tn=e=>!!e.type.__asyncLoader,Jn=e=>e.type.__isKeepAlive;function vc(e,t){_o(e,"a",t)}function wc(e,t){_o(e,"da",t)}function _o(e,t,n=de){const r=e.__wdc||(e.__wdc=()=>{let s=n;for(;s;){if(s.isDeactivated)return;s=s.parent}return e()});if(Yn(t,r,n),n){let s=n.parent;for(;s&&s.parent;)Jn(s.parent.vnode)&&Ec(r,t,n,s),s=s.parent}}function Ec(e,t,n,r){const s=Yn(t,e,r,!0);vo(()=>{Kr(r[t],s)},n)}function Yn(e,t,n=de,r=!1){if(n){const s=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...o)=>{_t();const l=bn(n),c=He(t,n,e,o);return l(),yt(),c});return r?s.unshift(i):s.push(i),i}}const st=e=>(t,n=de)=>{(!hn||e==="sp")&&Yn(e,(...r)=>t(...r),n)},xc=st("bm"),yo=st("m"),Sc=st("bu"),Cc=st("u"),bo=st("bum"),vo=st("um"),Rc=st("sp"),Pc=st("rtg"),Tc=st("rtc");function Ac(e,t=de){Yn("ec",e,t)}const Oc="components";function Lc(e,t){return Mc(Oc,e,!0,t)||e}const Ic=Symbol.for("v-ndc");function Mc(e,t,n=!0,r=!1){const s=xe||de;if(s){const i=s.type;{const l=wa(i,!1);if(l&&(l===t||l===ke(t)||l===Kn(ke(t))))return i}const o=Es(s[e]||i[e],t)||Es(s.appContext[e],t);return!o&&r?i:o}}function Es(e,t){return e&&(e[t]||e[ke(t)]||e[Kn(ke(t))])}function sd(e,t,n,r){let s;const i=n,o=j(e);if(o||ce(e)){const l=o&&Ft(e);let c=!1;l&&(c=!Me(e),e=qn(e)),s=new Array(e.length);for(let f=0,a=e.length;f<a;f++)s[f]=t(c?ge(e[f]):e[f],f,void 0,i)}else if(typeof e=="number"){s=new Array(e);for(let l=0;l<e;l++)s[l]=t(l+1,l,void 0,i)}else if(oe(e))if(e[Symbol.iterator])s=Array.from(e,(l,c)=>t(l,c,void 0,i));else{const l=Object.keys(e);s=new Array(l.length);for(let c=0,f=l.length;c<f;c++){const a=l[c];s[c]=t(e[a],a,c,i)}}else s=[];return s}const Ar=e=>e?Uo(e)?Zn(e):Ar(e.parent):null,nn=fe(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Ar(e.parent),$root:e=>Ar(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>Eo(e),$forceUpdate:e=>e.f||(e.f=()=>{ts(e.update)}),$nextTick:e=>e.n||(e.n=Zi.bind(e.proxy)),$watch:e=>ta.bind(e)}),ur=(e,t)=>e!==re&&!e.__isScriptSetup&&X(e,t),kc={get({_:e},t){if(t==="__v_skip")return!0;const{ctx:n,setupState:r,data:s,props:i,accessCache:o,type:l,appContext:c}=e;let f;if(t[0]!=="$"){const g=o[t];if(g!==void 0)switch(g){case 1:return r[t];case 2:return s[t];case 4:return n[t];case 3:return i[t]}else{if(ur(r,t))return o[t]=1,r[t];if(s!==re&&X(s,t))return o[t]=2,s[t];if((f=e.propsOptions[0])&&X(f,t))return o[t]=3,i[t];if(n!==re&&X(n,t))return o[t]=4,n[t];Or&&(o[t]=0)}}const a=nn[t];let u,h;if(a)return t==="$attrs"&&pe(e.attrs,"get",""),a(e);if((u=l.__cssModules)&&(u=u[t]))return u;if(n!==re&&X(n,t))return o[t]=4,n[t];if(h=c.config.globalProperties,X(h,t))return h[t]},set({_:e},t,n){const{data:r,setupState:s,ctx:i}=e;return ur(s,t)?(s[t]=n,!0):r!==re&&X(r,t)?(r[t]=n,!0):X(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:r,appContext:s,propsOptions:i}},o){let l;return!!n[o]||e!==re&&X(e,o)||ur(t,o)||(l=i[0])&&X(l,o)||X(r,o)||X(nn,o)||X(s.config.globalProperties,o)},defineProperty(e,t,n){return n.get!=null?e._.accessCache[t]=0:X(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}};function xs(e){return j(e)?e.reduce((t,n)=>(t[n]=null,t),{}):e}let Or=!0;function Nc(e){const t=Eo(e),n=e.proxy,r=e.ctx;Or=!1,t.beforeCreate&&Ss(t.beforeCreate,e,"bc");const{data:s,computed:i,methods:o,watch:l,provide:c,inject:f,created:a,beforeMount:u,mounted:h,beforeUpdate:g,updated:v,activated:x,deactivated:F,beforeDestroy:I,beforeUnmount:L,destroyed:k,unmounted:O,render:U,renderTracked:W,renderTriggered:q,errorCaptured:le,serverPrefetch:D,expose:K,inheritAttrs:Z,components:M,directives:J,filters:ue}=t;if(f&&Dc(f,r,null),o)for(const te in o){const Y=o[te];B(Y)&&(r[te]=Y.bind(n))}if(s){const te=s.call(n,n);oe(te)&&(e.data=Ut(te))}if(Or=!0,i)for(const te in i){const Y=i[te],Je=B(Y)?Y.bind(n,n):B(Y.get)?Y.get.bind(n,n):Ge,it=!B(Y)&&B(Y.set)?Y.set.bind(n):Ge,je=De({get:Je,set:it});Object.defineProperty(r,te,{enumerable:!0,configurable:!0,get:()=>je.value,set:we=>je.value=we})}if(l)for(const te in l)wo(l[te],r,n,te);if(c){const te=B(c)?c.call(n):c;Reflect.ownKeys(te).forEach(Y=>{Tn(Y,te[Y])})}a&&Ss(a,e,"c");function ae(te,Y){j(Y)?Y.forEach(Je=>te(Je.bind(n))):Y&&te(Y.bind(n))}if(ae(xc,u),ae(yo,h),ae(Sc,g),ae(Cc,v),ae(vc,x),ae(wc,F),ae(Ac,le),ae(Tc,W),ae(Pc,q),ae(bo,L),ae(vo,O),ae(Rc,D),j(K))if(K.length){const te=e.exposed||(e.exposed={});K.forEach(Y=>{Object.defineProperty(te,Y,{get:()=>n[Y],set:Je=>n[Y]=Je})})}else e.exposed||(e.exposed={});U&&e.render===Ge&&(e.render=U),Z!=null&&(e.inheritAttrs=Z),M&&(e.components=M),J&&(e.directives=J),D&&mo(e)}function Dc(e,t,n=Ge){j(e)&&(e=Lr(e));for(const r in e){const s=e[r];let i;oe(s)?"default"in s?i=$e(s.from||r,s.default,!0):i=$e(s.from||r):i=$e(s),me(i)?Object.defineProperty(t,r,{enumerable:!0,configurable:!0,get:()=>i.value,set:o=>i.value=o}):t[r]=i}}function Ss(e,t,n){He(j(e)?e.map(r=>r.bind(t.proxy)):e.bind(t.proxy),t,n)}function wo(e,t,n,r){let s=r.includes(".")?ko(n,r):()=>n[r];if(ce(e)){const i=t[e];B(i)&&rn(s,i)}else if(B(e))rn(s,e.bind(n));else if(oe(e))if(j(e))e.forEach(i=>wo(i,t,n,r));else{const i=B(e.handler)?e.handler.bind(n):t[e.handler];B(i)&&rn(s,i,e)}}function Eo(e){const t=e.type,{mixins:n,extends:r}=t,{mixins:s,optionsCache:i,config:{optionMergeStrategies:o}}=e.appContext,l=i.get(t);let c;return l?c=l:!s.length&&!n&&!r?c=t:(c={},s.length&&s.forEach(f=>Fn(c,f,o,!0)),Fn(c,t,o)),oe(t)&&i.set(t,c),c}function Fn(e,t,n,r=!1){const{mixins:s,extends:i}=t;i&&Fn(e,i,n,!0),s&&s.forEach(o=>Fn(e,o,n,!0));for(const o in t)if(!(r&&o==="expose")){const l=Fc[o]||n&&n[o];e[o]=l?l(e[o],t[o]):t[o]}return e}const Fc={data:Cs,props:Rs,emits:Rs,methods:Jt,computed:Jt,beforeCreate:_e,created:_e,beforeMount:_e,mounted:_e,beforeUpdate:_e,updated:_e,beforeDestroy:_e,beforeUnmount:_e,destroyed:_e,unmounted:_e,activated:_e,deactivated:_e,errorCaptured:_e,serverPrefetch:_e,components:Jt,directives:Jt,watch:Hc,provide:Cs,inject:$c};function Cs(e,t){return t?e?function(){return fe(B(e)?e.call(this,this):e,B(t)?t.call(this,this):t)}:t:e}function $c(e,t){return Jt(Lr(e),Lr(t))}function Lr(e){if(j(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function _e(e,t){return e?[...new Set([].concat(e,t))]:t}function Jt(e,t){return e?fe(Object.create(null),e,t):t}function Rs(e,t){return e?j(e)&&j(t)?[...new Set([...e,...t])]:fe(Object.create(null),xs(e),xs(t??{})):t}function Hc(e,t){if(!e)return t;if(!t)return e;const n=fe(Object.create(null),e);for(const r in t)n[r]=_e(e[r],t[r]);return n}function xo(){return{app:null,config:{isNativeTag:bl,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let jc=0;function Vc(e,t){return function(r,s=null){B(r)||(r=fe({},r)),s!=null&&!oe(s)&&(s=null);const i=xo(),o=new WeakSet,l=[];let c=!1;const f=i.app={_uid:jc++,_component:r,_props:s,_container:null,_context:i,_instance:null,version:ks,get config(){return i.config},set config(a){},use(a,...u){return o.has(a)||(a&&B(a.install)?(o.add(a),a.install(f,...u)):B(a)&&(o.add(a),a(f,...u))),f},mixin(a){return i.mixins.includes(a)||i.mixins.push(a),f},component(a,u){return u?(i.components[a]=u,f):i.components[a]},directive(a,u){return u?(i.directives[a]=u,f):i.directives[a]},mount(a,u,h){if(!c){const g=f._ceVNode||Ae(r,s);return g.appContext=i,h===!0?h="svg":h===!1&&(h=void 0),e(g,a,h),c=!0,f._container=a,a.__vue_app__=f,f._instance=g.component,ac(f,ks),Zn(g.component)}},onUnmount(a){l.push(a)},unmount(){c&&(He(l,f._instance,16),e(null,f._container),f._instance=null,uc(f),delete f._container.__vue_app__)},provide(a,u){return i.provides[a]=u,f},runWithContext(a){const u=Ht;Ht=f;try{return a()}finally{Ht=u}}};return f}}let Ht=null;function Tn(e,t){if(de){let n=de.provides;const r=de.parent&&de.parent.provides;r===n&&(n=de.provides=Object.create(r)),n[e]=t}}function $e(e,t,n=!1){const r=de||xe;if(r||Ht){const s=Ht?Ht._context.provides:r?r.parent==null?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides:void 0;if(s&&e in s)return s[e];if(arguments.length>1)return n&&B(t)?t.call(r&&r.proxy):t}}const So={},Co=()=>Object.create(So),Ro=e=>Object.getPrototypeOf(e)===So;function Bc(e,t,n,r=!1){const s={},i=Co();e.propsDefaults=Object.create(null),Po(e,t,s,i);for(const o in e.propsOptions[0])o in s||(s[o]=void 0);n?e.props=r?s:zi(s):e.type.props?e.props=s:e.props=i,e.attrs=i}function Uc(e,t,n,r){const{props:s,attrs:i,vnode:{patchFlag:o}}=e,l=Q(s),[c]=e.propsOptions;let f=!1;if((r||o>0)&&!(o&16)){if(o&8){const a=e.vnode.dynamicProps;for(let u=0;u<a.length;u++){let h=a[u];if(Xn(e.emitsOptions,h))continue;const g=t[h];if(c)if(X(i,h))g!==i[h]&&(i[h]=g,f=!0);else{const v=ke(h);s[v]=Ir(c,l,v,g,e,!1)}else g!==i[h]&&(i[h]=g,f=!0)}}}else{Po(e,t,s,i)&&(f=!0);let a;for(const u in l)(!t||!X(t,u)&&((a=At(u))===u||!X(t,a)))&&(c?n&&(n[u]!==void 0||n[a]!==void 0)&&(s[u]=Ir(c,l,u,void 0,e,!0)):delete s[u]);if(i!==l)for(const u in i)(!t||!X(t,u))&&(delete i[u],f=!0)}f&&nt(e.attrs,"set","")}function Po(e,t,n,r){const[s,i]=e.propsOptions;let o=!1,l;if(t)for(let c in t){if(Yt(c))continue;const f=t[c];let a;s&&X(s,a=ke(c))?!i||!i.includes(a)?n[a]=f:(l||(l={}))[a]=f:Xn(e.emitsOptions,c)||(!(c in r)||f!==r[c])&&(r[c]=f,o=!0)}if(i){const c=Q(n),f=l||re;for(let a=0;a<i.length;a++){const u=i[a];n[u]=Ir(s,c,u,f[u],e,!X(f,u))}}return o}function Ir(e,t,n,r,s,i){const o=e[n];if(o!=null){const l=X(o,"default");if(l&&r===void 0){const c=o.default;if(o.type!==Function&&!o.skipFactory&&B(c)){const{propsDefaults:f}=s;if(n in f)r=f[n];else{const a=bn(s);r=f[n]=c.call(null,t),a()}}else r=c;s.ce&&s.ce._setProp(n,r)}o[0]&&(i&&!l?r=!1:o[1]&&(r===""||r===At(n))&&(r=!0))}return r}const Kc=new WeakMap;function To(e,t,n=!1){const r=n?Kc:t.propsCache,s=r.get(e);if(s)return s;const i=e.props,o={},l=[];let c=!1;if(!B(e)){const a=u=>{c=!0;const[h,g]=To(u,t,!0);fe(o,h),g&&l.push(...g)};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}if(!i&&!c)return oe(e)&&r.set(e,Nt),Nt;if(j(i))for(let a=0;a<i.length;a++){const u=ke(i[a]);Ps(u)&&(o[u]=re)}else if(i)for(const a in i){const u=ke(a);if(Ps(u)){const h=i[a],g=o[u]=j(h)||B(h)?{type:h}:fe({},h),v=g.type;let x=!1,F=!0;if(j(v))for(let I=0;I<v.length;++I){const L=v[I],k=B(L)&&L.name;if(k==="Boolean"){x=!0;break}else k==="String"&&(F=!1)}else x=B(v)&&v.name==="Boolean";g[0]=x,g[1]=F,(x||X(g,"default"))&&l.push(u)}}const f=[o,l];return oe(e)&&r.set(e,f),f}function Ps(e){return e[0]!=="$"&&!Yt(e)}const Ao=e=>e[0]==="_"||e==="$stable",ss=e=>j(e)?e.map(qe):[qe(e)],Wc=(e,t,n)=>{if(t._n)return t;const r=gc((...s)=>ss(t(...s)),n);return r._c=!1,r},Oo=(e,t,n)=>{const r=e._ctx;for(const s in e){if(Ao(s))continue;const i=e[s];if(B(i))t[s]=Wc(s,i,r);else if(i!=null){const o=ss(i);t[s]=()=>o}}},Lo=(e,t)=>{const n=ss(t);e.slots.default=()=>n},Io=(e,t,n)=>{for(const r in t)(n||r!=="_")&&(e[r]=t[r])},qc=(e,t,n)=>{const r=e.slots=Co();if(e.vnode.shapeFlag&32){const s=t._;s?(Io(r,t,n),n&&In(r,"_",s,!0)):Oo(t,r)}else t&&Lo(e,t)},zc=(e,t,n)=>{const{vnode:r,slots:s}=e;let i=!0,o=re;if(r.shapeFlag&32){const l=t._;l?n&&l===1?i=!1:Io(s,t,n):(i=!t.$stable,Oo(t,s)),o=t}else t&&(Lo(e,t),o={default:1});if(i)for(const l in s)!Ao(l)&&o[l]==null&&delete s[l]},ye=ca;function Gc(e){return Qc(e)}function Qc(e,t){const n=Wn();n.__VUE__=!0,ro(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:r,remove:s,patchProp:i,createElement:o,createText:l,createComment:c,setText:f,setElementText:a,parentNode:u,nextSibling:h,setScopeId:g=Ge,insertStaticContent:v}=e,x=(d,p,m,_=null,w=null,b=null,R=void 0,C=null,S=!!p.dynamicChildren)=>{if(d===p)return;d&&!St(d,p)&&(_=y(d),we(d,w,b,!0),d=null),p.patchFlag===-2&&(S=!1,p.dynamicChildren=null);const{type:E,ref:H,shapeFlag:T}=p;switch(E){case yn:F(d,p,m,_);break;case ve:I(d,p,m,_);break;case An:d==null&&L(p,m,_,R);break;case Ne:M(d,p,m,_,w,b,R,C,S);break;default:T&1?U(d,p,m,_,w,b,R,C,S):T&6?J(d,p,m,_,w,b,R,C,S):(T&64||T&128)&&E.process(d,p,m,_,w,b,R,C,S,N)}H!=null&&w&&Dn(H,d&&d.ref,b,p||d,!p)},F=(d,p,m,_)=>{if(d==null)r(p.el=l(p.children),m,_);else{const w=p.el=d.el;p.children!==d.children&&f(w,p.children)}},I=(d,p,m,_)=>{d==null?r(p.el=c(p.children||""),m,_):p.el=d.el},L=(d,p,m,_)=>{[d.el,d.anchor]=v(d.children,p,m,_,d.el,d.anchor)},k=({el:d,anchor:p},m,_)=>{let w;for(;d&&d!==p;)w=h(d),r(d,m,_),d=w;r(p,m,_)},O=({el:d,anchor:p})=>{let m;for(;d&&d!==p;)m=h(d),s(d),d=m;s(p)},U=(d,p,m,_,w,b,R,C,S)=>{p.type==="svg"?R="svg":p.type==="math"&&(R="mathml"),d==null?W(p,m,_,w,b,R,C,S):D(d,p,w,b,R,C,S)},W=(d,p,m,_,w,b,R,C)=>{let S,E;const{props:H,shapeFlag:T,transition:$,dirs:V}=d;if(S=d.el=o(d.type,b,H&&H.is,H),T&8?a(S,d.children):T&16&&le(d.children,S,null,_,w,fr(d,b),R,C),V&&bt(d,null,_,"created"),q(S,d,d.scopeId,R,_),H){for(const se in H)se!=="value"&&!Yt(se)&&i(S,se,null,H[se],b,_);"value"in H&&i(S,"value",null,H.value,b),(E=H.onVnodeBeforeMount)&&Ke(E,_,d)}In(S,"__vnode",d,!0),In(S,"__vueParentComponent",_,!0),V&&bt(d,null,_,"beforeMount");const z=Jc(w,$);z&&$.beforeEnter(S),r(S,p,m),((E=H&&H.onVnodeMounted)||z||V)&&ye(()=>{E&&Ke(E,_,d),z&&$.enter(S),V&&bt(d,null,_,"mounted")},w)},q=(d,p,m,_,w)=>{if(m&&g(d,m),_)for(let b=0;b<_.length;b++)g(d,_[b]);if(w){let b=w.subTree;if(p===b||Do(b.type)&&(b.ssContent===p||b.ssFallback===p)){const R=w.vnode;q(d,R,R.scopeId,R.slotScopeIds,w.parent)}}},le=(d,p,m,_,w,b,R,C,S=0)=>{for(let E=S;E<d.length;E++){const H=d[E]=C?ut(d[E]):qe(d[E]);x(null,H,p,m,_,w,b,R,C)}},D=(d,p,m,_,w,b,R)=>{const C=p.el=d.el;C.__vnode=p;let{patchFlag:S,dynamicChildren:E,dirs:H}=p;S|=d.patchFlag&16;const T=d.props||re,$=p.props||re;let V;if(m&&vt(m,!1),(V=$.onVnodeBeforeUpdate)&&Ke(V,m,p,d),H&&bt(p,d,m,"beforeUpdate"),m&&vt(m,!0),(T.innerHTML&&$.innerHTML==null||T.textContent&&$.textContent==null)&&a(C,""),E?K(d.dynamicChildren,E,C,m,_,fr(p,w),b):R||Y(d,p,C,null,m,_,fr(p,w),b,!1),S>0){if(S&16)Z(C,T,$,m,w);else if(S&2&&T.class!==$.class&&i(C,"class",null,$.class,w),S&4&&i(C,"style",T.style,$.style,w),S&8){const z=p.dynamicProps;for(let se=0;se<z.length;se++){const ee=z[se],Ce=T[ee],Ee=$[ee];(Ee!==Ce||ee==="value")&&i(C,ee,Ce,Ee,w,m)}}S&1&&d.children!==p.children&&a(C,p.children)}else!R&&E==null&&Z(C,T,$,m,w);((V=$.onVnodeUpdated)||H)&&ye(()=>{V&&Ke(V,m,p,d),H&&bt(p,d,m,"updated")},_)},K=(d,p,m,_,w,b,R)=>{for(let C=0;C<p.length;C++){const S=d[C],E=p[C],H=S.el&&(S.type===Ne||!St(S,E)||S.shapeFlag&70)?u(S.el):m;x(S,E,H,null,_,w,b,R,!0)}},Z=(d,p,m,_,w)=>{if(p!==m){if(p!==re)for(const b in p)!Yt(b)&&!(b in m)&&i(d,b,p[b],null,w,_);for(const b in m){if(Yt(b))continue;const R=m[b],C=p[b];R!==C&&b!=="value"&&i(d,b,C,R,w,_)}"value"in m&&i(d,"value",p.value,m.value,w)}},M=(d,p,m,_,w,b,R,C,S)=>{const E=p.el=d?d.el:l(""),H=p.anchor=d?d.anchor:l("");let{patchFlag:T,dynamicChildren:$,slotScopeIds:V}=p;V&&(C=C?C.concat(V):V),d==null?(r(E,m,_),r(H,m,_),le(p.children||[],m,H,w,b,R,C,S)):T>0&&T&64&&$&&d.dynamicChildren?(K(d.dynamicChildren,$,m,w,b,R,C),(p.key!=null||w&&p===w.subTree)&&is(d,p,!0)):Y(d,p,m,H,w,b,R,C,S)},J=(d,p,m,_,w,b,R,C,S)=>{p.slotScopeIds=C,d==null?p.shapeFlag&512?w.ctx.activate(p,m,_,R,S):ue(p,m,_,w,b,R,S):Se(d,p,S)},ue=(d,p,m,_,w,b,R)=>{const C=d.component=ma(d,_,w);if(Jn(d)&&(C.ctx.renderer=N),_a(C,!1,R),C.asyncDep){if(w&&w.registerDep(C,ae,R),!d.el){const S=C.subTree=Ae(ve);I(null,S,p,m)}}else ae(C,d,p,m,w,b,R)},Se=(d,p,m)=>{const _=p.component=d.component;if(oa(d,p,m))if(_.asyncDep&&!_.asyncResolved){te(_,p,m);return}else _.next=p,_.update();else p.el=d.el,_.vnode=p},ae=(d,p,m,_,w,b,R)=>{const C=()=>{if(d.isMounted){let{next:T,bu:$,u:V,parent:z,vnode:se}=d;{const Be=Mo(d);if(Be){T&&(T.el=se.el,te(d,T,R)),Be.asyncDep.then(()=>{d.isUnmounted||C()});return}}let ee=T,Ce;vt(d,!1),T?(T.el=se.el,te(d,T,R)):T=se,$&&sr($),(Ce=T.props&&T.props.onVnodeBeforeUpdate)&&Ke(Ce,z,T,se),vt(d,!0);const Ee=As(d),Ve=d.subTree;d.subTree=Ee,x(Ve,Ee,u(Ve.el),y(Ve),d,w,b),T.el=Ee.el,ee===null&&la(d,Ee.el),V&&ye(V,w),(Ce=T.props&&T.props.onVnodeUpdated)&&ye(()=>Ke(Ce,z,T,se),w),so(d)}else{let T;const{el:$,props:V}=p,{bm:z,m:se,parent:ee,root:Ce,type:Ee}=d,Ve=tn(p);vt(d,!1),z&&sr(z),!Ve&&(T=V&&V.onVnodeBeforeMount)&&Ke(T,ee,p),vt(d,!0);{Ce.ce&&Ce.ce._injectChildStyle(Ee);const Be=d.subTree=As(d);x(null,Be,m,_,d,w,b),p.el=Be.el}if(se&&ye(se,w),!Ve&&(T=V&&V.onVnodeMounted)){const Be=p;ye(()=>Ke(T,ee,Be),w)}(p.shapeFlag&256||ee&&tn(ee.vnode)&&ee.vnode.shapeFlag&256)&&d.a&&ye(d.a,w),d.isMounted=!0,fc(d),p=m=_=null}};d.scope.on();const S=d.effect=new Mi(C);d.scope.off();const E=d.update=S.run.bind(S),H=d.job=S.runIfDirty.bind(S);H.i=d,H.id=d.uid,S.scheduler=()=>ts(H),vt(d,!0),E()},te=(d,p,m)=>{p.component=d;const _=d.vnode.props;d.vnode=p,d.next=null,Uc(d,p.props,_,m),zc(d,p.children,m),_t(),_s(d),yt()},Y=(d,p,m,_,w,b,R,C,S=!1)=>{const E=d&&d.children,H=d?d.shapeFlag:0,T=p.children,{patchFlag:$,shapeFlag:V}=p;if($>0){if($&128){it(E,T,m,_,w,b,R,C,S);return}else if($&256){Je(E,T,m,_,w,b,R,C,S);return}}V&8?(H&16&&Le(E,w,b),T!==E&&a(m,T)):H&16?V&16?it(E,T,m,_,w,b,R,C,S):Le(E,w,b,!0):(H&8&&a(m,""),V&16&&le(T,m,_,w,b,R,C,S))},Je=(d,p,m,_,w,b,R,C,S)=>{d=d||Nt,p=p||Nt;const E=d.length,H=p.length,T=Math.min(E,H);let $;for($=0;$<T;$++){const V=p[$]=S?ut(p[$]):qe(p[$]);x(d[$],V,m,null,w,b,R,C,S)}E>H?Le(d,w,b,!0,!1,T):le(p,m,_,w,b,R,C,S,T)},it=(d,p,m,_,w,b,R,C,S)=>{let E=0;const H=p.length;let T=d.length-1,$=H-1;for(;E<=T&&E<=$;){const V=d[E],z=p[E]=S?ut(p[E]):qe(p[E]);if(St(V,z))x(V,z,m,null,w,b,R,C,S);else break;E++}for(;E<=T&&E<=$;){const V=d[T],z=p[$]=S?ut(p[$]):qe(p[$]);if(St(V,z))x(V,z,m,null,w,b,R,C,S);else break;T--,$--}if(E>T){if(E<=$){const V=$+1,z=V<H?p[V].el:_;for(;E<=$;)x(null,p[E]=S?ut(p[E]):qe(p[E]),m,z,w,b,R,C,S),E++}}else if(E>$)for(;E<=T;)we(d[E],w,b,!0),E++;else{const V=E,z=E,se=new Map;for(E=z;E<=$;E++){const Re=p[E]=S?ut(p[E]):qe(p[E]);Re.key!=null&&se.set(Re.key,E)}let ee,Ce=0;const Ee=$-z+1;let Ve=!1,Be=0;const Kt=new Array(Ee);for(E=0;E<Ee;E++)Kt[E]=0;for(E=V;E<=T;E++){const Re=d[E];if(Ce>=Ee){we(Re,w,b,!0);continue}let Ue;if(Re.key!=null)Ue=se.get(Re.key);else for(ee=z;ee<=$;ee++)if(Kt[ee-z]===0&&St(Re,p[ee])){Ue=ee;break}Ue===void 0?we(Re,w,b,!0):(Kt[Ue-z]=E+1,Ue>=Be?Be=Ue:Ve=!0,x(Re,p[Ue],m,null,w,b,R,C,S),Ce++)}const ds=Ve?Yc(Kt):Nt;for(ee=ds.length-1,E=Ee-1;E>=0;E--){const Re=z+E,Ue=p[Re],hs=Re+1<H?p[Re+1].el:_;Kt[E]===0?x(null,Ue,m,hs,w,b,R,C,S):Ve&&(ee<0||E!==ds[ee]?je(Ue,m,hs,2):ee--)}}},je=(d,p,m,_,w=null)=>{const{el:b,type:R,transition:C,children:S,shapeFlag:E}=d;if(E&6){je(d.component.subTree,p,m,_);return}if(E&128){d.suspense.move(p,m,_);return}if(E&64){R.move(d,p,m,N);return}if(R===Ne){r(b,p,m);for(let T=0;T<S.length;T++)je(S[T],p,m,_);r(d.anchor,p,m);return}if(R===An){k(d,p,m);return}if(_!==2&&E&1&&C)if(_===0)C.beforeEnter(b),r(b,p,m),ye(()=>C.enter(b),w);else{const{leave:T,delayLeave:$,afterLeave:V}=C,z=()=>r(b,p,m),se=()=>{T(b,()=>{z(),V&&V()})};$?$(b,z,se):se()}else r(b,p,m)},we=(d,p,m,_=!1,w=!1)=>{const{type:b,props:R,ref:C,children:S,dynamicChildren:E,shapeFlag:H,patchFlag:T,dirs:$,cacheIndex:V}=d;if(T===-2&&(w=!1),C!=null&&Dn(C,null,m,d,!0),V!=null&&(p.renderCache[V]=void 0),H&256){p.ctx.deactivate(d);return}const z=H&1&&$,se=!tn(d);let ee;if(se&&(ee=R&&R.onVnodeBeforeUnmount)&&Ke(ee,p,d),H&6)vn(d.component,m,_);else{if(H&128){d.suspense.unmount(m,_);return}z&&bt(d,null,p,"beforeUnmount"),H&64?d.type.remove(d,p,m,N,_):E&&!E.hasOnce&&(b!==Ne||T>0&&T&64)?Le(E,p,m,!1,!0):(b===Ne&&T&384||!w&&H&16)&&Le(S,p,m),_&&Ot(d)}(se&&(ee=R&&R.onVnodeUnmounted)||z)&&ye(()=>{ee&&Ke(ee,p,d),z&&bt(d,null,p,"unmounted")},m)},Ot=d=>{const{type:p,el:m,anchor:_,transition:w}=d;if(p===Ne){Lt(m,_);return}if(p===An){O(d);return}const b=()=>{s(m),w&&!w.persisted&&w.afterLeave&&w.afterLeave()};if(d.shapeFlag&1&&w&&!w.persisted){const{leave:R,delayLeave:C}=w,S=()=>R(m,b);C?C(d.el,b,S):S()}else b()},Lt=(d,p)=>{let m;for(;d!==p;)m=h(d),s(d),d=m;s(p)},vn=(d,p,m)=>{const{bum:_,scope:w,job:b,subTree:R,um:C,m:S,a:E}=d;Ts(S),Ts(E),_&&sr(_),w.stop(),b&&(b.flags|=8,we(R,d,p,m)),C&&ye(C,p),ye(()=>{d.isUnmounted=!0},p),p&&p.pendingBranch&&!p.isUnmounted&&d.asyncDep&&!d.asyncResolved&&d.suspenseId===p.pendingId&&(p.deps--,p.deps===0&&p.resolve()),hc(d)},Le=(d,p,m,_=!1,w=!1,b=0)=>{for(let R=b;R<d.length;R++)we(d[R],p,m,_,w)},y=d=>{if(d.shapeFlag&6)return y(d.component.subTree);if(d.shapeFlag&128)return d.suspense.next();const p=h(d.anchor||d.el),m=p&&p[oo];return m?h(m):p};let A=!1;const P=(d,p,m)=>{d==null?p._vnode&&we(p._vnode,null,null,!0):x(p._vnode||null,d,p,null,null,null,m),p._vnode=d,A||(A=!0,_s(),to(),A=!1)},N={p:x,um:we,m:je,r:Ot,mt:ue,mc:le,pc:Y,pbc:K,n:y,o:e};return{render:P,hydrate:void 0,createApp:Vc(P)}}function fr({type:e,props:t},n){return n==="svg"&&e==="foreignObject"||n==="mathml"&&e==="annotation-xml"&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function vt({effect:e,job:t},n){n?(e.flags|=32,t.flags|=4):(e.flags&=-33,t.flags&=-5)}function Jc(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function is(e,t,n=!1){const r=e.children,s=t.children;if(j(r)&&j(s))for(let i=0;i<r.length;i++){const o=r[i];let l=s[i];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=s[i]=ut(s[i]),l.el=o.el),!n&&l.patchFlag!==-2&&is(o,l)),l.type===yn&&(l.el=o.el)}}function Yc(e){const t=e.slice(),n=[0];let r,s,i,o,l;const c=e.length;for(r=0;r<c;r++){const f=e[r];if(f!==0){if(s=n[n.length-1],e[s]<f){t[r]=s,n.push(r);continue}for(i=0,o=n.length-1;i<o;)l=i+o>>1,e[n[l]]<f?i=l+1:o=l;f<e[n[i]]&&(i>0&&(t[r]=n[i-1]),n[i]=r)}}for(i=n.length,o=n[i-1];i-- >0;)n[i]=o,o=t[o];return n}function Mo(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:Mo(t)}function Ts(e){if(e)for(let t=0;t<e.length;t++)e[t].flags|=8}const Xc=Symbol.for("v-scx"),Zc=()=>$e(Xc);function ea(e,t){return os(e,null,t)}function rn(e,t,n){return os(e,t,n)}function os(e,t,n=re){const{immediate:r,deep:s,flush:i,once:o}=n,l=fe({},n),c=t&&r||!t&&i!=="post";let f;if(hn){if(i==="sync"){const g=Zc();f=g.__watcherHandles||(g.__watcherHandles=[])}else if(!c){const g=()=>{};return g.stop=Ge,g.resume=Ge,g.pause=Ge,g}}const a=de;l.call=(g,v,x)=>He(g,a,v,x);let u=!1;i==="post"?l.scheduler=g=>{ye(g,a&&a.suspense)}:i!=="sync"&&(u=!0,l.scheduler=(g,v)=>{v?g():ts(g)}),l.augmentJob=g=>{t&&(g.flags|=4),u&&(g.flags|=2,a&&(g.id=a.uid,g.i=a))};const h=ic(e,t,l);return hn&&(f?f.push(h):c&&h()),h}function ta(e,t,n){const r=this.proxy,s=ce(e)?e.includes(".")?ko(r,e):()=>r[e]:e.bind(r,r);let i;B(t)?i=t:(i=t.handler,n=t);const o=bn(this),l=os(s,i.bind(r),n);return o(),l}function ko(e,t){const n=t.split(".");return()=>{let r=e;for(let s=0;s<n.length&&r;s++)r=r[n[s]];return r}}const na=(e,t)=>t==="modelValue"||t==="model-value"?e.modelModifiers:e[`${t}Modifiers`]||e[`${ke(t)}Modifiers`]||e[`${At(t)}Modifiers`];function ra(e,t,...n){if(e.isUnmounted)return;const r=e.vnode.props||re;let s=n;const i=t.startsWith("update:"),o=i&&na(r,t.slice(7));o&&(o.trim&&(s=n.map(a=>ce(a)?a.trim():a)),o.number&&(s=n.map(Sl))),pc(e,t,s);let l,c=r[l=rr(t)]||r[l=rr(ke(t))];!c&&i&&(c=r[l=rr(At(t))]),c&&He(c,e,6,s);const f=r[l+"Once"];if(f){if(!e.emitted)e.emitted={};else if(e.emitted[l])return;e.emitted[l]=!0,He(f,e,6,s)}}function No(e,t,n=!1){const r=t.emitsCache,s=r.get(e);if(s!==void 0)return s;const i=e.emits;let o={},l=!1;if(!B(e)){const c=f=>{const a=No(f,t,!0);a&&(l=!0,fe(o,a))};!n&&t.mixins.length&&t.mixins.forEach(c),e.extends&&c(e.extends),e.mixins&&e.mixins.forEach(c)}return!i&&!l?(oe(e)&&r.set(e,null),null):(j(i)?i.forEach(c=>o[c]=null):fe(o,i),oe(e)&&r.set(e,o),o)}function Xn(e,t){return!e||!Vn(t)?!1:(t=t.slice(2).replace(/Once$/,""),X(e,t[0].toLowerCase()+t.slice(1))||X(e,At(t))||X(e,t))}function As(e){const{type:t,vnode:n,proxy:r,withProxy:s,propsOptions:[i],slots:o,attrs:l,emit:c,render:f,renderCache:a,props:u,data:h,setupState:g,ctx:v,inheritAttrs:x}=e,F=Nn(e);let I,L;try{if(n.shapeFlag&4){const O=s||r,U=O;I=qe(f.call(U,O,a,u,g,h,v)),L=l}else{const O=t;I=qe(O.length>1?O(u,{attrs:l,slots:o,emit:c}):O(u,null)),L=t.props?l:sa(l)}}catch(O){sn.length=0,Gn(O,e,1),I=Ae(ve)}let k=I;if(L&&x!==!1){const O=Object.keys(L),{shapeFlag:U}=k;O.length&&U&7&&(i&&O.some(Ur)&&(L=ia(L,i)),k=pt(k,L,!1,!0))}return n.dirs&&(k=pt(k,null,!1,!0),k.dirs=k.dirs?k.dirs.concat(n.dirs):n.dirs),n.transition&&fn(k,n.transition),I=k,Nn(F),I}const sa=e=>{let t;for(const n in e)(n==="class"||n==="style"||Vn(n))&&((t||(t={}))[n]=e[n]);return t},ia=(e,t)=>{const n={};for(const r in e)(!Ur(r)||!(r.slice(9)in t))&&(n[r]=e[r]);return n};function oa(e,t,n){const{props:r,children:s,component:i}=e,{props:o,children:l,patchFlag:c}=t,f=i.emitsOptions;if(t.dirs||t.transition)return!0;if(n&&c>=0){if(c&1024)return!0;if(c&16)return r?Os(r,o,f):!!o;if(c&8){const a=t.dynamicProps;for(let u=0;u<a.length;u++){const h=a[u];if(o[h]!==r[h]&&!Xn(f,h))return!0}}}else return(s||l)&&(!l||!l.$stable)?!0:r===o?!1:r?o?Os(r,o,f):!0:!!o;return!1}function Os(e,t,n){const r=Object.keys(t);if(r.length!==Object.keys(e).length)return!0;for(let s=0;s<r.length;s++){const i=r[s];if(t[i]!==e[i]&&!Xn(n,i))return!0}return!1}function la({vnode:e,parent:t},n){for(;t;){const r=t.subTree;if(r.suspense&&r.suspense.activeBranch===e&&(r.el=e.el),r===e)(e=t.vnode).el=n,t=t.parent;else break}}const Do=e=>e.__isSuspense;function ca(e,t){t&&t.pendingBranch?j(e)?t.effects.push(...e):t.effects.push(e):cc(e)}const Ne=Symbol.for("v-fgt"),yn=Symbol.for("v-txt"),ve=Symbol.for("v-cmt"),An=Symbol.for("v-stc"),sn=[];let Te=null;function Fo(e=!1){sn.push(Te=e?null:[])}function aa(){sn.pop(),Te=sn[sn.length-1]||null}let dn=1;function Ls(e,t=!1){dn+=e,e<0&&Te&&t&&(Te.hasOnce=!0)}function $o(e){return e.dynamicChildren=dn>0?Te||Nt:null,aa(),dn>0&&Te&&Te.push(e),e}function id(e,t,n,r,s,i){return $o(Vo(e,t,n,r,s,i,!0))}function Ho(e,t,n,r,s){return $o(Ae(e,t,n,r,s,!0))}function $n(e){return e?e.__v_isVNode===!0:!1}function St(e,t){return e.type===t.type&&e.key===t.key}const jo=({key:e})=>e??null,On=({ref:e,ref_key:t,ref_for:n})=>(typeof e=="number"&&(e=""+e),e!=null?ce(e)||me(e)||B(e)?{i:xe,r:e,k:t,f:!!n}:e:null);function Vo(e,t=null,n=null,r=0,s=null,i=e===Ne?0:1,o=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&jo(t),ref:t&&On(t),scopeId:io,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:r,dynamicProps:s,dynamicChildren:null,appContext:null,ctx:xe};return l?(ls(c,n),i&128&&e.normalize(c)):n&&(c.shapeFlag|=ce(n)?8:16),dn>0&&!o&&Te&&(c.patchFlag>0||i&6)&&c.patchFlag!==32&&Te.push(c),c}const Ae=ua;function ua(e,t=null,n=null,r=0,s=null,i=!1){if((!e||e===Ic)&&(e=ve),$n(e)){const l=pt(e,t,!0);return n&&ls(l,n),dn>0&&!i&&Te&&(l.shapeFlag&6?Te[Te.indexOf(e)]=l:Te.push(l)),l.patchFlag=-2,l}if(Ea(e)&&(e=e.__vccOpts),t){t=fa(t);let{class:l,style:c}=t;l&&!ce(l)&&(t.class=zr(l)),oe(c)&&(es(c)&&!j(c)&&(c=fe({},c)),t.style=qr(c))}const o=ce(e)?1:Do(e)?128:lo(e)?64:oe(e)?4:B(e)?2:0;return Vo(e,t,n,r,s,o,i,!0)}function fa(e){return e?es(e)||Ro(e)?fe({},e):e:null}function pt(e,t,n=!1,r=!1){const{props:s,ref:i,patchFlag:o,children:l,transition:c}=e,f=t?ha(s||{},t):s,a={__v_isVNode:!0,__v_skip:!0,type:e.type,props:f,key:f&&jo(f),ref:t&&t.ref?n&&i?j(i)?i.concat(On(t)):[i,On(t)]:On(t):i,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:l,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ne?o===-1?16:o|16:o,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:c,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&pt(e.ssContent),ssFallback:e.ssFallback&&pt(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return c&&r&&fn(a,c.clone(a)),a}function da(e=" ",t=0){return Ae(yn,null,e,t)}function od(e="",t=!1){return t?(Fo(),Ho(ve,null,e)):Ae(ve,null,e)}function qe(e){return e==null||typeof e=="boolean"?Ae(ve):j(e)?Ae(Ne,null,e.slice()):$n(e)?ut(e):Ae(yn,null,String(e))}function ut(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:pt(e)}function ls(e,t){let n=0;const{shapeFlag:r}=e;if(t==null)t=null;else if(j(t))n=16;else if(typeof t=="object")if(r&65){const s=t.default;s&&(s._c&&(s._d=!1),ls(e,s()),s._c&&(s._d=!0));return}else{n=32;const s=t._;!s&&!Ro(t)?t._ctx=xe:s===3&&xe&&(xe.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else B(t)?(t={default:t,_ctx:xe},n=32):(t=String(t),r&64?(n=16,t=[da(t)]):n=8);e.children=t,e.shapeFlag|=n}function ha(...e){const t={};for(let n=0;n<e.length;n++){const r=e[n];for(const s in r)if(s==="class")t.class!==r.class&&(t.class=zr([t.class,r.class]));else if(s==="style")t.style=qr([t.style,r.style]);else if(Vn(s)){const i=t[s],o=r[s];o&&i!==o&&!(j(i)&&i.includes(o))&&(t[s]=i?[].concat(i,o):o)}else s!==""&&(t[s]=r[s])}return t}function Ke(e,t,n,r=null){He(e,t,7,[n,r])}const pa=xo();let ga=0;function ma(e,t,n){const r=e.type,s=(t?t.appContext:e.appContext)||pa,i={uid:ga++,vnode:e,type:r,parent:t,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new Ml(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(s.provides),ids:t?t.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:To(r,s),emitsOptions:No(r,s),emit:null,emitted:null,propsDefaults:re,inheritAttrs:r.inheritAttrs,ctx:re,data:re,props:re,attrs:re,slots:re,refs:re,setupState:re,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return i.ctx={_:i},i.root=t?t.root:i,i.emit=ra.bind(null,i),e.ce&&e.ce(i),i}let de=null;const Bo=()=>de||xe;let Hn,Mr;{const e=Wn(),t=(n,r)=>{let s;return(s=e[n])||(s=e[n]=[]),s.push(r),i=>{s.length>1?s.forEach(o=>o(i)):s[0](i)}};Hn=t("__VUE_INSTANCE_SETTERS__",n=>de=n),Mr=t("__VUE_SSR_SETTERS__",n=>hn=n)}const bn=e=>{const t=de;return Hn(e),e.scope.on(),()=>{e.scope.off(),Hn(t)}},Is=()=>{de&&de.scope.off(),Hn(null)};function Uo(e){return e.vnode.shapeFlag&4}let hn=!1;function _a(e,t=!1,n=!1){t&&Mr(t);const{props:r,children:s}=e.vnode,i=Uo(e);Bc(e,r,i,t),qc(e,s,n);const o=i?ya(e,t):void 0;return t&&Mr(!1),o}function ya(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,kc);const{setup:r}=n;if(r){_t();const s=e.setupContext=r.length>1?va(e):null,i=bn(e),o=_n(r,e,0,[e.props,s]),l=Pi(o);if(yt(),i(),(l||e.sp)&&!tn(e)&&mo(e),l){if(o.then(Is,Is),t)return o.then(c=>{Ms(e,c)}).catch(c=>{Gn(c,e,0)});e.asyncDep=o}else Ms(e,o)}else Ko(e)}function Ms(e,t,n){B(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:oe(t)&&(e.devtoolsRawSetupState=t,e.setupState=Yi(t)),Ko(e)}function Ko(e,t,n){const r=e.type;e.render||(e.render=r.render||Ge);{const s=bn(e);_t();try{Nc(e)}finally{yt(),s()}}}const ba={get(e,t){return pe(e,"get",""),e[t]}};function va(e){const t=n=>{e.exposed=n||{}};return{attrs:new Proxy(e.attrs,ba),slots:e.slots,emit:e.emit,expose:t}}function Zn(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy(Yi(zn(e.exposed)),{get(t,n){if(n in t)return t[n];if(n in nn)return nn[n](e)},has(t,n){return n in t||n in nn}})):e.proxy}function wa(e,t=!0){return B(e)?e.displayName||e.name:e.name||t&&e.__name}function Ea(e){return B(e)&&"__vccOpts"in e}const De=(e,t)=>rc(e,t,hn);function cs(e,t,n){const r=arguments.length;return r===2?oe(t)&&!j(t)?$n(t)?Ae(e,null,[t]):Ae(e,t):Ae(e,null,t):(r>3?n=Array.prototype.slice.call(arguments,2):r===3&&$n(n)&&(n=[n]),Ae(e,t,n))}const ks="3.5.13";/**
* @vue/runtime-dom v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let kr;const Ns=typeof window<"u"&&window.trustedTypes;if(Ns)try{kr=Ns.createPolicy("vue",{createHTML:e=>e})}catch{}const Wo=kr?e=>kr.createHTML(e):e=>e,xa="http://www.w3.org/2000/svg",Sa="http://www.w3.org/1998/Math/MathML",et=typeof document<"u"?document:null,Ds=et&&et.createElement("template"),Ca={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,r)=>{const s=t==="svg"?et.createElementNS(xa,e):t==="mathml"?et.createElementNS(Sa,e):n?et.createElement(e,{is:n}):et.createElement(e);return e==="select"&&r&&r.multiple!=null&&s.setAttribute("multiple",r.multiple),s},createText:e=>et.createTextNode(e),createComment:e=>et.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>et.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,r,s,i){const o=n?n.previousSibling:t.lastChild;if(s&&(s===i||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),!(s===i||!(s=s.nextSibling)););else{Ds.innerHTML=Wo(r==="svg"?`<svg>${e}</svg>`:r==="mathml"?`<math>${e}</math>`:e);const l=Ds.content;if(r==="svg"||r==="mathml"){const c=l.firstChild;for(;c.firstChild;)l.appendChild(c.firstChild);l.removeChild(c)}t.insertBefore(l,n)}return[o?o.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},ot="transition",qt="animation",pn=Symbol("_vtc"),qo={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Ra=fe({},uo,qo),Pa=e=>(e.displayName="Transition",e.props=Ra,e),ld=Pa((e,{slots:t})=>cs(bc,Ta(e),t)),wt=(e,t=[])=>{j(e)?e.forEach(n=>n(...t)):e&&e(...t)},Fs=e=>e?j(e)?e.some(t=>t.length>1):e.length>1:!1;function Ta(e){const t={};for(const M in e)M in qo||(t[M]=e[M]);if(e.css===!1)return t;const{name:n="v",type:r,duration:s,enterFromClass:i=`${n}-enter-from`,enterActiveClass:o=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:c=i,appearActiveClass:f=o,appearToClass:a=l,leaveFromClass:u=`${n}-leave-from`,leaveActiveClass:h=`${n}-leave-active`,leaveToClass:g=`${n}-leave-to`}=e,v=Aa(s),x=v&&v[0],F=v&&v[1],{onBeforeEnter:I,onEnter:L,onEnterCancelled:k,onLeave:O,onLeaveCancelled:U,onBeforeAppear:W=I,onAppear:q=L,onAppearCancelled:le=k}=t,D=(M,J,ue,Se)=>{M._enterCancelled=Se,Et(M,J?a:l),Et(M,J?f:o),ue&&ue()},K=(M,J)=>{M._isLeaving=!1,Et(M,u),Et(M,g),Et(M,h),J&&J()},Z=M=>(J,ue)=>{const Se=M?q:L,ae=()=>D(J,M,ue);wt(Se,[J,ae]),$s(()=>{Et(J,M?c:i),Xe(J,M?a:l),Fs(Se)||Hs(J,r,x,ae)})};return fe(t,{onBeforeEnter(M){wt(I,[M]),Xe(M,i),Xe(M,o)},onBeforeAppear(M){wt(W,[M]),Xe(M,c),Xe(M,f)},onEnter:Z(!1),onAppear:Z(!0),onLeave(M,J){M._isLeaving=!0;const ue=()=>K(M,J);Xe(M,u),M._enterCancelled?(Xe(M,h),Bs()):(Bs(),Xe(M,h)),$s(()=>{M._isLeaving&&(Et(M,u),Xe(M,g),Fs(O)||Hs(M,r,F,ue))}),wt(O,[M,ue])},onEnterCancelled(M){D(M,!1,void 0,!0),wt(k,[M])},onAppearCancelled(M){D(M,!0,void 0,!0),wt(le,[M])},onLeaveCancelled(M){K(M),wt(U,[M])}})}function Aa(e){if(e==null)return null;if(oe(e))return[dr(e.enter),dr(e.leave)];{const t=dr(e);return[t,t]}}function dr(e){return Cl(e)}function Xe(e,t){t.split(/\s+/).forEach(n=>n&&e.classList.add(n)),(e[pn]||(e[pn]=new Set)).add(t)}function Et(e,t){t.split(/\s+/).forEach(r=>r&&e.classList.remove(r));const n=e[pn];n&&(n.delete(t),n.size||(e[pn]=void 0))}function $s(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let Oa=0;function Hs(e,t,n,r){const s=e._endId=++Oa,i=()=>{s===e._endId&&r()};if(n!=null)return setTimeout(i,n);const{type:o,timeout:l,propCount:c}=La(e,t);if(!o)return r();const f=o+"end";let a=0;const u=()=>{e.removeEventListener(f,h),i()},h=g=>{g.target===e&&++a>=c&&u()};setTimeout(()=>{a<c&&u()},l+1),e.addEventListener(f,h)}function La(e,t){const n=window.getComputedStyle(e),r=v=>(n[v]||"").split(", "),s=r(`${ot}Delay`),i=r(`${ot}Duration`),o=js(s,i),l=r(`${qt}Delay`),c=r(`${qt}Duration`),f=js(l,c);let a=null,u=0,h=0;t===ot?o>0&&(a=ot,u=o,h=i.length):t===qt?f>0&&(a=qt,u=f,h=c.length):(u=Math.max(o,f),a=u>0?o>f?ot:qt:null,h=a?a===ot?i.length:c.length:0);const g=a===ot&&/\b(transform|all)(,|$)/.test(r(`${ot}Property`).toString());return{type:a,timeout:u,propCount:h,hasTransform:g}}function js(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((n,r)=>Vs(n)+Vs(e[r])))}function Vs(e){return e==="auto"?0:Number(e.slice(0,-1).replace(",","."))*1e3}function Bs(){return document.body.offsetHeight}function Ia(e,t,n){const r=e[pn];r&&(t=(t?[t,...r]:[...r]).join(" ")),t==null?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}const Us=Symbol("_vod"),Ma=Symbol("_vsh"),ka=Symbol(""),Na=/(^|;)\s*display\s*:/;function Da(e,t,n){const r=e.style,s=ce(n);let i=!1;if(n&&!s){if(t)if(ce(t))for(const o of t.split(";")){const l=o.slice(0,o.indexOf(":")).trim();n[l]==null&&Ln(r,l,"")}else for(const o in t)n[o]==null&&Ln(r,o,"");for(const o in n)o==="display"&&(i=!0),Ln(r,o,n[o])}else if(s){if(t!==n){const o=r[ka];o&&(n+=";"+o),r.cssText=n,i=Na.test(n)}}else t&&e.removeAttribute("style");Us in e&&(e[Us]=i?r.display:"",e[Ma]&&(r.display="none"))}const Ks=/\s*!important$/;function Ln(e,t,n){if(j(n))n.forEach(r=>Ln(e,t,r));else if(n==null&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const r=Fa(e,t);Ks.test(n)?e.setProperty(At(r),n.replace(Ks,""),"important"):e[r]=n}}const Ws=["Webkit","Moz","ms"],hr={};function Fa(e,t){const n=hr[t];if(n)return n;let r=ke(t);if(r!=="filter"&&r in e)return hr[t]=r;r=Kn(r);for(let s=0;s<Ws.length;s++){const i=Ws[s]+r;if(i in e)return hr[t]=i}return t}const qs="http://www.w3.org/1999/xlink";function zs(e,t,n,r,s,i=Ll(t)){r&&t.startsWith("xlink:")?n==null?e.removeAttributeNS(qs,t.slice(6,t.length)):e.setAttributeNS(qs,t,n):n==null||i&&!Oi(n)?e.removeAttribute(t):e.setAttribute(t,i?"":mt(n)?String(n):n)}function Gs(e,t,n,r,s){if(t==="innerHTML"||t==="textContent"){n!=null&&(e[t]=t==="innerHTML"?Wo(n):n);return}const i=e.tagName;if(t==="value"&&i!=="PROGRESS"&&!i.includes("-")){const l=i==="OPTION"?e.getAttribute("value")||"":e.value,c=n==null?e.type==="checkbox"?"on":"":String(n);(l!==c||!("_value"in e))&&(e.value=c),n==null&&e.removeAttribute(t),e._value=n;return}let o=!1;if(n===""||n==null){const l=typeof e[t];l==="boolean"?n=Oi(n):n==null&&l==="string"?(n="",o=!0):l==="number"&&(n=0,o=!0)}try{e[t]=n}catch{}o&&e.removeAttribute(s||t)}function $a(e,t,n,r){e.addEventListener(t,n,r)}function Ha(e,t,n,r){e.removeEventListener(t,n,r)}const Qs=Symbol("_vei");function ja(e,t,n,r,s=null){const i=e[Qs]||(e[Qs]={}),o=i[t];if(r&&o)o.value=r;else{const[l,c]=Va(t);if(r){const f=i[t]=Ka(r,s);$a(e,l,f,c)}else o&&(Ha(e,l,o,c),i[t]=void 0)}}const Js=/(?:Once|Passive|Capture)$/;function Va(e){let t;if(Js.test(e)){t={};let r;for(;r=e.match(Js);)e=e.slice(0,e.length-r[0].length),t[r[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):At(e.slice(2)),t]}let pr=0;const Ba=Promise.resolve(),Ua=()=>pr||(Ba.then(()=>pr=0),pr=Date.now());function Ka(e,t){const n=r=>{if(!r._vts)r._vts=Date.now();else if(r._vts<=n.attached)return;He(Wa(r,n.value),t,5,[r])};return n.value=e,n.attached=Ua(),n}function Wa(e,t){if(j(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(r=>s=>!s._stopped&&r&&r(s))}else return t}const Ys=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,qa=(e,t,n,r,s,i)=>{const o=s==="svg";t==="class"?Ia(e,r,o):t==="style"?Da(e,n,r):Vn(t)?Ur(t)||ja(e,t,n,r,i):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):za(e,t,r,o))?(Gs(e,t,r),!e.tagName.includes("-")&&(t==="value"||t==="checked"||t==="selected")&&zs(e,t,r,o,i,t!=="value")):e._isVueCE&&(/[A-Z]/.test(t)||!ce(r))?Gs(e,ke(t),r,i,t):(t==="true-value"?e._trueValue=r:t==="false-value"&&(e._falseValue=r),zs(e,t,r,o))};function za(e,t,n,r){if(r)return!!(t==="innerHTML"||t==="textContent"||t in e&&Ys(t)&&B(n));if(t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA")return!1;if(t==="width"||t==="height"){const s=e.tagName;if(s==="IMG"||s==="VIDEO"||s==="CANVAS"||s==="SOURCE")return!1}return Ys(t)&&ce(n)?!1:t in e}const Ga=fe({patchProp:qa},Ca);let Xs;function Qa(){return Xs||(Xs=Gc(Ga))}const Ja=(...e)=>{const t=Qa().createApp(...e),{mount:n}=t;return t.mount=r=>{const s=Xa(r);if(!s)return;const i=t._component;!B(i)&&!i.render&&!i.template&&(i.template=s.innerHTML),s.nodeType===1&&(s.textContent="");const o=n(s,!1,Ya(s));return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),o},t};function Ya(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function Xa(e){return ce(e)?document.querySelector(e):e}function as(e,t,n,r){return Object.defineProperty(e,t,{get:n,set:r,enumerable:!0}),e}const Tt=Qi(!1);let Nr;function Za(e,t){const n=/(edg|edge|edga|edgios)\/([\w.]+)/.exec(e)||/(opr)[\/]([\w.]+)/.exec(e)||/(vivaldi)[\/]([\w.]+)/.exec(e)||/(chrome|crios)[\/]([\w.]+)/.exec(e)||/(version)(applewebkit)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(e)||/(webkit)[\/]([\w.]+).*(version)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(e)||/(firefox|fxios)[\/]([\w.]+)/.exec(e)||/(webkit)[\/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[\/]([\w.]+)/.exec(e)||[];return{browser:n[5]||n[3]||n[1]||"",version:n[4]||n[2]||"0",platform:t[0]||""}}function eu(e){return/(ipad)/.exec(e)||/(ipod)/.exec(e)||/(windows phone)/.exec(e)||/(iphone)/.exec(e)||/(kindle)/.exec(e)||/(silk)/.exec(e)||/(android)/.exec(e)||/(win)/.exec(e)||/(mac)/.exec(e)||/(linux)/.exec(e)||/(cros)/.exec(e)||/(playbook)/.exec(e)||/(bb)/.exec(e)||/(blackberry)/.exec(e)||[]}const zo="ontouchstart"in window||window.navigator.maxTouchPoints>0;function tu(e){const t=e.toLowerCase(),n=eu(t),r=Za(t,n),s={mobile:!1,desktop:!1,cordova:!1,capacitor:!1,nativeMobile:!1,electron:!1,bex:!1,linux:!1,mac:!1,win:!1,cros:!1,chrome:!1,firefox:!1,opera:!1,safari:!1,vivaldi:!1,edge:!1,edgeChromium:!1,ie:!1,webkit:!1,android:!1,ios:!1,ipad:!1,iphone:!1,ipod:!1,kindle:!1,winphone:!1,blackberry:!1,playbook:!1,silk:!1};r.browser&&(s[r.browser]=!0,s.version=r.version,s.versionNumber=parseInt(r.version,10)),r.platform&&(s[r.platform]=!0);const i=s.android||s.ios||s.bb||s.blackberry||s.ipad||s.iphone||s.ipod||s.kindle||s.playbook||s.silk||s["windows phone"];if(i===!0||t.indexOf("mobile")!==-1?s.mobile=!0:s.desktop=!0,s["windows phone"]&&(s.winphone=!0,delete s["windows phone"]),s.edga||s.edgios||s.edg?(s.edge=!0,r.browser="edge"):s.crios?(s.chrome=!0,r.browser="chrome"):s.fxios&&(s.firefox=!0,r.browser="firefox"),(s.ipod||s.ipad||s.iphone)&&(s.ios=!0),s.vivaldi&&(r.browser="vivaldi",s.vivaldi=!0),(s.chrome||s.opr||s.safari||s.vivaldi||s.mobile===!0&&s.ios!==!0&&i!==!0)&&(s.webkit=!0),s.opr&&(r.browser="opera",s.opera=!0),s.safari&&(s.blackberry||s.bb?(r.browser="blackberry",s.blackberry=!0):s.playbook?(r.browser="playbook",s.playbook=!0):s.android?(r.browser="android",s.android=!0):s.kindle?(r.browser="kindle",s.kindle=!0):s.silk&&(r.browser="silk",s.silk=!0)),s.name=r.browser,s.platform=r.platform,t.indexOf("electron")!==-1)s.electron=!0;else if(document.location.href.indexOf("-extension://")!==-1)s.bex=!0;else{if(window.Capacitor!==void 0?(s.capacitor=!0,s.nativeMobile=!0,s.nativeMobileWrapper="capacitor"):(window._cordovaNative!==void 0||window.cordova!==void 0)&&(s.cordova=!0,s.nativeMobile=!0,s.nativeMobileWrapper="cordova"),Tt.value===!0&&(Nr={is:{...s}}),zo===!0&&s.mac===!0&&(s.desktop===!0&&s.safari===!0||s.nativeMobile===!0&&s.android!==!0&&s.ios!==!0&&s.ipad!==!0)){delete s.mac,delete s.desktop;const o=Math.min(window.innerHeight,window.innerWidth)>414?"ipad":"iphone";Object.assign(s,{mobile:!0,ios:!0,platform:o,[o]:!0})}s.mobile!==!0&&window.navigator.userAgentData&&window.navigator.userAgentData.mobile&&(delete s.desktop,s.mobile=!0)}return s}const Zs=navigator.userAgent||navigator.vendor||window.opera,nu={has:{touch:!1,webStorage:!1},within:{iframe:!1}},Qe={userAgent:Zs,is:tu(Zs),has:{touch:zo},within:{iframe:window.self!==window.top}},Dr={install(e){const{$q:t}=e;Tt.value===!0?(e.onSSRHydrated.push(()=>{Object.assign(t.platform,Qe),Tt.value=!1}),t.platform=Ut(this)):t.platform=this}};{let e;as(Qe.has,"webStorage",()=>{if(e!==void 0)return e;try{if(window.localStorage)return e=!0,!0}catch{}return e=!1,!1}),Object.assign(Dr,Qe),Tt.value===!0&&(Object.assign(Dr,Nr,nu),Nr=null)}function cd(e){return zn(rs(e))}function ad(e){return zn(e)}const er=(e,t)=>{const n=Ut(e);for(const r in e)as(t,r,()=>n[r],s=>{n[r]=s});return t},jt={hasPassive:!1,passiveCapture:!0,notPassiveCapture:!0};try{const e=Object.defineProperty({},"passive",{get(){Object.assign(jt,{hasPassive:!0,passive:{passive:!0},notPassive:{passive:!1},passiveCapture:{passive:!0,capture:!0},notPassiveCapture:{passive:!1,capture:!0}})}});window.addEventListener("qtest",null,e),window.removeEventListener("qtest",null,e)}catch{}function gn(){}function ud(e){return e.button===0}function fd(e){return e.touches&&e.touches[0]?e=e.touches[0]:e.changedTouches&&e.changedTouches[0]?e=e.changedTouches[0]:e.targetTouches&&e.targetTouches[0]&&(e=e.targetTouches[0]),{top:e.clientY,left:e.clientX}}function dd(e){if(e.path)return e.path;if(e.composedPath)return e.composedPath();const t=[];let n=e.target;for(;n;){if(t.push(n),n.tagName==="HTML")return t.push(document),t.push(window),t;n=n.parentElement}}function hd(e){e.stopPropagation()}function ei(e){e.cancelable!==!1&&e.preventDefault()}function pd(e){e.cancelable!==!1&&e.preventDefault(),e.stopPropagation()}function gd(e,t){if(e===void 0||t===!0&&e.__dragPrevented===!0)return;const n=t===!0?r=>{r.__dragPrevented=!0,r.addEventListener("dragstart",ei,jt.notPassiveCapture)}:r=>{delete r.__dragPrevented,r.removeEventListener("dragstart",ei,jt.notPassiveCapture)};e.querySelectorAll("a, img").forEach(n)}function md(e,t,n){const r=`__q_${t}_evt`;e[r]=e[r]!==void 0?e[r].concat(n):n,n.forEach(s=>{s[0].addEventListener(s[1],e[s[2]],jt[s[3]])})}function _d(e,t){const n=`__q_${t}_evt`;e[n]!==void 0&&(e[n].forEach(r=>{r[0].removeEventListener(r[1],e[r[2]],jt[r[3]])}),e[n]=void 0)}function ru(e,t=250,n){let r=null;function s(){const i=arguments,o=()=>{r=null,e.apply(this,i)};r!==null&&clearTimeout(r),r=setTimeout(o,t)}return s.cancel=()=>{r!==null&&clearTimeout(r)},s}const gr=["sm","md","lg","xl"],{passive:ti}=jt,su=er({width:0,height:0,name:"xs",sizes:{sm:600,md:1024,lg:1440,xl:1920},lt:{sm:!0,md:!0,lg:!0,xl:!0},gt:{xs:!1,sm:!1,md:!1,lg:!1},xs:!0,sm:!1,md:!1,lg:!1,xl:!1},{setSizes:gn,setDebounce:gn,install({$q:e,onSSRHydrated:t}){if(e.screen=this,this.__installed===!0){e.config.screen!==void 0&&(e.config.screen.bodyClasses===!1?document.body.classList.remove(`screen--${this.name}`):this.__update(!0));return}const{visualViewport:n}=window,r=n||window,s=document.scrollingElement||document.documentElement,i=n===void 0||Qe.is.mobile===!0?()=>[Math.max(window.innerWidth,s.clientWidth),Math.max(window.innerHeight,s.clientHeight)]:()=>[n.width*n.scale+window.innerWidth-s.clientWidth,n.height*n.scale+window.innerHeight-s.clientHeight],o=e.config.screen!==void 0&&e.config.screen.bodyClasses===!0;this.__update=u=>{const[h,g]=i();if(g!==this.height&&(this.height=g),h!==this.width)this.width=h;else if(u!==!0)return;let v=this.sizes;this.gt.xs=h>=v.sm,this.gt.sm=h>=v.md,this.gt.md=h>=v.lg,this.gt.lg=h>=v.xl,this.lt.sm=h<v.sm,this.lt.md=h<v.md,this.lt.lg=h<v.lg,this.lt.xl=h<v.xl,this.xs=this.lt.sm,this.sm=this.gt.xs===!0&&this.lt.md===!0,this.md=this.gt.sm===!0&&this.lt.lg===!0,this.lg=this.gt.md===!0&&this.lt.xl===!0,this.xl=this.gt.lg,v=this.xs===!0&&"xs"||this.sm===!0&&"sm"||this.md===!0&&"md"||this.lg===!0&&"lg"||"xl",v!==this.name&&(o===!0&&(document.body.classList.remove(`screen--${this.name}`),document.body.classList.add(`screen--${v}`)),this.name=v)};let l,c={},f=16;this.setSizes=u=>{gr.forEach(h=>{u[h]!==void 0&&(c[h]=u[h])})},this.setDebounce=u=>{f=u};const a=()=>{const u=getComputedStyle(document.body);u.getPropertyValue("--q-size-sm")&&gr.forEach(h=>{this.sizes[h]=parseInt(u.getPropertyValue(`--q-size-${h}`),10)}),this.setSizes=h=>{gr.forEach(g=>{h[g]&&(this.sizes[g]=h[g])}),this.__update(!0)},this.setDebounce=h=>{l!==void 0&&r.removeEventListener("resize",l,ti),l=h>0?ru(this.__update,h):this.__update,r.addEventListener("resize",l,ti)},this.setDebounce(f),Object.keys(c).length!==0?(this.setSizes(c),c=void 0):this.__update(),o===!0&&this.name==="xs"&&document.body.classList.add("screen--xs")};Tt.value===!0?t.push(a):a()}}),he=er({isActive:!1,mode:!1},{__media:void 0,set(e){he.mode=e,e==="auto"?(he.__media===void 0&&(he.__media=window.matchMedia("(prefers-color-scheme: dark)"),he.__updateMedia=()=>{he.set("auto")},he.__media.addListener(he.__updateMedia)),e=he.__media.matches):he.__media!==void 0&&(he.__media.removeListener(he.__updateMedia),he.__media=void 0),he.isActive=e===!0,document.body.classList.remove(`body--${e===!0?"light":"dark"}`),document.body.classList.add(`body--${e===!0?"dark":"light"}`)},toggle(){he.set(he.isActive===!1)},install({$q:e,ssrContext:t}){const{dark:n}=e.config;e.dark=this,this.__installed!==!0&&this.set(n!==void 0?n:!1)}});function iu(e,t,n=document.body){if(typeof e!="string")throw new TypeError("Expected a string as propName");if(typeof t!="string")throw new TypeError("Expected a string as value");if(!(n instanceof Element))throw new TypeError("Expected a DOM element");n.style.setProperty(`--q-${e}`,t)}let Go=!1;function ou(e){Go=e.isComposing===!0}function lu(e){return Go===!0||e!==Object(e)||e.isComposing===!0||e.qKeyEvent===!0}function yd(e,t){return lu(e)===!0?!1:[].concat(t).includes(e.keyCode)}function Qo(e){if(e.ios===!0)return"ios";if(e.android===!0)return"android"}function cu({is:e,has:t,within:n},r){const s=[e.desktop===!0?"desktop":"mobile",`${t.touch===!1?"no-":""}touch`];if(e.mobile===!0){const i=Qo(e);i!==void 0&&s.push("platform-"+i)}if(e.nativeMobile===!0){const i=e.nativeMobileWrapper;s.push(i),s.push("native-mobile"),e.ios===!0&&(r[i]===void 0||r[i].iosStatusBarPadding!==!1)&&s.push("q-ios-padding")}else e.electron===!0?s.push("electron"):e.bex===!0&&s.push("bex");return n.iframe===!0&&s.push("within-iframe"),s}function au(){const{is:e}=Qe,t=document.body.className,n=new Set(t.replace(/ {2}/g," ").split(" "));if(e.nativeMobile!==!0&&e.electron!==!0&&e.bex!==!0){if(e.desktop===!0)n.delete("mobile"),n.delete("platform-ios"),n.delete("platform-android"),n.add("desktop");else if(e.mobile===!0){n.delete("desktop"),n.add("mobile"),n.delete("platform-ios"),n.delete("platform-android");const s=Qo(e);s!==void 0&&n.add(`platform-${s}`)}}Qe.has.touch===!0&&(n.delete("no-touch"),n.add("touch")),Qe.within.iframe===!0&&n.add("within-iframe");const r=Array.from(n).join(" ");t!==r&&(document.body.className=r)}function uu(e){for(const t in e)iu(t,e[t])}const fu={install(e){if(this.__installed!==!0){if(Tt.value===!0)au();else{const{$q:t}=e;t.config.brand!==void 0&&uu(t.config.brand);const n=cu(Qe,t.config);document.body.classList.add.apply(document.body.classList,n)}Qe.is.ios===!0&&document.body.addEventListener("touchstart",gn),window.addEventListener("keydown",ou,!0)}}},Jo=()=>!0;function du(e){return typeof e=="string"&&e!==""&&e!=="/"&&e!=="#/"}function hu(e){return e.startsWith("#")===!0&&(e=e.substring(1)),e.startsWith("/")===!1&&(e="/"+e),e.endsWith("/")===!0&&(e=e.substring(0,e.length-1)),"#"+e}function pu(e){if(e.backButtonExit===!1)return()=>!1;if(e.backButtonExit==="*")return Jo;const t=["#/"];return Array.isArray(e.backButtonExit)===!0&&t.push(...e.backButtonExit.filter(du).map(hu)),()=>t.includes(window.location.hash)}const gu={__history:[],add:gn,remove:gn,install({$q:e}){if(this.__installed===!0)return;const{cordova:t,capacitor:n}=Qe.is;if(t!==!0&&n!==!0)return;const r=e.config[t===!0?"cordova":"capacitor"];if(r!==void 0&&r.backButton===!1||n===!0&&(window.Capacitor===void 0||window.Capacitor.Plugins.App===void 0))return;this.add=o=>{o.condition===void 0&&(o.condition=Jo),this.__history.push(o)},this.remove=o=>{const l=this.__history.indexOf(o);l>=0&&this.__history.splice(l,1)};const s=pu(Object.assign({backButtonExit:!0},r)),i=()=>{if(this.__history.length){const o=this.__history[this.__history.length-1];o.condition()===!0&&(this.__history.pop(),o.handler())}else s()===!0?navigator.app.exitApp():window.history.back()};t===!0?document.addEventListener("deviceready",()=>{document.addEventListener("backbutton",i,!1)}):window.Capacitor.Plugins.App.addListener("backButton",i)}},ni={isoName:"en-US",nativeName:"English (US)",label:{clear:"Clear",ok:"OK",cancel:"Cancel",close:"Close",set:"Set",select:"Select",reset:"Reset",remove:"Remove",update:"Update",create:"Create",search:"Search",filter:"Filter",refresh:"Refresh",expand:e=>e?`Expand "${e}"`:"Expand",collapse:e=>e?`Collapse "${e}"`:"Collapse"},date:{days:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),daysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),firstDayOfWeek:0,format24h:!1,pluralDay:"days"},table:{noData:"No data available",noResults:"No matching records found",loading:"Loading...",selectedRecords:e=>e===1?"1 record selected.":(e===0?"No":e)+" records selected.",recordsPerPage:"Records per page:",allRows:"All",pagination:(e,t,n)=>e+"-"+t+" of "+n,columns:"Columns"},editor:{url:"URL",bold:"Bold",italic:"Italic",strikethrough:"Strikethrough",underline:"Underline",unorderedList:"Unordered List",orderedList:"Ordered List",subscript:"Subscript",superscript:"Superscript",hyperlink:"Hyperlink",toggleFullscreen:"Toggle Fullscreen",quote:"Quote",left:"Left align",center:"Center align",right:"Right align",justify:"Justify align",print:"Print",outdent:"Decrease indentation",indent:"Increase indentation",removeFormat:"Remove formatting",formatting:"Formatting",fontSize:"Font Size",align:"Align",hr:"Insert Horizontal Rule",undo:"Undo",redo:"Redo",heading1:"Heading 1",heading2:"Heading 2",heading3:"Heading 3",heading4:"Heading 4",heading5:"Heading 5",heading6:"Heading 6",paragraph:"Paragraph",code:"Code",size1:"Very small",size2:"A bit small",size3:"Normal",size4:"Medium-large",size5:"Big",size6:"Very big",size7:"Maximum",defaultFont:"Default Font",viewSource:"View Source"},tree:{noNodes:"No nodes available",noResults:"No matching nodes found"}};function ri(){const e=Array.isArray(navigator.languages)===!0&&navigator.languages.length!==0?navigator.languages[0]:navigator.language;if(typeof e=="string")return e.split(/[-_]/).map((t,n)=>n===0?t.toLowerCase():n>1||t.length<4?t.toUpperCase():t[0].toUpperCase()+t.slice(1).toLowerCase()).join("-")}const ft=er({__qLang:{}},{getLocale:ri,set(e=ni,t){const n={...e,rtl:e.rtl===!0,getLocale:ri};{if(n.set=ft.set,ft.__langConfig===void 0||ft.__langConfig.noHtmlAttrs!==!0){const r=document.documentElement;r.setAttribute("dir",n.rtl===!0?"rtl":"ltr"),r.setAttribute("lang",n.isoName)}Object.assign(ft.__qLang,n)}},install({$q:e,lang:t,ssrContext:n}){e.lang=ft.__qLang,ft.__langConfig=e.config.lang,this.__installed===!0?t!==void 0&&this.set(t):(this.props=new Proxy(this.__qLang,{get(){return Reflect.get(...arguments)},ownKeys(r){return Reflect.ownKeys(r).filter(s=>s!=="set"&&s!=="getLocale")}}),this.set(t||ni))}}),mu={name:"material-icons",type:{positive:"check_circle",negative:"warning",info:"info",warning:"priority_high"},arrow:{up:"arrow_upward",right:"arrow_forward",down:"arrow_downward",left:"arrow_back",dropdown:"arrow_drop_down"},chevron:{left:"chevron_left",right:"chevron_right"},colorPicker:{spectrum:"gradient",tune:"tune",palette:"style"},pullToRefresh:{icon:"refresh"},carousel:{left:"chevron_left",right:"chevron_right",up:"keyboard_arrow_up",down:"keyboard_arrow_down",navigationIcon:"lens"},chip:{remove:"cancel",selected:"check"},datetime:{arrowLeft:"chevron_left",arrowRight:"chevron_right",now:"access_time",today:"today"},editor:{bold:"format_bold",italic:"format_italic",strikethrough:"strikethrough_s",underline:"format_underlined",unorderedList:"format_list_bulleted",orderedList:"format_list_numbered",subscript:"vertical_align_bottom",superscript:"vertical_align_top",hyperlink:"link",toggleFullscreen:"fullscreen",quote:"format_quote",left:"format_align_left",center:"format_align_center",right:"format_align_right",justify:"format_align_justify",print:"print",outdent:"format_indent_decrease",indent:"format_indent_increase",removeFormat:"format_clear",formatting:"text_format",fontSize:"format_size",align:"format_align_left",hr:"remove",undo:"undo",redo:"redo",heading:"format_size",code:"code",size:"format_size",font:"font_download",viewSource:"code"},expansionItem:{icon:"keyboard_arrow_down",denseIcon:"arrow_drop_down"},fab:{icon:"add",activeIcon:"close"},field:{clear:"cancel",error:"error"},pagination:{first:"first_page",prev:"keyboard_arrow_left",next:"keyboard_arrow_right",last:"last_page"},rating:{icon:"grade"},stepper:{done:"check",active:"edit",error:"warning"},tabs:{left:"chevron_left",right:"chevron_right",up:"keyboard_arrow_up",down:"keyboard_arrow_down"},table:{arrowUp:"arrow_upward",warning:"warning",firstPage:"first_page",prevPage:"chevron_left",nextPage:"chevron_right",lastPage:"last_page"},tree:{icon:"play_arrow"},uploader:{done:"done",clear:"clear",add:"add_box",upload:"cloud_upload",removeQueue:"clear_all",removeUploaded:"done_all"}},jn=er({iconMapFn:null,__qIconSet:{}},{set(e,t){const n={...e};n.set=jn.set,Object.assign(jn.__qIconSet,n)},install({$q:e,iconSet:t,ssrContext:n}){e.config.iconMapFn!==void 0&&(this.iconMapFn=e.config.iconMapFn),e.iconSet=this.__qIconSet,as(e,"iconMapFn",()=>this.iconMapFn,r=>{this.iconMapFn=r}),this.__installed===!0?t!==void 0&&this.set(t):(this.props=new Proxy(this.__qIconSet,{get(){return Reflect.get(...arguments)},ownKeys(r){return Reflect.ownKeys(r).filter(s=>s!=="set")}}),this.set(t||mu))}}),_u="_q_",bd="_q_l_",vd="_q_pc_";function wd(){}const si={};let Yo=!1;function yu(){Yo=!0}function ii(e){return e!==null&&typeof e=="object"&&Array.isArray(e)!==!0}const oi=[Dr,fu,he,su,gu,ft,jn];function li(e,t){t.forEach(n=>{n.install(e),n.__installed=!0})}function bu(e,t,n){e.config.globalProperties.$q=n.$q,e.provide(_u,n.$q),li(n,oi),t.components!==void 0&&Object.values(t.components).forEach(r=>{ii(r)===!0&&r.name!==void 0&&e.component(r.name,r)}),t.directives!==void 0&&Object.values(t.directives).forEach(r=>{ii(r)===!0&&r.name!==void 0&&e.directive(r.name,r)}),t.plugins!==void 0&&li(n,Object.values(t.plugins).filter(r=>typeof r.install=="function"&&oi.includes(r)===!1)),Tt.value===!0&&(n.$q.onSSRHydrated=()=>{n.onSSRHydrated.forEach(r=>{r()}),n.$q.onSSRHydrated=()=>{}})}const vu=function(e,t={}){const n={version:"2.17.7"};Yo===!1?(t.config!==void 0&&Object.assign(si,t.config),n.config={...si},yu()):n.config=t.config||{},bu(e,t,{parentApp:e,$q:n,lang:t.lang,iconSet:t.iconSet,onSSRHydrated:[]})},wu={name:"Quasar",version:"2.17.7",install:vu,lang:ft,iconSet:jn},Eu=(e,t)=>{const n=e.__vccOpts||e;for(const[r,s]of t)n[r]=s;return n},xu={__name:"App",setup(e,{expose:t}){t();const n={};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}};function Su(e,t,n,r,s,i){const o=Lc("router-view");return Fo(),Ho(o)}const Cu=Eu(xu,[["render",Su],["__file","App.vue"]]),Ru=e=>e,Pu=Ru;function Tu(){return Xo().__VUE_DEVTOOLS_GLOBAL_HOOK__}function Xo(){return typeof navigator<"u"&&typeof window<"u"?window:typeof globalThis<"u"?globalThis:{}}const Au=typeof Proxy=="function",Ou="devtools-plugin:setup",Lu="plugin:settings:set";let Mt,Fr;function Iu(){var e;return Mt!==void 0||(typeof window<"u"&&window.performance?(Mt=!0,Fr=window.performance):typeof globalThis<"u"&&(!((e=globalThis.perf_hooks)===null||e===void 0)&&e.performance)?(Mt=!0,Fr=globalThis.perf_hooks.performance):Mt=!1),Mt}function Mu(){return Iu()?Fr.now():Date.now()}class ku{constructor(t,n){this.target=null,this.targetQueue=[],this.onQueue=[],this.plugin=t,this.hook=n;const r={};if(t.settings)for(const o in t.settings){const l=t.settings[o];r[o]=l.defaultValue}const s=`__vue-devtools-plugin-settings__${t.id}`;let i=Object.assign({},r);try{const o=localStorage.getItem(s),l=JSON.parse(o);Object.assign(i,l)}catch{}this.fallbacks={getSettings(){return i},setSettings(o){try{localStorage.setItem(s,JSON.stringify(o))}catch{}i=o},now(){return Mu()}},n&&n.on(Lu,(o,l)=>{o===this.plugin.id&&this.fallbacks.setSettings(l)}),this.proxiedOn=new Proxy({},{get:(o,l)=>this.target?this.target.on[l]:(...c)=>{this.onQueue.push({method:l,args:c})}}),this.proxiedTarget=new Proxy({},{get:(o,l)=>this.target?this.target[l]:l==="on"?this.proxiedOn:Object.keys(this.fallbacks).includes(l)?(...c)=>(this.targetQueue.push({method:l,args:c,resolve:()=>{}}),this.fallbacks[l](...c)):(...c)=>new Promise(f=>{this.targetQueue.push({method:l,args:c,resolve:f})})})}async setRealTarget(t){this.target=t;for(const n of this.onQueue)this.target.on[n.method](...n.args);for(const n of this.targetQueue)n.resolve(await this.target[n.method](...n.args))}}function Nu(e,t){const n=e,r=Xo(),s=Tu(),i=Au&&n.enableEarlyProxy;if(s&&(r.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__||!i))s.emit(Ou,e,t);else{const o=i?new ku(n,s):null;(r.__VUE_DEVTOOLS_PLUGINS__=r.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:n,setupFn:t,proxy:o}),o&&t(o.proxiedTarget)}}/*!
  * vue-router v4.5.0
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */const tt=typeof document<"u";function Zo(e){return typeof e=="object"||"displayName"in e||"props"in e||"__vccOpts"in e}function Du(e){return e.__esModule||e[Symbol.toStringTag]==="Module"||e.default&&Zo(e.default)}const G=Object.assign;function mr(e,t){const n={};for(const r in t){const s=t[r];n[r]=Oe(s)?s.map(e):e(s)}return n}const on=()=>{},Oe=Array.isArray,el=/#/g,Fu=/&/g,$u=/\//g,Hu=/=/g,ju=/\?/g,tl=/\+/g,Vu=/%5B/g,Bu=/%5D/g,nl=/%5E/g,Uu=/%60/g,rl=/%7B/g,Ku=/%7C/g,sl=/%7D/g,Wu=/%20/g;function us(e){return encodeURI(""+e).replace(Ku,"|").replace(Vu,"[").replace(Bu,"]")}function qu(e){return us(e).replace(rl,"{").replace(sl,"}").replace(nl,"^")}function $r(e){return us(e).replace(tl,"%2B").replace(Wu,"+").replace(el,"%23").replace(Fu,"%26").replace(Uu,"`").replace(rl,"{").replace(sl,"}").replace(nl,"^")}function zu(e){return $r(e).replace(Hu,"%3D")}function Gu(e){return us(e).replace(el,"%23").replace(ju,"%3F")}function Qu(e){return e==null?"":Gu(e).replace($u,"%2F")}function Vt(e){try{return decodeURIComponent(""+e)}catch{}return""+e}const Ju=/\/$/,Yu=e=>e.replace(Ju,"");function _r(e,t,n="/"){let r,s={},i="",o="";const l=t.indexOf("#");let c=t.indexOf("?");return l<c&&l>=0&&(c=-1),c>-1&&(r=t.slice(0,c),i=t.slice(c+1,l>-1?l:t.length),s=e(i)),l>-1&&(r=r||t.slice(0,l),o=t.slice(l,t.length)),r=tf(r??t,n),{fullPath:r+(i&&"?")+i+o,path:r,query:s,hash:Vt(o)}}function Xu(e,t){const n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}function ci(e,t){return!t||!e.toLowerCase().startsWith(t.toLowerCase())?e:e.slice(t.length)||"/"}function Zu(e,t,n){const r=t.matched.length-1,s=n.matched.length-1;return r>-1&&r===s&&gt(t.matched[r],n.matched[s])&&il(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}function gt(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function il(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(!ef(e[n],t[n]))return!1;return!0}function ef(e,t){return Oe(e)?ai(e,t):Oe(t)?ai(t,e):e===t}function ai(e,t){return Oe(t)?e.length===t.length&&e.every((n,r)=>n===t[r]):e.length===1&&e[0]===t}function tf(e,t){if(e.startsWith("/"))return e;if(!e)return t;const n=t.split("/"),r=e.split("/"),s=r[r.length-1];(s===".."||s===".")&&r.push("");let i=n.length-1,o,l;for(o=0;o<r.length;o++)if(l=r[o],l!==".")if(l==="..")i>1&&i--;else break;return n.slice(0,i).join("/")+"/"+r.slice(o).join("/")}const lt={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0};var mn;(function(e){e.pop="pop",e.push="push"})(mn||(mn={}));var ln;(function(e){e.back="back",e.forward="forward",e.unknown=""})(ln||(ln={}));function nf(e){if(!e)if(tt){const t=document.querySelector("base");e=t&&t.getAttribute("href")||"/",e=e.replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return e[0]!=="/"&&e[0]!=="#"&&(e="/"+e),Yu(e)}const rf=/^[^#]+#/;function sf(e,t){return e.replace(rf,"#")+t}function of(e,t){const n=document.documentElement.getBoundingClientRect(),r=e.getBoundingClientRect();return{behavior:t.behavior,left:r.left-n.left-(t.left||0),top:r.top-n.top-(t.top||0)}}const tr=()=>({left:window.scrollX,top:window.scrollY});function lf(e){let t;if("el"in e){const n=e.el,r=typeof n=="string"&&n.startsWith("#"),s=typeof n=="string"?r?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!s)return;t=of(s,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.scrollX,t.top!=null?t.top:window.scrollY)}function ui(e,t){return(history.state?history.state.position-t:-1)+e}const Hr=new Map;function cf(e,t){Hr.set(e,t)}function af(e){const t=Hr.get(e);return Hr.delete(e),t}let uf=()=>location.protocol+"//"+location.host;function ol(e,t){const{pathname:n,search:r,hash:s}=t,i=e.indexOf("#");if(i>-1){let l=s.includes(e.slice(i))?e.slice(i).length:1,c=s.slice(l);return c[0]!=="/"&&(c="/"+c),ci(c,"")}return ci(n,e)+r+s}function ff(e,t,n,r){let s=[],i=[],o=null;const l=({state:h})=>{const g=ol(e,location),v=n.value,x=t.value;let F=0;if(h){if(n.value=g,t.value=h,o&&o===v){o=null;return}F=x?h.position-x.position:0}else r(g);s.forEach(I=>{I(n.value,v,{delta:F,type:mn.pop,direction:F?F>0?ln.forward:ln.back:ln.unknown})})};function c(){o=n.value}function f(h){s.push(h);const g=()=>{const v=s.indexOf(h);v>-1&&s.splice(v,1)};return i.push(g),g}function a(){const{history:h}=window;h.state&&h.replaceState(G({},h.state,{scroll:tr()}),"")}function u(){for(const h of i)h();i=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",a)}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",a,{passive:!0}),{pauseListeners:c,listen:f,destroy:u}}function fi(e,t,n,r=!1,s=!1){return{back:e,current:t,forward:n,replaced:r,position:window.history.length,scroll:s?tr():null}}function df(e){const{history:t,location:n}=window,r={value:ol(e,n)},s={value:t.state};s.value||i(r.value,{back:null,current:r.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function i(c,f,a){const u=e.indexOf("#"),h=u>-1?(n.host&&document.querySelector("base")?e:e.slice(u))+c:uf()+e+c;try{t[a?"replaceState":"pushState"](f,"",h),s.value=f}catch(g){console.error(g),n[a?"replace":"assign"](h)}}function o(c,f){const a=G({},t.state,fi(s.value.back,c,s.value.forward,!0),f,{position:s.value.position});i(c,a,!0),r.value=c}function l(c,f){const a=G({},s.value,t.state,{forward:c,scroll:tr()});i(a.current,a,!0);const u=G({},fi(r.value,c,null),{position:a.position+1},f);i(c,u,!1),r.value=c}return{location:r,state:s,push:l,replace:o}}function hf(e){e=nf(e);const t=df(e),n=ff(e,t.state,t.location,t.replace);function r(i,o=!0){o||n.pauseListeners(),history.go(i)}const s=G({location:"",base:e,go:r,createHref:sf.bind(null,e)},t,n);return Object.defineProperty(s,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(s,"state",{enumerable:!0,get:()=>t.state.value}),s}function ll(e){return typeof e=="string"||e&&typeof e=="object"}function cl(e){return typeof e=="string"||typeof e=="symbol"}const al=Symbol("");var di;(function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"})(di||(di={}));function Bt(e,t){return G(new Error,{type:e,[al]:!0},t)}function Ze(e,t){return e instanceof Error&&al in e&&(t==null||!!(e.type&t))}const hi="[^/]+?",pf={sensitive:!1,strict:!1,start:!0,end:!0},gf=/[.+*?^${}()[\]/\\]/g;function mf(e,t){const n=G({},pf,t),r=[];let s=n.start?"^":"";const i=[];for(const f of e){const a=f.length?[]:[90];n.strict&&!f.length&&(s+="/");for(let u=0;u<f.length;u++){const h=f[u];let g=40+(n.sensitive?.25:0);if(h.type===0)u||(s+="/"),s+=h.value.replace(gf,"\\$&"),g+=40;else if(h.type===1){const{value:v,repeatable:x,optional:F,regexp:I}=h;i.push({name:v,repeatable:x,optional:F});const L=I||hi;if(L!==hi){g+=10;try{new RegExp(`(${L})`)}catch(O){throw new Error(`Invalid custom RegExp for param "${v}" (${L}): `+O.message)}}let k=x?`((?:${L})(?:/(?:${L}))*)`:`(${L})`;u||(k=F&&f.length<2?`(?:/${k})`:"/"+k),F&&(k+="?"),s+=k,g+=20,F&&(g+=-8),x&&(g+=-20),L===".*"&&(g+=-50)}a.push(g)}r.push(a)}if(n.strict&&n.end){const f=r.length-1;r[f][r[f].length-1]+=.7000000000000001}n.strict||(s+="/?"),n.end?s+="$":n.strict&&!s.endsWith("/")&&(s+="(?:/|$)");const o=new RegExp(s,n.sensitive?"":"i");function l(f){const a=f.match(o),u={};if(!a)return null;for(let h=1;h<a.length;h++){const g=a[h]||"",v=i[h-1];u[v.name]=g&&v.repeatable?g.split("/"):g}return u}function c(f){let a="",u=!1;for(const h of e){(!u||!a.endsWith("/"))&&(a+="/"),u=!1;for(const g of h)if(g.type===0)a+=g.value;else if(g.type===1){const{value:v,repeatable:x,optional:F}=g,I=v in f?f[v]:"";if(Oe(I)&&!x)throw new Error(`Provided param "${v}" is an array but it is not repeatable (* or + modifiers)`);const L=Oe(I)?I.join("/"):I;if(!L)if(F)h.length<2&&(a.endsWith("/")?a=a.slice(0,-1):u=!0);else throw new Error(`Missing required param "${v}"`);a+=L}}return a||"/"}return{re:o,score:r,keys:i,parse:l,stringify:c}}function _f(e,t){let n=0;for(;n<e.length&&n<t.length;){const r=t[n]-e[n];if(r)return r;n++}return e.length<t.length?e.length===1&&e[0]===80?-1:1:e.length>t.length?t.length===1&&t[0]===80?1:-1:0}function ul(e,t){let n=0;const r=e.score,s=t.score;for(;n<r.length&&n<s.length;){const i=_f(r[n],s[n]);if(i)return i;n++}if(Math.abs(s.length-r.length)===1){if(pi(r))return 1;if(pi(s))return-1}return s.length-r.length}function pi(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const yf={type:0,value:""},bf=/[a-zA-Z0-9_]/;function vf(e){if(!e)return[[]];if(e==="/")return[[yf]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function t(g){throw new Error(`ERR (${n})/"${f}": ${g}`)}let n=0,r=n;const s=[];let i;function o(){i&&s.push(i),i=[]}let l=0,c,f="",a="";function u(){f&&(n===0?i.push({type:0,value:f}):n===1||n===2||n===3?(i.length>1&&(c==="*"||c==="+")&&t(`A repeatable param (${f}) must be alone in its segment. eg: '/:ids+.`),i.push({type:1,value:f,regexp:a,repeatable:c==="*"||c==="+",optional:c==="*"||c==="?"})):t("Invalid state to consume buffer"),f="")}function h(){f+=c}for(;l<e.length;){if(c=e[l++],c==="\\"&&n!==2){r=n,n=4;continue}switch(n){case 0:c==="/"?(f&&u(),o()):c===":"?(u(),n=1):h();break;case 4:h(),n=r;break;case 1:c==="("?n=2:bf.test(c)?h():(u(),n=0,c!=="*"&&c!=="?"&&c!=="+"&&l--);break;case 2:c===")"?a[a.length-1]=="\\"?a=a.slice(0,-1)+c:n=3:a+=c;break;case 3:u(),n=0,c!=="*"&&c!=="?"&&c!=="+"&&l--,a="";break;default:t("Unknown state");break}}return n===2&&t(`Unfinished custom RegExp for param "${f}"`),u(),o(),s}function wf(e,t,n){const r=mf(vf(e.path),n),s=G(r,{record:e,parent:t,children:[],alias:[]});return t&&!s.record.aliasOf==!t.record.aliasOf&&t.children.push(s),s}function Ef(e,t){const n=[],r=new Map;t=yi({strict:!1,end:!0,sensitive:!1},t);function s(u){return r.get(u)}function i(u,h,g){const v=!g,x=mi(u);x.aliasOf=g&&g.record;const F=yi(t,u),I=[x];if("alias"in u){const O=typeof u.alias=="string"?[u.alias]:u.alias;for(const U of O)I.push(mi(G({},x,{components:g?g.record.components:x.components,path:U,aliasOf:g?g.record:x})))}let L,k;for(const O of I){const{path:U}=O;if(h&&U[0]!=="/"){const W=h.record.path,q=W[W.length-1]==="/"?"":"/";O.path=h.record.path+(U&&q+U)}if(L=wf(O,h,F),g?g.alias.push(L):(k=k||L,k!==L&&k.alias.push(L),v&&u.name&&!_i(L)&&o(u.name)),fl(L)&&c(L),x.children){const W=x.children;for(let q=0;q<W.length;q++)i(W[q],L,g&&g.children[q])}g=g||L}return k?()=>{o(k)}:on}function o(u){if(cl(u)){const h=r.get(u);h&&(r.delete(u),n.splice(n.indexOf(h),1),h.children.forEach(o),h.alias.forEach(o))}else{const h=n.indexOf(u);h>-1&&(n.splice(h,1),u.record.name&&r.delete(u.record.name),u.children.forEach(o),u.alias.forEach(o))}}function l(){return n}function c(u){const h=Cf(u,n);n.splice(h,0,u),u.record.name&&!_i(u)&&r.set(u.record.name,u)}function f(u,h){let g,v={},x,F;if("name"in u&&u.name){if(g=r.get(u.name),!g)throw Bt(1,{location:u});F=g.record.name,v=G(gi(h.params,g.keys.filter(k=>!k.optional).concat(g.parent?g.parent.keys.filter(k=>k.optional):[]).map(k=>k.name)),u.params&&gi(u.params,g.keys.map(k=>k.name))),x=g.stringify(v)}else if(u.path!=null)x=u.path,g=n.find(k=>k.re.test(x)),g&&(v=g.parse(x),F=g.record.name);else{if(g=h.name?r.get(h.name):n.find(k=>k.re.test(h.path)),!g)throw Bt(1,{location:u,currentLocation:h});F=g.record.name,v=G({},h.params,u.params),x=g.stringify(v)}const I=[];let L=g;for(;L;)I.unshift(L.record),L=L.parent;return{name:F,path:x,params:v,matched:I,meta:Sf(I)}}e.forEach(u=>i(u));function a(){n.length=0,r.clear()}return{addRoute:i,resolve:f,removeRoute:o,clearRoutes:a,getRoutes:l,getRecordMatcher:s}}function gi(e,t){const n={};for(const r of t)r in e&&(n[r]=e[r]);return n}function mi(e){const t={path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:e.aliasOf,beforeEnter:e.beforeEnter,props:xf(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}};return Object.defineProperty(t,"mods",{value:{}}),t}function xf(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(const r in e.components)t[r]=typeof n=="object"?n[r]:n;return t}function _i(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function Sf(e){return e.reduce((t,n)=>G(t,n.meta),{})}function yi(e,t){const n={};for(const r in e)n[r]=r in t?t[r]:e[r];return n}function Cf(e,t){let n=0,r=t.length;for(;n!==r;){const i=n+r>>1;ul(e,t[i])<0?r=i:n=i+1}const s=Rf(e);return s&&(r=t.lastIndexOf(s,r-1)),r}function Rf(e){let t=e;for(;t=t.parent;)if(fl(t)&&ul(e,t)===0)return t}function fl({record:e}){return!!(e.name||e.components&&Object.keys(e.components).length||e.redirect)}function Pf(e){const t={};if(e===""||e==="?")return t;const r=(e[0]==="?"?e.slice(1):e).split("&");for(let s=0;s<r.length;++s){const i=r[s].replace(tl," "),o=i.indexOf("="),l=Vt(o<0?i:i.slice(0,o)),c=o<0?null:Vt(i.slice(o+1));if(l in t){let f=t[l];Oe(f)||(f=t[l]=[f]),f.push(c)}else t[l]=c}return t}function bi(e){let t="";for(let n in e){const r=e[n];if(n=zu(n),r==null){r!==void 0&&(t+=(t.length?"&":"")+n);continue}(Oe(r)?r.map(i=>i&&$r(i)):[r&&$r(r)]).forEach(i=>{i!==void 0&&(t+=(t.length?"&":"")+n,i!=null&&(t+="="+i))})}return t}function Tf(e){const t={};for(const n in e){const r=e[n];r!==void 0&&(t[n]=Oe(r)?r.map(s=>s==null?null:""+s):r==null?r:""+r)}return t}const Af=Symbol(""),vi=Symbol(""),nr=Symbol(""),fs=Symbol(""),jr=Symbol("");function zt(){let e=[];function t(r){return e.push(r),()=>{const s=e.indexOf(r);s>-1&&e.splice(s,1)}}function n(){e=[]}return{add:t,list:()=>e.slice(),reset:n}}function dt(e,t,n,r,s,i=o=>o()){const o=r&&(r.enterCallbacks[s]=r.enterCallbacks[s]||[]);return()=>new Promise((l,c)=>{const f=h=>{h===!1?c(Bt(4,{from:n,to:t})):h instanceof Error?c(h):ll(h)?c(Bt(2,{from:t,to:h})):(o&&r.enterCallbacks[s]===o&&typeof h=="function"&&o.push(h),l())},a=i(()=>e.call(r&&r.instances[s],t,n,f));let u=Promise.resolve(a);e.length<3&&(u=u.then(f)),u.catch(h=>c(h))})}function yr(e,t,n,r,s=i=>i()){const i=[];for(const o of e)for(const l in o.components){let c=o.components[l];if(!(t!=="beforeRouteEnter"&&!o.instances[l]))if(Zo(c)){const a=(c.__vccOpts||c)[t];a&&i.push(dt(a,n,r,o,l,s))}else{let f=c();i.push(()=>f.then(a=>{if(!a)throw new Error(`Couldn't resolve component "${l}" at "${o.path}"`);const u=Du(a)?a.default:a;o.mods[l]=a,o.components[l]=u;const g=(u.__vccOpts||u)[t];return g&&dt(g,n,r,o,l,s)()}))}}return i}function wi(e){const t=$e(nr),n=$e(fs),r=De(()=>{const c=Ct(e.to);return t.resolve(c)}),s=De(()=>{const{matched:c}=r.value,{length:f}=c,a=c[f-1],u=n.matched;if(!a||!u.length)return-1;const h=u.findIndex(gt.bind(null,a));if(h>-1)return h;const g=Ei(c[f-2]);return f>1&&Ei(a)===g&&u[u.length-1].path!==g?u.findIndex(gt.bind(null,c[f-2])):h}),i=De(()=>s.value>-1&&kf(n.params,r.value.params)),o=De(()=>s.value>-1&&s.value===n.matched.length-1&&il(n.params,r.value.params));function l(c={}){if(Mf(c)){const f=t[Ct(e.replace)?"replace":"push"](Ct(e.to)).catch(on);return e.viewTransition&&typeof document<"u"&&"startViewTransition"in document&&document.startViewTransition(()=>f),f}return Promise.resolve()}if(tt){const c=Bo();if(c){const f={route:r.value,isActive:i.value,isExactActive:o.value,error:null};c.__vrl_devtools=c.__vrl_devtools||[],c.__vrl_devtools.push(f),ea(()=>{f.route=r.value,f.isActive=i.value,f.isExactActive=o.value,f.error=ll(Ct(e.to))?null:'Invalid "to" value'},{flush:"post"})}}return{route:r,href:De(()=>r.value.href),isActive:i,isExactActive:o,navigate:l}}function Of(e){return e.length===1?e[0]:e}const Lf=rs({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:wi,setup(e,{slots:t}){const n=Ut(wi(e)),{options:r}=$e(nr),s=De(()=>({[xi(e.activeClass,r.linkActiveClass,"router-link-active")]:n.isActive,[xi(e.exactActiveClass,r.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive}));return()=>{const i=t.default&&Of(t.default(n));return e.custom?i:cs("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:s.value},i)}}}),If=Lf;function Mf(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function kf(e,t){for(const n in t){const r=t[n],s=e[n];if(typeof r=="string"){if(r!==s)return!1}else if(!Oe(s)||s.length!==r.length||r.some((i,o)=>i!==s[o]))return!1}return!0}function Ei(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const xi=(e,t,n)=>e??t??n,Nf=rs({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:n}){const r=$e(jr),s=De(()=>e.route||r.value),i=$e(vi,0),o=De(()=>{let f=Ct(i);const{matched:a}=s.value;let u;for(;(u=a[f])&&!u.components;)f++;return f}),l=De(()=>s.value.matched[o.value]);Tn(vi,De(()=>o.value+1)),Tn(Af,l),Tn(jr,s);const c=Qi();return rn(()=>[c.value,l.value,e.name],([f,a,u],[h,g,v])=>{a&&(a.instances[u]=f,g&&g!==a&&f&&f===h&&(a.leaveGuards.size||(a.leaveGuards=g.leaveGuards),a.updateGuards.size||(a.updateGuards=g.updateGuards))),f&&a&&(!g||!gt(a,g)||!h)&&(a.enterCallbacks[u]||[]).forEach(x=>x(f))},{flush:"post"}),()=>{const f=s.value,a=e.name,u=l.value,h=u&&u.components[a];if(!h)return Si(n.default,{Component:h,route:f});const g=u.props[a],v=g?g===!0?f.params:typeof g=="function"?g(f):g:null,F=cs(h,G({},v,t,{onVnodeUnmounted:I=>{I.component.isUnmounted&&(u.instances[a]=null)},ref:c}));if(tt&&F.ref){const I={depth:o.value,name:u.name,path:u.path,meta:u.meta};(Oe(F.ref)?F.ref.map(k=>k.i):[F.ref.i]).forEach(k=>{k.__vrv_devtools=I})}return Si(n.default,{Component:F,route:f})||F}}});function Si(e,t){if(!e)return null;const n=e(t);return n.length===1?n[0]:n}const Df=Nf;function Gt(e,t){const n=G({},e,{matched:e.matched.map(r=>zf(r,["instances","children","aliasOf"]))});return{_custom:{type:null,readOnly:!0,display:e.fullPath,tooltip:t,value:n}}}function Rn(e){return{_custom:{display:e}}}let Ff=0;function $f(e,t,n){if(t.__hasDevtools)return;t.__hasDevtools=!0;const r=Ff++;Nu({id:"org.vuejs.router"+(r?"."+r:""),label:"Vue Router",packageName:"vue-router",homepage:"https://router.vuejs.org",logo:"https://router.vuejs.org/logo.png",componentStateTypes:["Routing"],app:e},s=>{typeof s.now!="function"&&console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."),s.on.inspectComponent((a,u)=>{a.instanceData&&a.instanceData.state.push({type:"Routing",key:"$route",editable:!1,value:Gt(t.currentRoute.value,"Current Route")})}),s.on.visitComponentTree(({treeNode:a,componentInstance:u})=>{if(u.__vrv_devtools){const h=u.__vrv_devtools;a.tags.push({label:(h.name?`${h.name.toString()}: `:"")+h.path,textColor:0,tooltip:"This component is rendered by &lt;router-view&gt;",backgroundColor:dl})}Oe(u.__vrl_devtools)&&(u.__devtoolsApi=s,u.__vrl_devtools.forEach(h=>{let g=h.route.path,v=gl,x="",F=0;h.error?(g=h.error,v=Uf,F=Kf):h.isExactActive?(v=pl,x="This is exactly active"):h.isActive&&(v=hl,x="This link is active"),a.tags.push({label:g,textColor:F,tooltip:x,backgroundColor:v})}))}),rn(t.currentRoute,()=>{c(),s.notifyComponentUpdate(),s.sendInspectorTree(l),s.sendInspectorState(l)});const i="router:navigations:"+r;s.addTimelineLayer({id:i,label:`Router${r?" "+r:""} Navigations`,color:4237508}),t.onError((a,u)=>{s.addTimelineEvent({layerId:i,event:{title:"Error during Navigation",subtitle:u.fullPath,logType:"error",time:s.now(),data:{error:a},groupId:u.meta.__navigationId}})});let o=0;t.beforeEach((a,u)=>{const h={guard:Rn("beforeEach"),from:Gt(u,"Current Location during this navigation"),to:Gt(a,"Target location")};Object.defineProperty(a.meta,"__navigationId",{value:o++}),s.addTimelineEvent({layerId:i,event:{time:s.now(),title:"Start of navigation",subtitle:a.fullPath,data:h,groupId:a.meta.__navigationId}})}),t.afterEach((a,u,h)=>{const g={guard:Rn("afterEach")};h?(g.failure={_custom:{type:Error,readOnly:!0,display:h?h.message:"",tooltip:"Navigation Failure",value:h}},g.status=Rn("❌")):g.status=Rn("✅"),g.from=Gt(u,"Current Location during this navigation"),g.to=Gt(a,"Target location"),s.addTimelineEvent({layerId:i,event:{title:"End of navigation",subtitle:a.fullPath,time:s.now(),data:g,logType:h?"warning":"default",groupId:a.meta.__navigationId}})});const l="router-inspector:"+r;s.addInspector({id:l,label:"Routes"+(r?" "+r:""),icon:"book",treeFilterPlaceholder:"Search routes"});function c(){if(!f)return;const a=f;let u=n.getRoutes().filter(h=>!h.parent||!h.parent.record.components);u.forEach(yl),a.filter&&(u=u.filter(h=>Vr(h,a.filter.toLowerCase()))),u.forEach(h=>_l(h,t.currentRoute.value)),a.rootNodes=u.map(ml)}let f;s.on.getInspectorTree(a=>{f=a,a.app===e&&a.inspectorId===l&&c()}),s.on.getInspectorState(a=>{if(a.app===e&&a.inspectorId===l){const h=n.getRoutes().find(g=>g.record.__vd_id===a.nodeId);h&&(a.state={options:jf(h)})}}),s.sendInspectorTree(l),s.sendInspectorState(l)})}function Hf(e){return e.optional?e.repeatable?"*":"?":e.repeatable?"+":""}function jf(e){const{record:t}=e,n=[{editable:!1,key:"path",value:t.path}];return t.name!=null&&n.push({editable:!1,key:"name",value:t.name}),n.push({editable:!1,key:"regexp",value:e.re}),e.keys.length&&n.push({editable:!1,key:"keys",value:{_custom:{type:null,readOnly:!0,display:e.keys.map(r=>`${r.name}${Hf(r)}`).join(" "),tooltip:"Param keys",value:e.keys}}}),t.redirect!=null&&n.push({editable:!1,key:"redirect",value:t.redirect}),e.alias.length&&n.push({editable:!1,key:"aliases",value:e.alias.map(r=>r.record.path)}),Object.keys(e.record.meta).length&&n.push({editable:!1,key:"meta",value:e.record.meta}),n.push({key:"score",editable:!1,value:{_custom:{type:null,readOnly:!0,display:e.score.map(r=>r.join(", ")).join(" | "),tooltip:"Score used to sort routes",value:e.score}}}),n}const dl=15485081,hl=2450411,pl=8702998,Vf=2282478,gl=16486972,Bf=6710886,Uf=16704226,Kf=12131356;function ml(e){const t=[],{record:n}=e;n.name!=null&&t.push({label:String(n.name),textColor:0,backgroundColor:Vf}),n.aliasOf&&t.push({label:"alias",textColor:0,backgroundColor:gl}),e.__vd_match&&t.push({label:"matches",textColor:0,backgroundColor:dl}),e.__vd_exactActive&&t.push({label:"exact",textColor:0,backgroundColor:pl}),e.__vd_active&&t.push({label:"active",textColor:0,backgroundColor:hl}),n.redirect&&t.push({label:typeof n.redirect=="string"?`redirect: ${n.redirect}`:"redirects",textColor:16777215,backgroundColor:Bf});let r=n.__vd_id;return r==null&&(r=String(Wf++),n.__vd_id=r),{id:r,label:n.path,tags:t,children:e.children.map(ml)}}let Wf=0;const qf=/^\/(.*)\/([a-z]*)$/;function _l(e,t){const n=t.matched.length&&gt(t.matched[t.matched.length-1],e.record);e.__vd_exactActive=e.__vd_active=n,n||(e.__vd_active=t.matched.some(r=>gt(r,e.record))),e.children.forEach(r=>_l(r,t))}function yl(e){e.__vd_match=!1,e.children.forEach(yl)}function Vr(e,t){const n=String(e.re).match(qf);if(e.__vd_match=!1,!n||n.length<3)return!1;if(new RegExp(n[1].replace(/\$$/,""),n[2]).test(t))return e.children.forEach(o=>Vr(o,t)),e.record.path!=="/"||t==="/"?(e.__vd_match=e.re.test(t),!0):!1;const s=e.record.path.toLowerCase(),i=Vt(s);return!t.startsWith("/")&&(i.includes(t)||s.includes(t))||i.startsWith(t)||s.startsWith(t)||e.record.name&&String(e.record.name).includes(t)?!0:e.children.some(o=>Vr(o,t))}function zf(e,t){const n={};for(const r in e)t.includes(r)||(n[r]=e[r]);return n}function Gf(e){const t=Ef(e.routes,e),n=e.parseQuery||Pf,r=e.stringifyQuery||bi,s=e.history,i=zt(),o=zt(),l=zt(),c=Zl(lt);let f=lt;tt&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const a=mr.bind(null,y=>""+y),u=mr.bind(null,Qu),h=mr.bind(null,Vt);function g(y,A){let P,N;return cl(y)?(P=t.getRecordMatcher(y),N=A):N=y,t.addRoute(N,P)}function v(y){const A=t.getRecordMatcher(y);A&&t.removeRoute(A)}function x(){return t.getRoutes().map(y=>y.record)}function F(y){return!!t.getRecordMatcher(y)}function I(y,A){if(A=G({},A||c.value),typeof y=="string"){const m=_r(n,y,A.path),_=t.resolve({path:m.path},A),w=s.createHref(m.fullPath);return G(m,_,{params:h(_.params),hash:Vt(m.hash),redirectedFrom:void 0,href:w})}let P;if(y.path!=null)P=G({},y,{path:_r(n,y.path,A.path).path});else{const m=G({},y.params);for(const _ in m)m[_]==null&&delete m[_];P=G({},y,{params:u(m)}),A.params=u(A.params)}const N=t.resolve(P,A),ne=y.hash||"";N.params=a(h(N.params));const d=Xu(r,G({},y,{hash:qu(ne),path:N.path})),p=s.createHref(d);return G({fullPath:d,hash:ne,query:r===bi?Tf(y.query):y.query||{}},N,{redirectedFrom:void 0,href:p})}function L(y){return typeof y=="string"?_r(n,y,c.value.path):G({},y)}function k(y,A){if(f!==y)return Bt(8,{from:A,to:y})}function O(y){return q(y)}function U(y){return O(G(L(y),{replace:!0}))}function W(y){const A=y.matched[y.matched.length-1];if(A&&A.redirect){const{redirect:P}=A;let N=typeof P=="function"?P(y):P;return typeof N=="string"&&(N=N.includes("?")||N.includes("#")?N=L(N):{path:N},N.params={}),G({query:y.query,hash:y.hash,params:N.path!=null?{}:y.params},N)}}function q(y,A){const P=f=I(y),N=c.value,ne=y.state,d=y.force,p=y.replace===!0,m=W(P);if(m)return q(G(L(m),{state:typeof m=="object"?G({},ne,m.state):ne,force:d,replace:p}),A||P);const _=P;_.redirectedFrom=A;let w;return!d&&Zu(r,N,P)&&(w=Bt(16,{to:_,from:N}),je(N,N,!0,!1)),(w?Promise.resolve(w):K(_,N)).catch(b=>Ze(b)?Ze(b,2)?b:it(b):Y(b,_,N)).then(b=>{if(b){if(Ze(b,2))return q(G({replace:p},L(b.to),{state:typeof b.to=="object"?G({},ne,b.to.state):ne,force:d}),A||_)}else b=M(_,N,!0,p,ne);return Z(_,N,b),b})}function le(y,A){const P=k(y,A);return P?Promise.reject(P):Promise.resolve()}function D(y){const A=Lt.values().next().value;return A&&typeof A.runWithContext=="function"?A.runWithContext(y):y()}function K(y,A){let P;const[N,ne,d]=Qf(y,A);P=yr(N.reverse(),"beforeRouteLeave",y,A);for(const m of N)m.leaveGuards.forEach(_=>{P.push(dt(_,y,A))});const p=le.bind(null,y,A);return P.push(p),Le(P).then(()=>{P=[];for(const m of i.list())P.push(dt(m,y,A));return P.push(p),Le(P)}).then(()=>{P=yr(ne,"beforeRouteUpdate",y,A);for(const m of ne)m.updateGuards.forEach(_=>{P.push(dt(_,y,A))});return P.push(p),Le(P)}).then(()=>{P=[];for(const m of d)if(m.beforeEnter)if(Oe(m.beforeEnter))for(const _ of m.beforeEnter)P.push(dt(_,y,A));else P.push(dt(m.beforeEnter,y,A));return P.push(p),Le(P)}).then(()=>(y.matched.forEach(m=>m.enterCallbacks={}),P=yr(d,"beforeRouteEnter",y,A,D),P.push(p),Le(P))).then(()=>{P=[];for(const m of o.list())P.push(dt(m,y,A));return P.push(p),Le(P)}).catch(m=>Ze(m,8)?m:Promise.reject(m))}function Z(y,A,P){l.list().forEach(N=>D(()=>N(y,A,P)))}function M(y,A,P,N,ne){const d=k(y,A);if(d)return d;const p=A===lt,m=tt?history.state:{};P&&(N||p?s.replace(y.fullPath,G({scroll:p&&m&&m.scroll},ne)):s.push(y.fullPath,ne)),c.value=y,je(y,A,P,p),it()}let J;function ue(){J||(J=s.listen((y,A,P)=>{if(!vn.listening)return;const N=I(y),ne=W(N);if(ne){q(G(ne,{replace:!0,force:!0}),N).catch(on);return}f=N;const d=c.value;tt&&cf(ui(d.fullPath,P.delta),tr()),K(N,d).catch(p=>Ze(p,12)?p:Ze(p,2)?(q(G(L(p.to),{force:!0}),N).then(m=>{Ze(m,20)&&!P.delta&&P.type===mn.pop&&s.go(-1,!1)}).catch(on),Promise.reject()):(P.delta&&s.go(-P.delta,!1),Y(p,N,d))).then(p=>{p=p||M(N,d,!1),p&&(P.delta&&!Ze(p,8)?s.go(-P.delta,!1):P.type===mn.pop&&Ze(p,20)&&s.go(-1,!1)),Z(N,d,p)}).catch(on)}))}let Se=zt(),ae=zt(),te;function Y(y,A,P){it(y);const N=ae.list();return N.length?N.forEach(ne=>ne(y,A,P)):console.error(y),Promise.reject(y)}function Je(){return te&&c.value!==lt?Promise.resolve():new Promise((y,A)=>{Se.add([y,A])})}function it(y){return te||(te=!y,ue(),Se.list().forEach(([A,P])=>y?P(y):A()),Se.reset()),y}function je(y,A,P,N){const{scrollBehavior:ne}=e;if(!tt||!ne)return Promise.resolve();const d=!P&&af(ui(y.fullPath,0))||(N||!P)&&history.state&&history.state.scroll||null;return Zi().then(()=>ne(y,A,d)).then(p=>p&&lf(p)).catch(p=>Y(p,y,A))}const we=y=>s.go(y);let Ot;const Lt=new Set,vn={currentRoute:c,listening:!0,addRoute:g,removeRoute:v,clearRoutes:t.clearRoutes,hasRoute:F,getRoutes:x,resolve:I,options:e,push:O,replace:U,go:we,back:()=>we(-1),forward:()=>we(1),beforeEach:i.add,beforeResolve:o.add,afterEach:l.add,onError:ae.add,isReady:Je,install(y){const A=this;y.component("RouterLink",If),y.component("RouterView",Df),y.config.globalProperties.$router=A,Object.defineProperty(y.config.globalProperties,"$route",{enumerable:!0,get:()=>Ct(c)}),tt&&!Ot&&c.value===lt&&(Ot=!0,O(s.location).catch(ne=>{}));const P={};for(const ne in lt)Object.defineProperty(P,ne,{get:()=>c.value[ne],enumerable:!0});y.provide(nr,A),y.provide(fs,zi(P)),y.provide(jr,c);const N=y.unmount;Lt.add(y),y.unmount=function(){Lt.delete(y),Lt.size<1&&(f=lt,J&&J(),J=null,c.value=lt,Ot=!1,te=!1),N()},tt&&$f(y,A,t)}};function Le(y){return y.reduce((A,P)=>A.then(()=>D(P)),Promise.resolve())}return vn}function Qf(e,t){const n=[],r=[],s=[],i=Math.max(t.matched.length,e.matched.length);for(let o=0;o<i;o++){const l=t.matched[o];l&&(e.matched.find(f=>gt(f,l))?r.push(l):n.push(l));const c=e.matched[o];c&&(t.matched.find(f=>gt(f,c))||s.push(c))}return[n,r,s]}function Ed(){return $e(nr)}function xd(e){return $e(fs)}const Jf=function(){const t=typeof document<"u"&&document.createElement("link").relList;return t&&t.supports&&t.supports("modulepreload")?"modulepreload":"preload"}(),Yf=function(e){return"/"+e},Ci={},br=function(t,n,r){let s=Promise.resolve();if(n&&n.length>0){document.getElementsByTagName("link");const o=document.querySelector("meta[property=csp-nonce]"),l=o?.nonce||o?.getAttribute("nonce");s=Promise.allSettled(n.map(c=>{if(c=Yf(c),c in Ci)return;Ci[c]=!0;const f=c.endsWith(".css"),a=f?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${a}`))return;const u=document.createElement("link");if(u.rel=f?"stylesheet":Jf,f||(u.as="script"),u.crossOrigin="",u.href=c,l&&u.setAttribute("nonce",l),document.head.appendChild(u),f)return new Promise((h,g)=>{u.addEventListener("load",h),u.addEventListener("error",()=>g(new Error(`Unable to preload CSS for ${c}`)))})}))}function i(o){const l=new Event("vite:preloadError",{cancelable:!0});if(l.payload=o,window.dispatchEvent(l),!l.defaultPrevented)throw o}return s.then(o=>{for(const l of o||[])l.status==="rejected"&&i(l.reason);return t().catch(i)})},Xf=[{path:"/",component:()=>br(()=>import("./BasePrincipal-CRuvtiRK.js"),__vite__mapDeps([0,1,2,3,4])),children:[{path:"",component:()=>br(()=>import("./SobreMim-Cvj9WaRt.js"),__vite__mapDeps([5,6,1,2,7])),meta:{title:"Sobre Mim"}},{path:"projetos",component:()=>br(()=>import("./MeusProjetos-DXt3MNV7.js"),__vite__mapDeps([8,1,3,6,9])),meta:{title:"Meus Projetos"}}]}],vr=Pu(function(){return Gf({scrollBehavior:()=>({left:0,top:0}),routes:Xf,history:hf("/")})});async function Zf(e,t){const n=e(Cu);n.config.performance=!0,n.use(wu,t);const r=zn(typeof vr=="function"?await vr({}):vr);return{app:n,router:r}}const ed={config:{}};async function td({app:e,router:t}){e.use(t),e.mount("#q-app")}Zf(Ja,ed).then(td);export{gu as $,_d as A,ru as B,wc as C,vc as D,Tn as E,vd as F,Ut as G,vo as H,xd as I,Ed as J,Lc as K,Fo as L,id as M,Ae as N,gc as O,Dr as P,da as Q,Il as R,Ho as S,Vo as T,si as U,as as V,rd as W,ld as X,Ne as Y,sd as Z,Eu as _,De as a,dd as a0,od as a1,Ct as a2,bo as b,cd as c,Zi as d,$e as e,wd as f,Bo as g,cs as h,Tt as i,bd as j,yd as k,jt as l,nd as m,gn as n,yo as o,ad as p,Qe as q,Qi as r,pd as s,ud as t,md as u,gd as v,rn as w,ei as x,hd as y,fd as z};


//# sourceMappingURL=data:application/json;base64,