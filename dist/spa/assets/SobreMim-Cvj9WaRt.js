import{Q as R,a as S,b as X,c as ce}from"./QCardActions-HGNTAPwE.js";import{v as Ae,m as j,h as Fe,n as je,k as A,l as $e}from"./QPage-DNhbTL6L.js";import{u as He,e as Oe,f as Ne,h as Ve,i as Ie,j as Re,Q as ze}from"./use-prevent-scroll-H_Vcrlwp.js";import{C as Ue,b as de,d as Ke,g as fe,a as h,U as ee,c as me,r as v,H as Ge,V as Je,h as k,W as We,k as ge,q as pe,w as te,X as ne,p as Ze,_ as he,L as T,M as D,Y as oe,Z as ae,N as l,O as c,T as i,m as Ye,R as P,Q as g,K as Xe,S as et}from"./index-BG_GJT5J.js";function tt(){let e;const t=fe();function n(){e=void 0}return Ue(n),de(n),{removeTick:n,registerTick(a){e=a,Ke(()=>{e===a&&(Ae(t)===!1&&e(),e=void 0)})}}}const nt={transitionShow:{type:String,default:"fade"},transitionHide:{type:String,default:"fade"},transitionDuration:{type:[String,Number],default:300}};function ot(e,t=()=>{},n=()=>{}){return{transitionProps:h(()=>{const a=`q-transition--${e.transitionShow||t()}`,r=`q-transition--${e.transitionHide||n()}`;return{appear:!0,enterFromClass:`${a}-enter-from`,enterActiveClass:`${a}-enter-active`,enterToClass:`${a}-enter-to`,leaveFromClass:`${r}-leave-from`,leaveActiveClass:`${r}-leave-active`,leaveToClass:`${r}-leave-to`}}),transitionStyle:h(()=>`--q-transition-duration: ${e.transitionDuration}ms`)}}let C=[],M=[];function ve(e){M=M.filter(t=>t!==e)}function at(e){ve(e),M.push(e)}function se(e){ve(e),M.length===0&&C.length!==0&&(C[C.length-1](),C=[])}function st(e){M.length===0?e():C.push(e)}let it=1,lt=document.body;function rt(e,t){const n=document.createElement("div");if(n.id=`q-portal--${t}--${it++}`,ee.globalNodes!==void 0){const a=ee.globalNodes.class;a!==void 0&&(n.className=a)}return lt.appendChild(n),n}function ut(e){e.remove()}const $=[];function ct(e){return $.find(t=>t.contentEl!==null&&t.contentEl.contains(e))}function dt(e,t){do{if(e.$options.name==="QMenu"){if(e.hide(t),e.$props.separateClosePopup===!0)return j(e)}else if(e.__qPortal===!0){const n=j(e);return n!==void 0&&n.$options.name==="QPopupProxy"?(e.hide(t),n):e}e=j(e)}while(e!=null)}function ft(e,t,n){for(;n!==0&&e!==void 0&&e!==null;){if(e.__qPortal===!0){if(n--,e.$options.name==="QMenu"){e=dt(e,t);continue}e.hide(t)}e=j(e)}}const mt=me({name:"QPortal",setup(e,{slots:t}){return()=>t.default()}});function gt(e){for(e=e.parent;e!=null;){if(e.type.name==="QGlobalDialog")return!0;if(e.type.name==="QDialog"||e.type.name==="QMenu")return!1;e=e.parent}return!1}function pt(e,t,n,a){const r=v(!1),d=v(!1);let s=null;const f={},m=gt(e);function p(b){if(b===!0){se(f),d.value=!0;return}d.value=!1,r.value===!1&&(m===!1&&s===null&&(s=rt(!1,a)),r.value=!0,$.push(e.proxy),at(f))}function _(b){if(d.value=!1,b!==!0)return;se(f),r.value=!1;const E=$.indexOf(e.proxy);E!==-1&&$.splice(E,1),s!==null&&(ut(s),s=null)}return Ge(()=>{_(!0)}),e.proxy.__qPortal=!0,Je(e.proxy,"contentEl",()=>t.value),{showPortal:p,hidePortal:_,portalIsActive:r,portalIsAccessible:d,renderPortal:()=>m===!0?n():r.value===!0?[k(We,{to:s},k(mt,n))]:void 0}}const w=[];let q;function ht(e){q=e.keyCode===27}function vt(){q===!0&&(q=!1)}function _t(e){q===!0&&(q=!1,ge(e,27)===!0&&w[w.length-1](e))}function _e(e){window[e]("keydown",ht),window[e]("blur",vt),window[e]("keyup",_t),q=!1}function bt(e){pe.is.desktop===!0&&(w.push(e),w.length===1&&_e("addEventListener"))}function ie(e){const t=w.indexOf(e);t!==-1&&(w.splice(t,1),w.length===0&&_e("removeEventListener"))}const y=[];function be(e){y[y.length-1](e)}function St(e){pe.is.desktop===!0&&(y.push(e),y.length===1&&document.body.addEventListener("focusin",be))}function le(e){const t=y.indexOf(e);t!==-1&&(y.splice(t,1),y.length===0&&document.body.removeEventListener("focusin",be))}let F=0;const kt={standard:"fixed-full flex-center",top:"fixed-top justify-center",bottom:"fixed-bottom justify-center",right:"fixed-right items-center",left:"fixed-left items-center"},re={standard:["scale","scale"],top:["slide-down","slide-up"],bottom:["slide-up","slide-down"],right:["slide-left","slide-right"],left:["slide-right","slide-left"]},wt=me({name:"QDialog",inheritAttrs:!1,props:{...He,...nt,transitionShow:String,transitionHide:String,persistent:Boolean,autoClose:Boolean,allowFocusOutside:Boolean,noEscDismiss:Boolean,noBackdropDismiss:Boolean,noRouteDismiss:Boolean,noRefocus:Boolean,noFocus:Boolean,noShake:Boolean,seamless:Boolean,maximized:Boolean,fullWidth:Boolean,fullHeight:Boolean,square:Boolean,backdropFilter:String,position:{type:String,default:"standard",validator:e=>["standard","top","bottom","left","right"].includes(e)}},emits:[...Oe,"shake","click","escapeKey"],setup(e,{slots:t,emit:n,attrs:a}){const r=fe(),d=v(null),s=v(!1),f=v(!1);let m=null,p=null,_,b;const E=h(()=>e.persistent!==!0&&e.noRouteDismiss!==!0&&e.seamless!==!0),{preventBodyScroll:z}=Re(),{registerTimeout:U}=Ne(),{registerTick:Se,removeTick:K}=tt(),{transitionProps:ke,transitionStyle:G}=ot(e,()=>re[e.position][0],()=>re[e.position][1]),we=h(()=>G.value+(e.backdropFilter!==void 0?`;backdrop-filter:${e.backdropFilter};-webkit-backdrop-filter:${e.backdropFilter}`:"")),{showPortal:J,hidePortal:W,portalIsAccessible:ye,renderPortal:xe}=pt(r,d,Qe,"dialog"),{hide:L}=Ve({showing:s,hideOnRouteChange:E,handleShow:De,handleHide:Ce,processOnMount:!0}),{addToHistory:Pe,removeFromHistory:Te}=Ie(s,L,E),qe=h(()=>`q-dialog__inner flex no-pointer-events q-dialog__inner--${e.maximized===!0?"maximized":"minimized"} q-dialog__inner--${e.position} ${kt[e.position]}`+(f.value===!0?" q-dialog__inner--animating":"")+(e.fullWidth===!0?" q-dialog__inner--fullwidth":"")+(e.fullHeight===!0?" q-dialog__inner--fullheight":"")+(e.square===!0?" q-dialog__inner--square":"")),Q=h(()=>s.value===!0&&e.seamless!==!0),Ee=h(()=>e.autoClose===!0?{onClick:Me}:{}),Be=h(()=>[`q-dialog fullscreen no-pointer-events q-dialog--${Q.value===!0?"modal":"seamless"}`,a.class]);te(()=>e.maximized,o=>{s.value===!0&&N(o)}),te(Q,o=>{z(o),o===!0?(St(V),bt(O)):(le(V),ie(O))});function De(o){Pe(),p=e.noRefocus===!1&&document.activeElement!==null?document.activeElement:null,N(e.maximized),J(),f.value=!0,e.noFocus!==!0?(document.activeElement!==null&&document.activeElement.blur(),Se(B)):K(),U(()=>{if(r.proxy.$q.platform.is.ios===!0){if(e.seamless!==!0&&document.activeElement){const{top:u,bottom:x}=document.activeElement.getBoundingClientRect(),{innerHeight:Y}=window,I=window.visualViewport!==void 0?window.visualViewport.height:Y;u>0&&x>I/2&&(document.scrollingElement.scrollTop=Math.min(document.scrollingElement.scrollHeight-I,x>=Y?1/0:Math.ceil(document.scrollingElement.scrollTop+x-I/2))),document.activeElement.scrollIntoView()}b=!0,d.value.click(),b=!1}J(!0),f.value=!1,n("show",o)},e.transitionDuration)}function Ce(o){K(),Te(),Z(!0),f.value=!0,W(),p!==null&&(((o&&o.type.indexOf("key")===0?p.closest('[tabindex]:not([tabindex^="-"])'):void 0)||p).focus(),p=null),U(()=>{W(!0),f.value=!1,n("hide",o)},e.transitionDuration)}function B(o){st(()=>{let u=d.value;if(u!==null){if(o!==void 0){const x=u.querySelector(o);if(x!==null){x.focus({preventScroll:!0});return}}u.contains(document.activeElement)!==!0&&(u=u.querySelector("[autofocus][tabindex], [data-autofocus][tabindex]")||u.querySelector("[autofocus] [tabindex], [data-autofocus] [tabindex]")||u.querySelector("[autofocus], [data-autofocus]")||u,u.focus({preventScroll:!0}))}})}function H(o){o&&typeof o.focus=="function"?o.focus({preventScroll:!0}):B(),n("shake");const u=d.value;u!==null&&(u.classList.remove("q-animate--scale"),u.classList.add("q-animate--scale"),m!==null&&clearTimeout(m),m=setTimeout(()=>{m=null,d.value!==null&&(u.classList.remove("q-animate--scale"),B())},170))}function O(){e.seamless!==!0&&(e.persistent===!0||e.noEscDismiss===!0?e.maximized!==!0&&e.noShake!==!0&&H():(n("escapeKey"),L()))}function Z(o){m!==null&&(clearTimeout(m),m=null),(o===!0||s.value===!0)&&(N(!1),e.seamless!==!0&&(z(!1),le(V),ie(O))),o!==!0&&(p=null)}function N(o){o===!0?_!==!0&&(F<1&&document.body.classList.add("q-body--dialog"),F++,_=!0):_===!0&&(F<2&&document.body.classList.remove("q-body--dialog"),F--,_=!1)}function Me(o){b!==!0&&(L(o),n("click",o))}function Le(o){e.persistent!==!0&&e.noBackdropDismiss!==!0?L(o):e.noShake!==!0&&H()}function V(o){e.allowFocusOutside!==!0&&ye.value===!0&&je(d.value,o.target)!==!0&&B('[tabindex]:not([tabindex="-1"])')}Object.assign(r.proxy,{focus:B,shake:H,__updateRefocusTarget(o){p=o||null}}),de(Z);function Qe(){return k("div",{role:"dialog","aria-modal":Q.value===!0?"true":"false",...a,class:Be.value},[k(ne,{name:"q-transition--fade",appear:!0},()=>Q.value===!0?k("div",{class:"q-dialog__backdrop fixed-full",style:we.value,"aria-hidden":"true",tabindex:-1,onClick:Le}):null),k(ne,ke.value,()=>s.value===!0?k("div",{ref:d,class:qe.value,style:G.value,tabindex:-1,...Ee.value},Fe(t.default)):null)])}return xe}});function ue(e){if(e===!1)return 0;if(e===!0||e===void 0)return 1;const t=parseInt(e,10);return isNaN(t)?0:t}const yt=Ze({name:"close-popup",beforeMount(e,{value:t}){const n={depth:ue(t),handler(a){n.depth!==0&&setTimeout(()=>{const r=ct(e);r!==void 0&&ft(r,a,n.depth)})},handlerKey(a){ge(a,13)===!0&&n.handler(a)}};e.__qclosepopup=n,e.addEventListener("click",n.handler),e.addEventListener("keyup",n.handlerKey)},updated(e,{value:t,oldValue:n}){t!==n&&(e.__qclosepopup.depth=ue(t))},beforeUnmount(e){const t=e.__qclosepopup;e.removeEventListener("click",t.handler),e.removeEventListener("keyup",t.handlerKey),delete e.__qclosepopup}}),xt={setup(){const e=v([{jobTitle:"Analista de Implantação",company:"PVT Software e Serviços",location:"Home Office",date:"Out de 2023 - atual",address:"Vila Velha, Espírito Santo, Brasil · Remota",img:"https://media.licdn.com/dms/image/v2/C4D0BAQH9Jv3uZQ70Pw/company-logo_200_200/company-logo_200_200/0/1655151859097/pvtsoftware_logo?e=1745452800&v=beta&t=4fQ24aApwH236xlV4rjUQNybvr_8EWg03wHWVdf1BEM",stacks:["Totvs Rm","SQL Server / PGSQL","Javascript, Python","ABAX / Gesplan / Admin"]},{jobTitle:"Desenvolvedor full stack",company:"UNDB",location:"Presencial",date:"Nov de 2022 - set de 2023",address:"São Luís, Maranhão, Brasil · Presencial",img:"https://scontent-for2-2.xx.fbcdn.net/v/t39.30808-6/343404012_609156724600342_4000267378462598576_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=t4jdrHO_DqUQ7kNvgGPPspF&_nc_zt=23&_nc_ht=scontent-for2-2.xx&_nc_gid=AipB2moMMgJd6ejUPNCOsdW&oh=00_AYA0ShFLBm0MRzne3l7ggZit1SwsbqdUnFTwnZq6UbYsBQ&oe=679709AD",stacks:["Totvs Rm","SQL","JavaScript / Python","Vuejs / Django"],showDescription:!1},{jobTitle:"Desenvolvedor full stack",company:"Controller Education",location:"Home Office",date:"Out de 2021 - Ago de 2022",address:"Joinville, Santa Catarina, Brasil · Remota",img:"https://www.controller.education/assets/img/logocontroller.png",stacks:["PgSQL","TypeScript / Go Lang","Reactjs"],showDescription:!1},{jobTitle:"Desenvolvedor full stack",company:"UNDB",location:"Presencial",date:"Dez de 2020 - Ago de 2021",address:"São Luís, Maranhão, Brasil · Híbrida",img:"https://scontent-for2-2.xx.fbcdn.net/v/t39.30808-6/343404012_609156724600342_4000267378462598576_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=t4jdrHO_DqUQ7kNvgGPPspF&_nc_zt=23&_nc_ht=scontent-for2-2.xx&_nc_gid=AipB2moMMgJd6ejUPNCOsdW&oh=00_AYA0ShFLBm0MRzne3l7ggZit1SwsbqdUnFTwnZq6UbYsBQ&oe=679709AD",stacks:["SQL","JavaScript / Python","Django","Vuejs"],showDescription:!1},{jobTitle:"Tecnico de Informatica",company:"HOSPITAL PRESIDENTE DUTRA",location:"Presencial",date:"Jan de 2017 - Out de 2019",address:"São Luís, Maranhão, Brasil · Presencial",img:"https://www.gov.br/ebserh/pt-br/hospitais-universitarios/regiao-nordeste/hu-ufma/comunicacao/noticias/hu-ufmaebserh-recebe-162-novos-residentes/logo",stacks:["HelpDesk","Suporte ao usuario","Linux","Ad"],showDescription:!1},{jobTitle:"Soldado de infantaria",company:"Exército Brasileiro",location:"Presencial",date:"Mar de 2011 - Mar de 2014 ",address:"São Luís, Maranhão, Brasil · Híbrida",img:"https://www.legiaodainfantariadoceara.org/24bis_foto900px.jpg",stacks:["Atirador de MAG72","Caçador","SGT"],showDescription:!1}]),t=v(!1),n=v([]);return{experiences:e,dialogVisible:t,selectedStacks:n,showStacks:r=>{n.value=e.value[r].stacks,t.value=!0}}}},Pt={class:"q-pa-md row items-start q-gutter-md justify-center"},Tt={class:"text-h5 q-mt-sm q-mb-xs"},qt={class:"text-caption text-grey"};function Et(e,t,n,a,r,d){return T(),D("div",Pt,[(T(!0),D(oe,null,ae(a.experiences,(s,f)=>(T(),D("div",{key:f,class:"col-12 col-md-6 col-lg-3 d-flex"},[l(R,{class:"my-card full-height",flat:"",bordered:""},{default:c(()=>[l(S,{horizontal:""},{default:c(()=>[l(S,null,{default:c(()=>[i("div",null,P(s.jobTitle),1),i("div",Tt,P(s.company),1),i("div",qt,[g(P(s.location),1),t[1]||(t[1]=i("br",null,null,-1)),g(" "+P(s.address),1)])]),_:2},1024),l(S,{class:"col-5 flex flex-center"},{default:c(()=>[l(ze,{class:"rounded-borders",src:s.img},null,8,["src"])]),_:2},1024)]),_:2},1024),l(ce),l(X,null,{default:c(()=>[l(A,{flat:"",round:"",icon:"event"}),l(A,{flat:""},{default:c(()=>[g(P(s.date),1)]),_:2},1024),l(A,{flat:"",color:"primary",onClick:m=>a.showStacks(f)},{default:c(()=>t[2]||(t[2]=[g(" Stacks ")])),_:2},1032,["onClick"])]),_:2},1024)]),_:2},1024)]))),128)),l(wt,{modelValue:a.dialogVisible,"onUpdate:modelValue":t[0]||(t[0]=s=>a.dialogVisible=s)},{default:c(()=>[l(R,null,{default:c(()=>[l(S,null,{default:c(()=>t[3]||(t[3]=[i("div",{class:"text-h6"},"Stacks",-1)])),_:1}),l(S,{class:"q-pt-none"},{default:c(()=>[i("ul",null,[(T(!0),D(oe,null,ae(a.selectedStacks,(s,f)=>(T(),D("li",{key:f},P(s),1))),128))])]),_:1}),l(X,{align:"right"},{default:c(()=>[Ye(l(A,{flat:"",label:"Fechar",color:"primary"},null,512),[[yt]])]),_:1})]),_:1})]),_:1},8,["modelValue"])])}const Bt=he(xt,[["render",Et],["__scopeId","data-v-9dad55b1"],["__file","MeusEmpregos.vue"]]),Dt={name:"SobreMim",components:{MeusEmpregos:Bt}},Ct={class:"row justify-center"};function Mt(e,t,n,a,r,d){const s=Xe("MeusEmpregos");return T(),et($e,{padding:""},{default:c(()=>[l(R,{flat:"",bordered:"",class:"q-pa-md",style:{border:"none"}},{default:c(()=>[l(S,null,{default:c(()=>t[0]||(t[0]=[i("div",{class:"row justify-center"},[i("div",{class:"col-12 col-md-8"},[i("p",{class:"text-justify"},[g(" Graduado em Sistemas de Informação em 2020.1, desenvolvo constantemente novas habilidades e busco atualização em tecnologias para me destacar no mercado. Tenho sólida experiência em desenvolvimento de sistemas e frameworks modernos, além de conhecimentos avançados em Data Science, incluindo análise e visualização de dados, modelagem e ferramentas de BI. Atualmente, estou aprofundando meus estudos em Java e Kotlin através da plataforma Alura, conhecida por seus cursos de excelência, que têm potencializado minhas competências em programação e análise de dados. "),i("br"),i("br"),i("code",null,[g(" Linguagens de Programação: ['Java', 'Kotlin', 'JavaScript', 'Python', 'Go Lang', 'TypeScript'] "),i("br"),g(" ERP e Sistemas: ['TOTVS RM','Service Now', 'Gesplan', 'Hyperion', 'Elaw', 'AccessOne']"),i("br"),g(" Frameworks: ['Django', 'Vue.js', 'Spring'] "),i("br"),g("Bancos de Dados: ['SQL Server', 'PgSQL'] "),i("br"),g("Metodologias Ágeis: ['Kanban', 'Scrum'] "),i("br"),g("Data Science: ['Python', 'SQL', 'B.I', 'ETL', 'KNIME'] ")]),i("br"),i("br")])])],-1)])),_:1}),l(ce,{spaced:""}),l(S,null,{default:c(()=>[i("div",Ct,[t[1]||(t[1]=i("div",{class:"col-12"},[i("h2",{class:"text-center"},"Experiências")],-1)),l(s)])]),_:1})]),_:1})]),_:1})}const jt=he(Dt,[["render",Mt],["__scopeId","data-v-ec93c359"],["__file","SobreMim.vue"]]);export{jt as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
