import{a as b,C as ce,b as Z,g as B,c as de,r as T,i as fe,o as ee,h as v,w as A,X as me,$ as F,d as I,q as L,l as p,s as ge,a0 as we}from"./index-BG_GJT5J.js";import{o as j,p as ve,v as z,h as he,q as ye,r as pe}from"./QPage-DNhbTL6L.js";const _e=[Element,String],Se=[null,document,document.body,document.scrollingElement,document.documentElement];function xe(e,t){let n=ve(t);if(n===void 0){if(e==null)return window;n=e.closest(".scroll,.scroll-y,.overflow-auto")}return Se.includes(n)?window:n}function te(e){return e===window?window.pageYOffset||window.scrollY||document.body.scrollTop||0:e.scrollTop}function ne(e){return e===window?window.pageXOffset||window.scrollX||document.body.scrollLeft||0:e.scrollLeft}function oe(e,t,n=0){const o=arguments[3]===void 0?performance.now():arguments[3],r=te(e);if(n<=0){r!==t&&Y(e,t);return}requestAnimationFrame(a=>{const s=a-o,u=r+(t-r)/Math.max(s,n)*s;Y(e,u),u!==t&&oe(e,t,n-s,a)})}function ie(e,t,n=0){const o=arguments[3]===void 0?performance.now():arguments[3],r=ne(e);if(n<=0){r!==t&&$(e,t);return}requestAnimationFrame(a=>{const s=a-o,u=r+(t-r)/Math.max(s,n)*s;$(e,u),u!==t&&ie(e,t,n-s,a)})}function Y(e,t){if(e===window){window.scrollTo(window.pageXOffset||window.scrollX||document.body.scrollLeft||0,t);return}e.scrollTop=t}function $(e,t){if(e===window){window.scrollTo(t,window.pageYOffset||window.scrollY||document.body.scrollTop||0);return}e.scrollLeft=t}function ze(e,t,n){if(n){oe(e,t,n);return}Y(e,t)}function Me(e,t,n){if(n){ie(e,t,n);return}$(e,t)}let _;function We(){if(_!==void 0)return _;const e=document.createElement("p"),t=document.createElement("div");j(e,{width:"100%",height:"200px"}),j(t,{position:"absolute",top:"0px",left:"0px",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),t.appendChild(e),document.body.appendChild(t);const n=e.offsetWidth;t.style.overflow="scroll";let o=e.offsetWidth;return n===o&&(o=t.clientWidth),t.remove(),_=n-o,_}function be(e,t=!0){return!e||e.nodeType!==Node.ELEMENT_NODE?!1:t?e.scrollHeight>e.clientHeight&&(e.classList.contains("scroll")||e.classList.contains("overflow-auto")||["auto","scroll"].includes(window.getComputedStyle(e)["overflow-y"])):e.scrollWidth>e.clientWidth&&(e.classList.contains("scroll")||e.classList.contains("overflow-auto")||["auto","scroll"].includes(window.getComputedStyle(e)["overflow-x"]))}const Te={ratio:[String,Number]};function Le(e,t){return b(()=>{const n=Number(e.ratio||(t!==void 0?t.value:void 0));return isNaN(n)!==!0&&n>0?{paddingBottom:`${100/n}%`}:null})}function D(){let e=null;const t=B();function n(){e!==null&&(clearTimeout(e),e=null)}return ce(n),Z(n),{removeTimeout:n,registerTimeout(o,r){n(),z(t)===!1&&(e=setTimeout(()=>{e=null,o()},r))}}}const qe=1.7778,ke=de({name:"QImg",props:{...Te,src:String,srcset:String,sizes:String,alt:String,crossorigin:String,decoding:String,referrerpolicy:String,draggable:Boolean,loading:{type:String,default:"lazy"},loadingShowDelay:{type:[Number,String],default:0},fetchpriority:{type:String,default:"auto"},width:String,height:String,initialRatio:{type:[Number,String],default:qe},placeholderSrc:String,errorSrc:String,fit:{type:String,default:"cover"},position:{type:String,default:"50% 50%"},imgClass:String,imgStyle:Object,noSpinner:Boolean,noNativeMenu:Boolean,noTransition:Boolean,spinnerColor:String,spinnerSize:String},emits:["load","error"],setup(e,{slots:t,emit:n}){const o=T(e.initialRatio),r=Le(e,o),a=B(),{registerTimeout:s,removeTimeout:u}=D(),{registerTimeout:m,removeTimeout:q}=D(),c=b(()=>e.placeholderSrc!==void 0?{src:e.placeholderSrc}:null),M=b(()=>e.errorSrc!==void 0?{src:e.errorSrc,__qerror:!0}:null),d=[T(null),T(c.value)],f=T(0),g=T(!1),h=T(!1),C=b(()=>`q-img q-img--${e.noNativeMenu===!0?"no-":""}menu`),P=b(()=>({width:e.width,height:e.height})),l=b(()=>`q-img__image ${e.imgClass!==void 0?e.imgClass+" ":""}q-img__image--with${e.noTransition===!0?"out":""}-transition q-img__image--`),w=b(()=>({...e.imgStyle,objectFit:e.fit,objectPosition:e.position}));function le(){if(q(),e.loadingShowDelay===0){g.value=!0;return}m(()=>{g.value=!0},e.loadingShowDelay)}function W(){q(),g.value=!1}function re({target:i}){z(a)===!1&&(u(),o.value=i.naturalHeight===0?.5:i.naturalWidth/i.naturalHeight,O(i,1))}function O(i,y){y===1e3||z(a)===!0||(i.complete===!0?se(i):s(()=>{O(i,y+1)},50))}function se(i){z(a)!==!0&&(f.value=f.value^1,d[f.value].value=null,W(),i.getAttribute("__qerror")!=="true"&&(h.value=!1),n("load",i.currentSrc||i.src))}function ue(i){u(),W(),h.value=!0,d[f.value].value=M.value,d[f.value^1].value=c.value,n("error",i)}function R(i){const y=d[i].value,V={key:"img_"+i,class:l.value,style:w.value,alt:e.alt,crossorigin:e.crossorigin,decoding:e.decoding,referrerpolicy:e.referrerpolicy,height:e.height,width:e.width,loading:e.loading,fetchpriority:e.fetchpriority,"aria-hidden":"true",draggable:e.draggable,...y};return f.value===i?Object.assign(V,{class:V.class+"current",onLoad:re,onError:ue}):V.class+="loaded",v("div",{class:"q-img__container absolute-full",key:"img"+i},v("img",V))}function ae(){return g.value===!1?v("div",{key:"content",class:"q-img__content absolute-full q-anchor--skip"},he(t[h.value===!0?"error":"default"])):v("div",{key:"loading",class:"q-img__loading absolute-full flex flex-center"},t.loading!==void 0?t.loading():e.noSpinner===!0?void 0:[v(ye,{color:e.spinnerColor,size:e.spinnerSize})])}{let i=function(){A(()=>e.src||e.srcset||e.sizes?{src:e.src,srcset:e.srcset,sizes:e.sizes}:null,y=>{u(),h.value=!1,y===null?(W(),d[f.value^1].value=c.value):le(),d[f.value].value=y},{immediate:!0})};fe.value===!0?ee(i):i()}return()=>{const i=[];return r.value!==null&&i.push(v("div",{key:"filler",style:r.value})),d[0].value!==null&&i.push(R(0)),d[1].value!==null&&i.push(R(1)),i.push(v(me,{name:"q-transition--fade"},ae)),v("div",{key:"main",class:C.value,style:P.value,role:"img","aria-label":e.alt},i)}}});function Ne(e,t,n){let o;function r(){o!==void 0&&(F.remove(o),o=void 0)}return Z(()=>{e.value===!0&&r()}),{removeFromHistory:r,addToHistory(){o={condition:()=>n.value===!0,handler:t},F.add(o)}}}const Xe={modelValue:{type:Boolean,default:null},"onUpdate:modelValue":[Function,Array]},Ae=["beforeShow","show","beforeHide","hide"];function Ye({showing:e,canShow:t,hideOnRouteChange:n,handleShow:o,handleHide:r,processOnMount:a}){const s=B(),{props:u,emit:m,proxy:q}=s;let c;function M(l){e.value===!0?g(l):d(l)}function d(l){if(u.disable===!0||l!==void 0&&l.qAnchorHandled===!0||t!==void 0&&t(l)!==!0)return;const w=u["onUpdate:modelValue"]!==void 0;w===!0&&(m("update:modelValue",!0),c=l,I(()=>{c===l&&(c=void 0)})),(u.modelValue===null||w===!1)&&f(l)}function f(l){e.value!==!0&&(e.value=!0,m("beforeShow",l),o!==void 0?o(l):m("show",l))}function g(l){if(u.disable===!0)return;const w=u["onUpdate:modelValue"]!==void 0;w===!0&&(m("update:modelValue",!1),c=l,I(()=>{c===l&&(c=void 0)})),(u.modelValue===null||w===!1)&&h(l)}function h(l){e.value!==!1&&(e.value=!1,m("beforeHide",l),r!==void 0?r(l):m("hide",l))}function C(l){u.disable===!0&&l===!0?u["onUpdate:modelValue"]!==void 0&&m("update:modelValue",!1):l===!0!==e.value&&(l===!0?f:h)(c)}A(()=>u.modelValue,C),n!==void 0&&pe(s)===!0&&A(()=>q.$route.fullPath,()=>{n.value===!0&&e.value===!0&&g()}),a===!0&&ee(()=>{C(u.modelValue)});const P={show:d,hide:g,toggle:M};return Object.assign(q,P),P}let E=0,k,N,H,X=!1,U,Q,K,S=null;function Ee(e){He(e)&&ge(e)}function He(e){if(e.target===document.body||e.target.classList.contains("q-layout__backdrop"))return!0;const t=we(e),n=e.shiftKey&&!e.deltaX,o=!n&&Math.abs(e.deltaX)<=Math.abs(e.deltaY),r=n||o?e.deltaY:e.deltaX;for(let a=0;a<t.length;a++){const s=t[a];if(be(s,o))return o?r<0&&s.scrollTop===0?!0:r>0&&s.scrollTop+s.clientHeight===s.scrollHeight:r<0&&s.scrollLeft===0?!0:r>0&&s.scrollLeft+s.clientWidth===s.scrollWidth}return!0}function G(e){e.target===document&&(document.scrollingElement.scrollTop=document.scrollingElement.scrollTop)}function x(e){X!==!0&&(X=!0,requestAnimationFrame(()=>{X=!1;const{height:t}=e.target,{clientHeight:n,scrollTop:o}=document.scrollingElement;(H===void 0||t!==window.innerHeight)&&(H=n-t,document.scrollingElement.scrollTop=o),o>H&&(document.scrollingElement.scrollTop-=Math.ceil((o-H)/8))}))}function J(e){const t=document.body,n=window.visualViewport!==void 0;if(e==="add"){const{overflowY:o,overflowX:r}=window.getComputedStyle(t);k=ne(window),N=te(window),U=t.style.left,Q=t.style.top,K=window.location.href,t.style.left=`-${k}px`,t.style.top=`-${N}px`,r!=="hidden"&&(r==="scroll"||t.scrollWidth>window.innerWidth)&&t.classList.add("q-body--force-scrollbar-x"),o!=="hidden"&&(o==="scroll"||t.scrollHeight>window.innerHeight)&&t.classList.add("q-body--force-scrollbar-y"),t.classList.add("q-body--prevent-scroll"),document.qScrollPrevented=!0,L.is.ios===!0&&(n===!0?(window.scrollTo(0,0),window.visualViewport.addEventListener("resize",x,p.passiveCapture),window.visualViewport.addEventListener("scroll",x,p.passiveCapture),window.scrollTo(0,0)):window.addEventListener("scroll",G,p.passiveCapture))}L.is.desktop===!0&&L.is.mac===!0&&window[`${e}EventListener`]("wheel",Ee,p.notPassive),e==="remove"&&(L.is.ios===!0&&(n===!0?(window.visualViewport.removeEventListener("resize",x,p.passiveCapture),window.visualViewport.removeEventListener("scroll",x,p.passiveCapture)):window.removeEventListener("scroll",G,p.passiveCapture)),t.classList.remove("q-body--prevent-scroll"),t.classList.remove("q-body--force-scrollbar-x"),t.classList.remove("q-body--force-scrollbar-y"),document.qScrollPrevented=!1,t.style.left=U,t.style.top=Q,window.location.href===K&&window.scrollTo(k,N),H=void 0)}function Ce(e){let t="add";if(e===!0){if(E++,S!==null){clearTimeout(S),S=null;return}if(E>1)return}else{if(E===0||(E--,E>0))return;if(t="remove",L.is.ios===!0&&L.is.nativeMobile===!0){S!==null&&clearTimeout(S),S=setTimeout(()=>{J(t),S=null},100);return}}J(t)}function $e(){let e;return{preventBodyScroll(t){t!==e&&(e!==void 0||t===!0)&&(e=t,Ce(t))}}}export{ke as Q,te as a,ne as b,ze as c,Me as d,Ae as e,D as f,xe as g,Ye as h,Ne as i,$e as j,We as k,_e as s,Xe as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
