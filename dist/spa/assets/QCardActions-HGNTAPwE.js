import{c as i,a as e,h as c,g as v}from"./index-BG_GJT5J.js";import{h as u,u as m,c as g,s as C,t as S}from"./QPage-DNhbTL6L.js";const b=i({name:"QCardSection",props:{tag:{type:String,default:"div"},horizontal:Boolean},setup(a,{slots:t}){const r=e(()=>`q-card__section q-card__section--${a.horizontal===!0?"horiz row no-wrap":"vert"}`);return()=>c(a.tag,{class:r.value},u(t.default))}}),z={true:"inset",item:"item-inset","item-thumbnail":"item-thumbnail-inset"},l={xs:2,sm:4,md:8,lg:16,xl:24},_=i({name:"QSeparator",props:{...m,spaced:[Boolean,String],inset:[Boolean,String],vertical:Boolean,color:String,size:String},setup(a){const t=v(),r=g(a,t.proxy.$q),s=e(()=>a.vertical===!0?"vertical":"horizontal"),n=e(()=>` q-separator--${s.value}`),q=e(()=>a.inset!==!1?`${n.value}-${z[a.inset]}`:""),f=e(()=>`q-separator${n.value}${q.value}`+(a.color!==void 0?` bg-${a.color}`:"")+(r.value===!0?" q-separator--dark":"")),h=e(()=>{const o={};if(a.size!==void 0&&(o[a.vertical===!0?"width":"height"]=a.size),a.spaced!==!1){const $=a.spaced===!0?`${l.md}px`:a.spaced in l?`${l[a.spaced]}px`:a.spaced,d=a.vertical===!0?["Left","Right"]:["Top","Bottom"];o[`margin${d[0]}`]=o[`margin${d[1]}`]=$}return o});return()=>c("hr",{class:f.value,style:h.value,"aria-orientation":s.value})}}),k=i({name:"QCard",props:{...m,tag:{type:String,default:"div"},square:Boolean,flat:Boolean,bordered:Boolean},setup(a,{slots:t}){const{proxy:{$q:r}}=v(),s=g(a,r),n=e(()=>"q-card"+(s.value===!0?" q-card--dark q-dark":"")+(a.bordered===!0?" q-card--bordered":"")+(a.square===!0?" q-card--square no-border-radius":"")+(a.flat===!0?" q-card--flat no-shadow":""));return()=>c(a.tag,{class:n.value},u(t.default))}}),x=i({name:"QCardActions",props:{...C,vertical:Boolean},setup(a,{slots:t}){const r=S(a),s=e(()=>`q-card__actions ${r.value} q-card__actions--${a.vertical===!0?"vert column":"horiz row"}`);return()=>c("div",{class:s.value},u(t.default))}});export{k as Q,b as a,x as b,_ as c};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
